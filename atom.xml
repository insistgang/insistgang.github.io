<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘钢的笔记本</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2018-01-04T08:04:50.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>insistgang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-12-16T06:05:29.666Z</published>
    <updated>2018-01-04T08:04:50.000Z</updated>
    
    <content type="html"><![CDATA[eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1};while(c--){if(k[c]){p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('e 1o(a){2==a.1y&&1z.Z()}V.1x(!0),V.1w("1u",1o,!1),V.1v(),$(e(){$(".1B").1G(),1F(e(){$(".T").18("T").j().1E("1D").1e("T").h()},1H),$("#d-1p").q(e(){1q(t a={},b=1;1r>b;b++)a[b]=$("#9-"+b).9();$(".d-r").h(),$("#9-k").m(),$("#z").q(e(){$(".d-r").l()}),$("#d-B").q(e(){t b=$("#9-k").9(),c=$("#9-H").9();""==b.1g(/\\s+/g,"")?($("#d-f i").9("\\u\\G\\1d\\1i\\1k").h(),$("#9-k").m(),o(e(){$("#d-f i").l()},n)):/^[\\w\\-]{3,30}$/.1n(b)?""==c.1g(/\\s+/g,"")?($("#d-y i").9("\\u\\G\\1d\\1i\\1k").h(),$("#9-H").m(),o(e(){$("#d-y i").l()},n)):/^(x|2a):\\/\\/+([\\w-]+\\.)+[\\w-]+(\\/[\\w-.\\/?%&=]*)?$/.1n(c)?($("#z").L(\'<W 1c="W/1b.20" 1Y="1b">\'),$("#d-B").9("\\M\\N\\J\\C\\1Z...").12("A",!0).1e("A"),$.B("F.28?27",{25:b,26:c,1X:a},e(a){1==a.1a?($("#z").j(),$(".d-r p").j(),$(".d-r 1f 1W").j(),$(".d-r 1f 1N").j().9("\\C\\1O\\J\\C\\K\\10\\I\\M\\N").h(),$("#d-f").L(\'\\1M\\16\\K\\I\\15\\13\\1L\\1V<a k="\'+a.f+\'" 1T="21">\'+a.f+"</a>").h(),$(".d-E").Q("S","O-X").1S("p").1R()):0==a.1a&&($("#d-f i").9(a.1U).h(),$("#9-k").m(),o(e(){$("#d-f i").l()},n),$("#z").9("\\1Q\\1P\\1K\\1J"),$("#d-B").9("\\10 \\J\\C\\K\\I\\M\\N").12("A",!1).18("A"))},"29")):($("#d-y i").9("\\u\\G\\24\\23\\16\\15\\13").h(),$("#9-H").m(),o(e(){$("#d-y i").l()},n)):($("#d-f i").9("\\u\\1I\\22\\G\\1C\\1s").h(),$("#9-k").m(),o(e(){$("#d-f i").l()},n))})});t D=1h.1t("D");$("#P").q(e(){D.Z(),$("#P").j(11),$("#R").Q({S:"O-X"},19)}),$("#R").q(e(){D.1A(),$("#R").j(11),$("#P").Q({S:"O-X"},19)});t 17=$("#9-2o").9()+"F"+$("#9-2b").9()+$("#9-3b").9();3a(14=$("#9-1").9()+$("#9-2").9()+$("#9-3").9()+$("#9-4").9()+$("#9-5").9()+$("#9-6").9()+$("#9-7").9()+$("#9-8").9()+"......",3d.3e={3h:{3g:{},3f:17,39:14,38:"x://1j.1m.Y/F/31/"+$("#9-k").9()+".L",2Z:"2",3j:["2X","33","34","37","36","35","3i","3u","3w","3v","3z","3y","3x","3m","3s","3k","3n","3o","3q","3p","1l","3l","3r","3t","2Y","2V","2r","2q","2p","2W","2s","2t","2x","2w","2v","2u","2n","2m","2f","2e","2d","2c","2g","2h","2l","2k","2j","2i","2y","2z","2P","2O","2N"],2M:"x://1j.1m.Y/F/W/2Q.2R",2U:"1",2T:"32"},E:{}},1h)0[(2S("2L")[0]||2K).2D(2C("2B")).1c="x://2A.E.1l.Y/2E/2F/U/E.U?v=2J.U?2I="+~(-2H 2G/3c)]});',62,222,'|||||||||text||||write|function|url||fadeIn||hide|href|fadeOut|focus|3e3|setTimeout||click|ok||var|u2190|||http|mp3|back|disabled|post|u6210|bgmMusic|share|love|u4e0d|music|u767d|u751f|u8868|html|u9875|u9762|inline|on|css|off|display|showtip|js|Flowtime|img|block|com|pause|u2764|200|attr|u63a5|sharedesc|u94fe|u7684|sharetext|removeClass|300|status|loading|src|u80fd|addClass|div|replace|document|u4e3a|www|u7a7a|baidu|qiugouda|test|onNavigation|submit|for|79|u786e|getElementById|flowtimenavigation|start|addEventListener|showProgress|progress|player|play|nojavascript|u6b63|span|siblings|setInterval|remove|5e3|u683c|u6539|u4fee|u662f|u60a8|h2|u529f|u65b0|u91cd|show|children|target|msg|uff1a|button|textArr|alt|u4e2d|gif|_blank|u5f0f|u8bb8|u5141|textHref|textMusic|add|php|json|https|76|mail|ff|xinhua|people|kanshou|isohu|ty|xg|wealink|yaolan|ifeng|qingbiji|75|leho|huaban|diandian|duitang|hx|sdo|youdao|fx|tfh|iguba|fbook|bdimg|script|createElement|appendChild|static|api|Date|new|cdnversion|89860593|body|head|bdPic|s139|deli|twi|319280|jpg|getElementsByTagName|bdSize|bdStyle|mogujie|share189|mshare|meilishuo|bdMini||2014||qzone|tsina|renren|weixin|bdysc|bdUrl|bdDesc|with|77|36e5|window|_bd_share_config|bdText|bdSnsKey|common|tqq|bdMiniList|thx|sohu|bdhome|qq|ibaidu|hi|taobao|t163|sqq|qy|bdxc|tqf|kaixin001|tsohu|douban|tieba'.split('|'),0,{}))]]></content>
    
    
      
      
    <summary type="html">eval(function(p,a,c,k,e,d){e=function(c){return(c&lt;a?&#39;&#39;:e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))};if(!&#39;&#39;.repla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-12-16T06:05:29.663Z</published>
    <updated>2018-01-04T08:04:50.000Z</updated>
    
    <content type="html"><![CDATA[/*! jQuery v1.8.3 jquery.com | jquery.org/license */(function(e,t){function _(e){var t=M[e]={};return v.each(e.split(y),function(e,n){t[n]=!0}),t}function H(e,n,r){if(r===t&&e.nodeType===1){var i="data-"+n.replace(P,"-$1").toLowerCase();r=e.getAttribute(i);if(typeof r=="string"){try{r=r==="true"?!0:r==="false"?!1:r==="null"?null:+r+""===r?+r:D.test(r)?v.parseJSON(r):r}catch(s){}v.data(e,n,r)}else r=t}return r}function B(e){var t;for(t in e){if(t==="data"&&v.isEmptyObject(e[t]))continue;if(t!=="toJSON")return!1}return!0}function et(){return!1}function tt(){return!0}function ut(e){return!e||!e.parentNode||e.parentNode.nodeType===11}function at(e,t){do e=e[t];while(e&&e.nodeType!==1);return e}function ft(e,t,n){t=t||0;if(v.isFunction(t))return v.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return v.grep(e,function(e,r){return e===t===n});if(typeof t=="string"){var r=v.grep(e,function(e){return e.nodeType===1});if(it.test(t))return v.filter(t,r,!n);t=v.filter(t,r)}return v.grep(e,function(e,r){return v.inArray(e,t)>=0===n})}function lt(e){var t=ct.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function At(e,t){if(t.nodeType!==1||!v.hasData(e))return;var n,r,i,s=v._data(e),o=v._data(t,s),u=s.events;if(u){delete o.handle,o.events={};for(n in u)for(r=0,i=u[n].length;r<i;r++)v.event.add(t,n,u[n][r])}o.data&&(o.data=v.extend({},o.data))}function Ot(e,t){var n;if(t.nodeType!==1)return;t.clearAttributes&&t.clearAttributes(),t.mergeAttributes&&t.mergeAttributes(e),n=t.nodeName.toLowerCase(),n==="object"?(t.parentNode&&(t.outerHTML=e.outerHTML),v.support.html5Clone&&e.innerHTML&&!v.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):n==="input"&&Et.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):n==="option"?t.selected=e.defaultSelected:n==="input"||n==="textarea"?t.defaultValue=e.defaultValue:n==="script"&&t.text!==e.text&&(t.text=e.text),t.removeAttribute(v.expando)}function Mt(e){return typeof e.getElementsByTagName!="undefined"?e.getElementsByTagName("*"):typeof e.querySelectorAll!="undefined"?e.querySelectorAll("*"):[]}function _t(e){Et.test(e.type)&&(e.defaultChecked=e.checked)}function Qt(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Jt.length;while(i--){t=Jt[i]+n;if(t in e)return t}return r}function Gt(e,t){return e=t||e,v.css(e,"display")==="none"||!v.contains(e.ownerDocument,e)}function Yt(e,t){var n,r,i=[],s=0,o=e.length;for(;s<o;s++){n=e[s];if(!n.style)continue;i[s]=v._data(n,"olddisplay"),t?(!i[s]&&n.style.display==="none"&&(n.style.display=""),n.style.display===""&&Gt(n)&&(i[s]=v._data(n,"olddisplay",nn(n.nodeName)))):(r=Dt(n,"display"),!i[s]&&r!=="none"&&v._data(n,"olddisplay",r))}for(s=0;s<o;s++){n=e[s];if(!n.style)continue;if(!t||n.style.display==="none"||n.style.display==="")n.style.display=t?i[s]||"":"none"}return e}function Zt(e,t,n){var r=Rt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function en(e,t,n,r){var i=n===(r?"border":"content")?4:t==="width"?1:0,s=0;for(;i<4;i+=2)n==="margin"&&(s+=v.css(e,n+$t[i],!0)),r?(n==="content"&&(s-=parseFloat(Dt(e,"padding"+$t[i]))||0),n!=="margin"&&(s-=parseFloat(Dt(e,"border"+$t[i]+"Width"))||0)):(s+=parseFloat(Dt(e,"padding"+$t[i]))||0,n!=="padding"&&(s+=parseFloat(Dt(e,"border"+$t[i]+"Width"))||0));return s}function tn(e,t,n){var r=t==="width"?e.offsetWidth:e.offsetHeight,i=!0,s=v.support.boxSizing&&v.css(e,"boxSizing")==="border-box";if(r<=0||r==null){r=Dt(e,t);if(r<0||r==null)r=e.style[t];if(Ut.test(r))return r;i=s&&(v.support.boxSizingReliable||r===e.style[t]),r=parseFloat(r)||0}return r+en(e,t,n||(s?"border":"content"),i)+"px"}function nn(e){if(Wt[e])return Wt[e];var t=v("<"+e+">").appendTo(i.body),n=t.css("display");t.remove();if(n==="none"||n===""){Pt=i.body.appendChild(Pt||v.extend(i.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!Ht||!Pt.createElement)Ht=(Pt.contentWindow||Pt.contentDocument).document,Ht.write("<!doctype html><html><body>"),Ht.close();t=Ht.body.appendChild(Ht.createElement(e)),n=Dt(t,"display"),i.body.removeChild(Pt)}return Wt[e]=n,n}function fn(e,t,n,r){var i;if(v.isArray(t))v.each(t,function(t,i){n||sn.test(e)?r(e,i):fn(e+"["+(typeof i=="object"?t:"")+"]",i,n,r)});else if(!n&&v.type(t)==="object")for(i in t)fn(e+"["+i+"]",t[i],n,r);else r(e,t)}function Cn(e){return function(t,n){typeof t!="string"&&(n=t,t="*");var r,i,s,o=t.toLowerCase().split(y),u=0,a=o.length;if(v.isFunction(n))for(;u<a;u++)r=o[u],s=/^\+/.test(r),s&&(r=r.substr(1)||"*"),i=e[r]=e[r]||[],i[s?"unshift":"push"](n)}}function kn(e,n,r,i,s,o){s=s||n.dataTypes[0],o=o||{},o[s]=!0;var u,a=e[s],f=0,l=a?a.length:0,c=e===Sn;for(;f<l&&(c||!u);f++)u=a[f](n,r,i),typeof u=="string"&&(!c||o[u]?u=t:(n.dataTypes.unshift(u),u=kn(e,n,r,i,u,o)));return(c||!u)&&!o["*"]&&(u=kn(e,n,r,i,"*",o)),u}function Ln(e,n){var r,i,s=v.ajaxSettings.flatOptions||{};for(r in n)n[r]!==t&&((s[r]?e:i||(i={}))[r]=n[r]);i&&v.extend(!0,e,i)}function An(e,n,r){var i,s,o,u,a=e.contents,f=e.dataTypes,l=e.responseFields;for(s in l)s in r&&(n[l[s]]=r[s]);while(f[0]==="*")f.shift(),i===t&&(i=e.mimeType||n.getResponseHeader("content-type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){f.unshift(s);break}if(f[0]in r)o=f[0];else{for(s in r){if(!f[0]||e.converters[s+" "+f[0]]){o=s;break}u||(u=s)}o=o||u}if(o)return o!==f[0]&&f.unshift(o),r[o]}function On(e,t){var n,r,i,s,o=e.dataTypes.slice(),u=o[0],a={},f=0;e.dataFilter&&(t=e.dataFilter(t,e.dataType));if(o[1])for(n in e.converters)a[n.toLowerCase()]=e.converters[n];for(;i=o[++f];)if(i!=="*"){if(u!=="*"&&u!==i){n=a[u+" "+i]||a["* "+i];if(!n)for(r in a){s=r.split(" ");if(s[1]===i){n=a[u+" "+s[0]]||a["* "+s[0]];if(n){n===!0?n=a[r]:a[r]!==!0&&(i=s[0],o.splice(f--,0,i));break}}}if(n!==!0)if(n&&e["throws"])t=n(t);else try{t=n(t)}catch(l){return{state:"parsererror",error:n?l:"No conversion from "+u+" to "+i}}}u=i}return{state:"success",data:t}}function Fn(){try{return new e.XMLHttpRequest}catch(t){}}function In(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function $n(){return setTimeout(function(){qn=t},0),qn=v.now()}function Jn(e,t){v.each(t,function(t,n){var r=(Vn[t]||[]).concat(Vn["*"]),i=0,s=r.length;for(;i<s;i++)if(r[i].call(e,t,n))return})}function Kn(e,t,n){var r,i=0,s=0,o=Xn.length,u=v.Deferred().always(function(){delete a.elem}),a=function(){var t=qn||$n(),n=Math.max(0,f.startTime+f.duration-t),r=n/f.duration||0,i=1-r,s=0,o=f.tweens.length;for(;s<o;s++)f.tweens[s].run(i);return u.notifyWith(e,[f,i,n]),i<1&&o?n:(u.resolveWith(e,[f]),!1)},f=u.promise({elem:e,props:v.extend({},t),opts:v.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:qn||$n(),duration:n.duration,tweens:[],createTween:function(t,n,r){var i=v.Tween(e,f.opts,t,n,f.opts.specialEasing[t]||f.opts.easing);return f.tweens.push(i),i},stop:function(t){var n=0,r=t?f.tweens.length:0;for(;n<r;n++)f.tweens[n].run(1);return t?u.resolveWith(e,[f,t]):u.rejectWith(e,[f,t]),this}}),l=f.props;Qn(l,f.opts.specialEasing);for(;i<o;i++){r=Xn[i].call(f,e,l,f.opts);if(r)return r}return Jn(f,l),v.isFunction(f.opts.start)&&f.opts.start.call(e,f),v.fx.timer(v.extend(a,{anim:f,queue:f.opts.queue,elem:e})),f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always)}function Qn(e,t){var n,r,i,s,o;for(n in e){r=v.camelCase(n),i=t[r],s=e[n],v.isArray(s)&&(i=s[1],s=e[n]=s[0]),n!==r&&(e[r]=s,delete e[n]),o=v.cssHooks[r];if(o&&"expand"in o){s=o.expand(s),delete e[r];for(n in s)n in e||(e[n]=s[n],t[n]=i)}else t[r]=i}}function Gn(e,t,n){var r,i,s,o,u,a,f,l,c,h=this,p=e.style,d={},m=[],g=e.nodeType&&Gt(e);n.queue||(l=v._queueHooks(e,"fx"),l.unqueued==null&&(l.unqueued=0,c=l.empty.fire,l.empty.fire=function(){l.unqueued||c()}),l.unqueued++,h.always(function(){h.always(function(){l.unqueued--,v.queue(e,"fx").length||l.empty.fire()})})),e.nodeType===1&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],v.css(e,"display")==="inline"&&v.css(e,"float")==="none"&&(!v.support.inlineBlockNeedsLayout||nn(e.nodeName)==="inline"?p.display="inline-block":p.zoom=1)),n.overflow&&(p.overflow="hidden",v.support.shrinkWrapBlocks||h.done(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t){s=t[r];if(Un.exec(s)){delete t[r],a=a||s==="toggle";if(s===(g?"hide":"show"))continue;m.push(r)}}o=m.length;if(o){u=v._data(e,"fxshow")||v._data(e,"fxshow",{}),"hidden"in u&&(g=u.hidden),a&&(u.hidden=!g),g?v(e).show():h.done(function(){v(e).hide()}),h.done(function(){var t;v.removeData(e,"fxshow",!0);for(t in d)v.style(e,t,d[t])});for(r=0;r<o;r++)i=m[r],f=h.createTween(i,g?u[i]:0),d[i]=u[i]||v.style(e,i),i in u||(u[i]=f.start,g&&(f.end=f.start,f.start=i==="width"||i==="height"?1:0))}}function Yn(e,t,n,r,i){return new Yn.prototype.init(e,t,n,r,i)}function Zn(e,t){var n,r={height:e},i=0;t=t?1:0;for(;i<4;i+=2-t)n=$t[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function tr(e){return v.isWindow(e)?e:e.nodeType===9?e.defaultView||e.parentWindow:!1}var n,r,i=e.document,s=e.location,o=e.navigator,u=e.jQuery,a=e.$,f=Array.prototype.push,l=Array.prototype.slice,c=Array.prototype.indexOf,h=Object.prototype.toString,p=Object.prototype.hasOwnProperty,d=String.prototype.trim,v=function(e,t){return new v.fn.init(e,t,n)},m=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,g=/\S/,y=/\s+/,b=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,w=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,E=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,S=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,T=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,N=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,C=/^-ms-/,k=/-([\da-z])/gi,L=function(e,t){return(t+"").toUpperCase()},A=function(){i.addEventListener?(i.removeEventListener("DOMContentLoaded",A,!1),v.ready()):i.readyState==="complete"&&(i.detachEvent("onreadystatechange",A),v.ready())},O={};v.fn=v.prototype={constructor:v,init:function(e,n,r){var s,o,u,a;if(!e)return this;if(e.nodeType)return this.context=this[0]=e,this.length=1,this;if(typeof e=="string"){e.charAt(0)==="<"&&e.charAt(e.length-1)===">"&&e.length>=3?s=[null,e,null]:s=w.exec(e);if(s&&(s[1]||!n)){if(s[1])return n=n instanceof v?n[0]:n,a=n&&n.nodeType?n.ownerDocument||n:i,e=v.parseHTML(s[1],a,!0),E.test(s[1])&&v.isPlainObject(n)&&this.attr.call(e,n,!0),v.merge(this,e);o=i.getElementById(s[2]);if(o&&o.parentNode){if(o.id!==s[2])return r.find(e);this.length=1,this[0]=o}return this.context=i,this.selector=e,this}return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e)}return v.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),v.makeArray(e,this))},selector:"",jquery:"1.8.3",length:0,size:function(){return this.length},toArray:function(){return l.call(this)},get:function(e){return e==null?this.toArray():e<0?this[this.length+e]:this[e]},pushStack:function(e,t,n){var r=v.merge(this.constructor(),e);return r.prevObject=this,r.context=this.context,t==="find"?r.selector=this.selector+(this.selector?" ":"")+n:t&&(r.selector=this.selector+"."+t+"("+n+")"),r},each:function(e,t){return v.each(this,e,t)},ready:function(e){return v.ready.promise().done(e),this},eq:function(e){return e=+e,e===-1?this.slice(e):this.slice(e,e+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(l.apply(this,arguments),"slice",l.call(arguments).join(","))},map:function(e){return this.pushStack(v.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:[].sort,splice:[].splice},v.fn.init.prototype=v.fn,v.extend=v.fn.extend=function(){var e,n,r,i,s,o,u=arguments[0]||{},a=1,f=arguments.length,l=!1;typeof u=="boolean"&&(l=u,u=arguments[1]||{},a=2),typeof u!="object"&&!v.isFunction(u)&&(u={}),f===a&&(u=this,--a);for(;a<f;a++)if((e=arguments[a])!=null)for(n in e){r=u[n],i=e[n];if(u===i)continue;l&&i&&(v.isPlainObject(i)||(s=v.isArray(i)))?(s?(s=!1,o=r&&v.isArray(r)?r:[]):o=r&&v.isPlainObject(r)?r:{},u[n]=v.extend(l,o,i)):i!==t&&(u[n]=i)}return u},v.extend({noConflict:function(t){return e.$===v&&(e.$=a),t&&e.jQuery===v&&(e.jQuery=u),v},isReady:!1,readyWait:1,holdReady:function(e){e?v.readyWait++:v.ready(!0)},ready:function(e){if(e===!0?--v.readyWait:v.isReady)return;if(!i.body)return setTimeout(v.ready,1);v.isReady=!0;if(e!==!0&&--v.readyWait>0)return;r.resolveWith(i,[v]),v.fn.trigger&&v(i).trigger("ready").off("ready")},isFunction:function(e){return v.type(e)==="function"},isArray:Array.isArray||function(e){return v.type(e)==="array"},isWindow:function(e){return e!=null&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return e==null?String(e):O[h.call(e)]||"object"},isPlainObject:function(e){if(!e||v.type(e)!=="object"||e.nodeType||v.isWindow(e))return!1;try{if(e.constructor&&!p.call(e,"constructor")&&!p.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}var r;for(r in e);return r===t||p.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw new Error(e)},parseHTML:function(e,t,n){var r;return!e||typeof e!="string"?null:(typeof t=="boolean"&&(n=t,t=0),t=t||i,(r=E.exec(e))?[t.createElement(r[1])]:(r=v.buildFragment([e],t,n?null:[]),v.merge([],(r.cacheable?v.clone(r.fragment):r.fragment).childNodes)))},parseJSON:function(t){if(!t||typeof t!="string")return null;t=v.trim(t);if(e.JSON&&e.JSON.parse)return e.JSON.parse(t);if(S.test(t.replace(T,"@").replace(N,"]").replace(x,"")))return(new Function("return "+t))();v.error("Invalid JSON: "+t)},parseXML:function(n){var r,i;if(!n||typeof n!="string")return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(s){r=t}return(!r||!r.documentElement||r.getElementsByTagName("parsererror").length)&&v.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&g.test(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(C,"ms-").replace(k,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,n,r){var i,s=0,o=e.length,u=o===t||v.isFunction(e);if(r){if(u){for(i in e)if(n.apply(e[i],r)===!1)break}else for(;s<o;)if(n.apply(e[s++],r)===!1)break}else if(u){for(i in e)if(n.call(e[i],i,e[i])===!1)break}else for(;s<o;)if(n.call(e[s],s,e[s++])===!1)break;return e},trim:d&&!d.call("\ufeff\u00a0")?function(e){return e==null?"":d.call(e)}:function(e){return e==null?"":(e+"").replace(b,"")},makeArray:function(e,t){var n,r=t||[];return e!=null&&(n=v.type(e),e.length==null||n==="string"||n==="function"||n==="regexp"||v.isWindow(e)?f.call(r,e):v.merge(r,e)),r},inArray:function(e,t,n){var r;if(t){if(c)return c.call(t,e,n);r=t.length,n=n?n<0?Math.max(0,r+n):n:0;for(;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,s=0;if(typeof r=="number")for(;s<r;s++)e[i++]=n[s];else while(n[s]!==t)e[i++]=n[s++];return e.length=i,e},grep:function(e,t,n){var r,i=[],s=0,o=e.length;n=!!n;for(;s<o;s++)r=!!t(e[s],s),n!==r&&i.push(e[s]);return i},map:function(e,n,r){var i,s,o=[],u=0,a=e.length,f=e instanceof v||a!==t&&typeof a=="number"&&(a>0&&e[0]&&e[a-1]||a===0||v.isArray(e));if(f)for(;u<a;u++)i=n(e[u],u,r),i!=null&&(o[o.length]=i);else for(s in e)i=n(e[s],s,r),i!=null&&(o[o.length]=i);return o.concat.apply([],o)},guid:1,proxy:function(e,n){var r,i,s;return typeof n=="string"&&(r=e[n],n=e,e=r),v.isFunction(e)?(i=l.call(arguments,2),s=function(){return e.apply(n,i.concat(l.call(arguments)))},s.guid=e.guid=e.guid||v.guid++,s):t},access:function(e,n,r,i,s,o,u){var a,f=r==null,l=0,c=e.length;if(r&&typeof r=="object"){for(l in r)v.access(e,n,l,r[l],1,o,i);s=1}else if(i!==t){a=u===t&&v.isFunction(i),f&&(a?(a=n,n=function(e,t,n){return a.call(v(e),n)}):(n.call(e,i),n=null));if(n)for(;l<c;l++)n(e[l],r,a?i.call(e[l],l,n(e[l],r)):i,u);s=1}return s?e:f?n.call(e):c?n(e[0],r):o},now:function(){return(new Date).getTime()}}),v.ready.promise=function(t){if(!r){r=v.Deferred();if(i.readyState==="complete")setTimeout(v.ready,1);else if(i.addEventListener)i.addEventListener("DOMContentLoaded",A,!1),e.addEventListener("load",v.ready,!1);else{i.attachEvent("onreadystatechange",A),e.attachEvent("onload",v.ready);var n=!1;try{n=e.frameElement==null&&i.documentElement}catch(s){}n&&n.doScroll&&function o(){if(!v.isReady){try{n.doScroll("left")}catch(e){return setTimeout(o,50)}v.ready()}}()}}return r.promise(t)},v.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(e,t){O["[object "+t+"]"]=t.toLowerCase()}),n=v(i);var M={};v.Callbacks=function(e){e=typeof e=="string"?M[e]||_(e):v.extend({},e);var n,r,i,s,o,u,a=[],f=!e.once&&[],l=function(t){n=e.memory&&t,r=!0,u=s||0,s=0,o=a.length,i=!0;for(;a&&u<o;u++)if(a[u].apply(t[0],t[1])===!1&&e.stopOnFalse){n=!1;break}i=!1,a&&(f?f.length&&l(f.shift()):n?a=[]:c.disable())},c={add:function(){if(a){var t=a.length;(function r(t){v.each(t,function(t,n){var i=v.type(n);i==="function"?(!e.unique||!c.has(n))&&a.push(n):n&&n.length&&i!=="string"&&r(n)})})(arguments),i?o=a.length:n&&(s=t,l(n))}return this},remove:function(){return a&&v.each(arguments,function(e,t){var n;while((n=v.inArray(t,a,n))>-1)a.splice(n,1),i&&(n<=o&&o--,n<=u&&u--)}),this},has:function(e){return v.inArray(e,a)>-1},empty:function(){return a=[],this},disable:function(){return a=f=n=t,this},disabled:function(){return!a},lock:function(){return f=t,n||c.disable(),this},locked:function(){return!f},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],a&&(!r||f)&&(i?f.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},v.extend({Deferred:function(e){var t=[["resolve","done",v.Callbacks("once memory"),"resolved"],["reject","fail",v.Callbacks("once memory"),"rejected"],["notify","progress",v.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return v.Deferred(function(n){v.each(t,function(t,r){var s=r[0],o=e[t];i[r[1]](v.isFunction(o)?function(){var e=o.apply(this,arguments);e&&v.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+"With"](this===i?n:this,[e])}:n[s])}),e=null}).promise()},promise:function(e){return e!=null?v.extend(e,r):r}},i={};return r.pipe=r.then,v.each(t,function(e,s){var o=s[2],u=s[3];r[s[1]]=o.add,u&&o.add(function(){n=u},t[e^1][2].disable,t[2][2].lock),i[s[0]]=o.fire,i[s[0]+"With"]=o.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=l.call(arguments),r=n.length,i=r!==1||e&&v.isFunction(e.promise)?r:0,s=i===1?e:v.Deferred(),o=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?l.call(arguments):r,n===u?s.notifyWith(t,n):--i||s.resolveWith(t,n)}},u,a,f;if(r>1){u=new Array(r),a=new Array(r),f=new Array(r);for(;t<r;t++)n[t]&&v.isFunction(n[t].promise)?n[t].promise().done(o(t,f,n)).fail(s.reject).progress(o(t,a,u)):--i}return i||s.resolveWith(f,n),s.promise()}}),v.support=function(){var t,n,r,s,o,u,a,f,l,c,h,p=i.createElement("div");p.setAttribute("className","t"),p.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=p.getElementsByTagName("*"),r=p.getElementsByTagName("a")[0];if(!n||!r||!n.length)return{};s=i.createElement("select"),o=s.appendChild(i.createElement("option")),u=p.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t={leadingWhitespace:p.firstChild.nodeType===3,tbody:!p.getElementsByTagName("tbody").length,htmlSerialize:!!p.getElementsByTagName("link").length,style:/top/.test(r.getAttribute("style")),hrefNormalized:r.getAttribute("href")==="/a",opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:u.value==="on",optSelected:o.selected,getSetAttribute:p.className!=="t",enctype:!!i.createElement("form").enctype,html5Clone:i.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:i.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},u.checked=!0,t.noCloneChecked=u.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!o.disabled;try{delete p.test}catch(d){t.deleteExpando=!1}!p.addEventListener&&p.attachEvent&&p.fireEvent&&(p.attachEvent("onclick",h=function(){t.noCloneEvent=!1}),p.cloneNode(!0).fireEvent("onclick"),p.detachEvent("onclick",h)),u=i.createElement("input"),u.value="t",u.setAttribute("type","radio"),t.radioValue=u.value==="t",u.setAttribute("checked","checked"),u.setAttribute("name","t"),p.appendChild(u),a=i.createDocumentFragment(),a.appendChild(p.lastChild),t.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,t.appendChecked=u.checked,a.removeChild(u),a.appendChild(p);if(p.attachEvent)for(l in{submit:!0,change:!0,focusin:!0})f="on"+l,c=f in p,c||(p.setAttribute(f,"return;"),c=typeof p[f]=="function"),t[l+"Bubbles"]=c;return v(function(){var n,r,s,o,u="padding:0;margin:0;border:0;display:block;overflow:hidden;",a=i.getElementsByTagName("body")[0];if(!a)return;n=i.createElement("div"),n.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",a.insertBefore(n,a.firstChild),r=i.createElement("div"),n.appendChild(r),r.innerHTML="<table><tr><td></td><td>t</td></tr></table>",s=r.getElementsByTagName("td"),s[0].style.cssText="padding:0;margin:0;border:0;display:none",c=s[0].offsetHeight===0,s[0].style.display="",s[1].style.display="none",t.reliableHiddenOffsets=c&&s[0].offsetHeight===0,r.innerHTML="",r.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",t.boxSizing=r.offsetWidth===4,t.doesNotIncludeMarginInBodyOffset=a.offsetTop!==1,e.getComputedStyle&&(t.pixelPosition=(e.getComputedStyle(r,null)||{}).top!=="1%",t.boxSizingReliable=(e.getComputedStyle(r,null)||{width:"4px"}).width==="4px",o=i.createElement("div"),o.style.cssText=r.style.cssText=u,o.style.marginRight=o.style.width="0",r.style.width="1px",r.appendChild(o),t.reliableMarginRight=!parseFloat((e.getComputedStyle(o,null)||{}).marginRight)),typeof r.style.zoom!="undefined"&&(r.innerHTML="",r.style.cssText=u+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=r.offsetWidth===3,r.style.display="block",r.style.overflow="visible",r.innerHTML="<div></div>",r.firstChild.style.width="5px",t.shrinkWrapBlocks=r.offsetWidth!==3,n.style.zoom=1),a.removeChild(n),n=r=s=o=null}),a.removeChild(p),n=r=s=o=u=a=p=null,t}();var D=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,P=/([A-Z])/g;v.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(v.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(e){return e=e.nodeType?v.cache[e[v.expando]]:e[v.expando],!!e&&!B(e)},data:function(e,n,r,i){if(!v.acceptData(e))return;var s,o,u=v.expando,a=typeof n=="string",f=e.nodeType,l=f?v.cache:e,c=f?e[u]:e[u]&&u;if((!c||!l[c]||!i&&!l[c].data)&&a&&r===t)return;c||(f?e[u]=c=v.deletedIds.pop()||v.guid++:c=u),l[c]||(l[c]={},f||(l[c].toJSON=v.noop));if(typeof n=="object"||typeof n=="function")i?l[c]=v.extend(l[c],n):l[c].data=v.extend(l[c].data,n);return s=l[c],i||(s.data||(s.data={}),s=s.data),r!==t&&(s[v.camelCase(n)]=r),a?(o=s[n],o==null&&(o=s[v.camelCase(n)])):o=s,o},removeData:function(e,t,n){if(!v.acceptData(e))return;var r,i,s,o=e.nodeType,u=o?v.cache:e,a=o?e[v.expando]:v.expando;if(!u[a])return;if(t){r=n?u[a]:u[a].data;if(r){v.isArray(t)||(t in r?t=[t]:(t=v.camelCase(t),t in r?t=[t]:t=t.split(" ")));for(i=0,s=t.length;i<s;i++)delete r[t[i]];if(!(n?B:v.isEmptyObject)(r))return}}if(!n){delete u[a].data;if(!B(u[a]))return}o?v.cleanData([e],!0):v.support.deleteExpando||u!=u.window?delete u[a]:u[a]=null},_data:function(e,t,n){return v.data(e,t,n,!0)},acceptData:function(e){var t=e.nodeName&&v.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),v.fn.extend({data:function(e,n){var r,i,s,o,u,a=this[0],f=0,l=null;if(e===t){if(this.length){l=v.data(a);if(a.nodeType===1&&!v._data(a,"parsedAttrs")){s=a.attributes;for(u=s.length;f<u;f++)o=s[f].name,o.indexOf("data-")||(o=v.camelCase(o.substring(5)),H(a,o,l[o]));v._data(a,"parsedAttrs",!0)}}return l}return typeof e=="object"?this.each(function(){v.data(this,e)}):(r=e.split(".",2),r[1]=r[1]?"."+r[1]:"",i=r[1]+"!",v.access(this,function(n){if(n===t)return l=this.triggerHandler("getData"+i,[r[0]]),l===t&&a&&(l=v.data(a,e),l=H(a,e,l)),l===t&&r[1]?this.data(r[0]):l;r[1]=n,this.each(function(){var t=v(this);t.triggerHandler("setData"+i,r),v.data(this,e,n),t.triggerHandler("changeData"+i,r)})},null,n,arguments.length>1,null,!1))},removeData:function(e){return this.each(function(){v.removeData(this,e)})}}),v.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=v._data(e,t),n&&(!r||v.isArray(n)?r=v._data(e,t,v.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=v.queue(e,t),r=n.length,i=n.shift(),s=v._queueHooks(e,t),o=function(){v.dequeue(e,t)};i==="inprogress"&&(i=n.shift(),r--),i&&(t==="fx"&&n.unshift("inprogress"),delete s.stop,i.call(e,o,s)),!r&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return v._data(e,n)||v._data(e,n,{empty:v.Callbacks("once memory").add(function(){v.removeData(e,t+"queue",!0),v.removeData(e,n,!0)})})}}),v.fn.extend({queue:function(e,n){var r=2;return typeof e!="string"&&(n=e,e="fx",r--),arguments.length<r?v.queue(this[0],e):n===t?this:this.each(function(){var t=v.queue(this,e,n);v._queueHooks(this,e),e==="fx"&&t[0]!=="inprogress"&&v.dequeue(this,e)})},dequeue:function(e){return this.each(function(){v.dequeue(this,e)})},delay:function(e,t){return e=v.fx?v.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,s=v.Deferred(),o=this,u=this.length,a=function(){--i||s.resolveWith(o,[o])};typeof e!="string"&&(n=e,e=t),e=e||"fx";while(u--)r=v._data(o[u],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(a));return a(),s.promise(n)}});var j,F,I,q=/[\t\r\n]/g,R=/\r/g,U=/^(?:button|input)$/i,z=/^(?:button|input|object|select|textarea)$/i,W=/^a(?:rea|)$/i,X=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,V=v.support.getSetAttribute;v.fn.extend({attr:function(e,t){return v.access(this,v.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){v.removeAttr(this,e)})},prop:function(e,t){return v.access(this,v.prop,e,t,arguments.length>1)},removeProp:function(e){return e=v.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,s,o,u;if(v.isFunction(e))return this.each(function(t){v(this).addClass(e.call(this,t,this.className))});if(e&&typeof e=="string"){t=e.split(y);for(n=0,r=this.length;n<r;n++){i=this[n];if(i.nodeType===1)if(!i.className&&t.length===1)i.className=e;else{s=" "+i.className+" ";for(o=0,u=t.length;o<u;o++)s.indexOf(" "+t[o]+" ")<0&&(s+=t[o]+" ");i.className=v.trim(s)}}}return this},removeClass:function(e){var n,r,i,s,o,u,a;if(v.isFunction(e))return this.each(function(t){v(this).removeClass(e.call(this,t,this.className))});if(e&&typeof e=="string"||e===t){n=(e||"").split(y);for(u=0,a=this.length;u<a;u++){i=this[u];if(i.nodeType===1&&i.className){r=(" "+i.className+" ").replace(q," ");for(s=0,o=n.length;s<o;s++)while(r.indexOf(" "+n[s]+" ")>=0)r=r.replace(" "+n[s]+" "," ");i.className=e?v.trim(r):""}}}return this},toggleClass:function(e,t){var n=typeof e,r=typeof t=="boolean";return v.isFunction(e)?this.each(function(n){v(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(n==="string"){var i,s=0,o=v(this),u=t,a=e.split(y);while(i=a[s++])u=r?u:!o.hasClass(i),o[u?"addClass":"removeClass"](i)}else if(n==="undefined"||n==="boolean")this.className&&v._data(this,"__className__",this.className),this.className=this.className||e===!1?"":v._data(this,"__className__")||""})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;n<r;n++)if(this[n].nodeType===1&&(" "+this[n].className+" ").replace(q," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,s=this[0];if(!arguments.length){if(s)return n=v.valHooks[s.type]||v.valHooks[s.nodeName.toLowerCase()],n&&"get"in n&&(r=n.get(s,"value"))!==t?r:(r=s.value,typeof r=="string"?r.replace(R,""):r==null?"":r);return}return i=v.isFunction(e),this.each(function(r){var s,o=v(this);if(this.nodeType!==1)return;i?s=e.call(this,r,o.val()):s=e,s==null?s="":typeof s=="number"?s+="":v.isArray(s)&&(s=v.map(s,function(e){return e==null?"":e+""})),n=v.valHooks[this.type]||v.valHooks[this.nodeName.toLowerCase()];if(!n||!("set"in n)||n.set(this,s,"value")===t)this.value=s})}}),v.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,s=e.type==="select-one"||i<0,o=s?null:[],u=s?i+1:r.length,a=i<0?u:s?i:0;for(;a<u;a++){n=r[a];if((n.selected||a===i)&&(v.support.optDisabled?!n.disabled:n.getAttribute("disabled")===null)&&(!n.parentNode.disabled||!v.nodeName(n.parentNode,"optgroup"))){t=v(n).val();if(s)return t;o.push(t)}}return o},set:function(e,t){var n=v.makeArray(t);return v(e).find("option").each(function(){this.selected=v.inArray(v(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attrFn:{},attr:function(e,n,r,i){var s,o,u,a=e.nodeType;if(!e||a===3||a===8||a===2)return;if(i&&v.isFunction(v.fn[n]))return v(e)[n](r);if(typeof e.getAttribute=="undefined")return v.prop(e,n,r);u=a!==1||!v.isXMLDoc(e),u&&(n=n.toLowerCase(),o=v.attrHooks[n]||(X.test(n)?F:j));if(r!==t){if(r===null){v.removeAttr(e,n);return}return o&&"set"in o&&u&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+""),r)}return o&&"get"in o&&u&&(s=o.get(e,n))!==null?s:(s=e.getAttribute(n),s===null?t:s)},removeAttr:function(e,t){var n,r,i,s,o=0;if(t&&e.nodeType===1){r=t.split(y);for(;o<r.length;o++)i=r[o],i&&(n=v.propFix[i]||i,s=X.test(i),s||v.attr(e,i,""),e.removeAttribute(V?i:n),s&&n in e&&(e[n]=!1))}},attrHooks:{type:{set:function(e,t){if(U.test(e.nodeName)&&e.parentNode)v.error("type property can't be changed");else if(!v.support.radioValue&&t==="radio"&&v.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}},value:{get:function(e,t){return j&&v.nodeName(e,"button")?j.get(e,t):t in e?e.value:null},set:function(e,t,n){if(j&&v.nodeName(e,"button"))return j.set(e,t,n);e.value=t}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(e,n,r){var i,s,o,u=e.nodeType;if(!e||u===3||u===8||u===2)return;return o=u!==1||!v.isXMLDoc(e),o&&(n=v.propFix[n]||n,s=v.propHooks[n]),r!==t?s&&"set"in s&&(i=s.set(e,r,n))!==t?i:e[n]=r:s&&"get"in s&&(i=s.get(e,n))!==null?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode("tabindex");return n&&n.specified?parseInt(n.value,10):z.test(e.nodeName)||W.test(e.nodeName)&&e.href?0:t}}}}),F={get:function(e,n){var r,i=v.prop(e,n);return i===!0||typeof i!="boolean"&&(r=e.getAttributeNode(n))&&r.nodeValue!==!1?n.toLowerCase():t},set:function(e,t,n){var r;return t===!1?v.removeAttr(e,n):(r=v.propFix[n]||n,r in e&&(e[r]=!0),e.setAttribute(n,n.toLowerCase())),n}},V||(I={name:!0,id:!0,coords:!0},j=v.valHooks.button={get:function(e,n){var r;return r=e.getAttributeNode(n),r&&(I[n]?r.value!=="":r.specified)?r.value:t},set:function(e,t,n){var r=e.getAttributeNode(n);return r||(r=i.createAttribute(n),e.setAttributeNode(r)),r.value=t+""}},v.each(["width","height"],function(e,t){v.attrHooks[t]=v.extend(v.attrHooks[t],{set:function(e,n){if(n==="")return e.setAttribute(t,"auto"),n}})}),v.attrHooks.contenteditable={get:j.get,set:function(e,t,n){t===""&&(t="false"),j.set(e,t,n)}}),v.support.hrefNormalized||v.each(["href","src","width","height"],function(e,n){v.attrHooks[n]=v.extend(v.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return r===null?t:r}})}),v.support.style||(v.attrHooks.style={get:function(e){return e.style.cssText.toLowerCase()||t},set:function(e,t){return e.style.cssText=t+""}}),v.support.optSelected||(v.propHooks.selected=v.extend(v.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),v.support.enctype||(v.propFix.enctype="encoding"),v.support.checkOn||v.each(["radio","checkbox"],function(){v.valHooks[this]={get:function(e){return e.getAttribute("value")===null?"on":e.value}}}),v.each(["radio","checkbox"],function(){v.valHooks[this]=v.extend(v.valHooks[this],{set:function(e,t){if(v.isArray(t))return e.checked=v.inArray(v(e).val(),t)>=0}})});var $=/^(?:textarea|input|select)$/i,J=/^([^\.]*|)(?:\.(.+)|)$/,K=/(?:^|\s)hover(\.\S+|)\b/,Q=/^key/,G=/^(?:mouse|contextmenu)|click/,Y=/^(?:focusinfocus|focusoutblur)$/,Z=function(e){return v.event.special.hover?e:e.replace(K,"mouseenter$1 mouseleave$1")};v.event={add:function(e,n,r,i,s){var o,u,a,f,l,c,h,p,d,m,g;if(e.nodeType===3||e.nodeType===8||!n||!r||!(o=v._data(e)))return;r.handler&&(d=r,r=d.handler,s=d.selector),r.guid||(r.guid=v.guid++),a=o.events,a||(o.events=a={}),u=o.handle,u||(o.handle=u=function(e){return typeof v=="undefined"||!!e&&v.event.triggered===e.type?t:v.event.dispatch.apply(u.elem,arguments)},u.elem=e),n=v.trim(Z(n)).split(" ");for(f=0;f<n.length;f++){l=J.exec(n[f])||[],c=l[1],h=(l[2]||"").split(".").sort(),g=v.event.special[c]||{},c=(s?g.delegateType:g.bindType)||c,g=v.event.special[c]||{},p=v.extend({type:c,origType:l[1],data:i,handler:r,guid:r.guid,selector:s,needsContext:s&&v.expr.match.needsContext.test(s),namespace:h.join(".")},d),m=a[c];if(!m){m=a[c]=[],m.delegateCount=0;if(!g.setup||g.setup.call(e,i,h,u)===!1)e.addEventListener?e.addEventListener(c,u,!1):e.attachEvent&&e.attachEvent("on"+c,u)}g.add&&(g.add.call(e,p),p.handler.guid||(p.handler.guid=r.guid)),s?m.splice(m.delegateCount++,0,p):m.push(p),v.event.global[c]=!0}e=null},global:{},remove:function(e,t,n,r,i){var s,o,u,a,f,l,c,h,p,d,m,g=v.hasData(e)&&v._data(e);if(!g||!(h=g.events))return;t=v.trim(Z(t||"")).split(" ");for(s=0;s<t.length;s++){o=J.exec(t[s])||[],u=a=o[1],f=o[2];if(!u){for(u in h)v.event.remove(e,u+t[s],n,r,!0);continue}p=v.event.special[u]||{},u=(r?p.delegateType:p.bindType)||u,d=h[u]||[],l=d.length,f=f?new RegExp("(^|\\.)"+f.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(c=0;c<d.length;c++)m=d[c],(i||a===m.origType)&&(!n||n.guid===m.guid)&&(!f||f.test(m.namespace))&&(!r||r===m.selector||r==="**"&&m.selector)&&(d.splice(c--,1),m.selector&&d.delegateCount--,p.remove&&p.remove.call(e,m));d.length===0&&l!==d.length&&((!p.teardown||p.teardown.call(e,f,g.handle)===!1)&&v.removeEvent(e,u,g.handle),delete h[u])}v.isEmptyObject(h)&&(delete g.handle,v.removeData(e,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(n,r,s,o){if(!s||s.nodeType!==3&&s.nodeType!==8){var u,a,f,l,c,h,p,d,m,g,y=n.type||n,b=[];if(Y.test(y+v.event.triggered))return;y.indexOf("!")>=0&&(y=y.slice(0,-1),a=!0),y.indexOf(".")>=0&&(b=y.split("."),y=b.shift(),b.sort());if((!s||v.event.customEvent[y])&&!v.event.global[y])return;n=typeof n=="object"?n[v.expando]?n:new v.Event(y,n):new v.Event(y),n.type=y,n.isTrigger=!0,n.exclusive=a,n.namespace=b.join("."),n.namespace_re=n.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,h=y.indexOf(":")<0?"on"+y:"";if(!s){u=v.cache;for(f in u)u[f].events&&u[f].events[y]&&v.event.trigger(n,r,u[f].handle.elem,!0);return}n.result=t,n.target||(n.target=s),r=r!=null?v.makeArray(r):[],r.unshift(n),p=v.event.special[y]||{};if(p.trigger&&p.trigger.apply(s,r)===!1)return;m=[[s,p.bindType||y]];if(!o&&!p.noBubble&&!v.isWindow(s)){g=p.delegateType||y,l=Y.test(g+y)?s:s.parentNode;for(c=s;l;l=l.parentNode)m.push([l,g]),c=l;c===(s.ownerDocument||i)&&m.push([c.defaultView||c.parentWindow||e,g])}for(f=0;f<m.length&&!n.isPropagationStopped();f++)l=m[f][0],n.type=m[f][1],d=(v._data(l,"events")||{})[n.type]&&v._data(l,"handle"),d&&d.apply(l,r),d=h&&l[h],d&&v.acceptData(l)&&d.apply&&d.apply(l,r)===!1&&n.preventDefault();return n.type=y,!o&&!n.isDefaultPrevented()&&(!p._default||p._default.apply(s.ownerDocument,r)===!1)&&(y!=="click"||!v.nodeName(s,"a"))&&v.acceptData(s)&&h&&s[y]&&(y!=="focus"&&y!=="blur"||n.target.offsetWidth!==0)&&!v.isWindow(s)&&(c=s[h],c&&(s[h]=null),v.event.triggered=y,s[y](),v.event.triggered=t,c&&(s[h]=c)),n.result}return},dispatch:function(n){n=v.event.fix(n||e.event);var r,i,s,o,u,a,f,c,h,p,d=(v._data(this,"events")||{})[n.type]||[],m=d.delegateCount,g=l.call(arguments),y=!n.exclusive&&!n.namespace,b=v.event.special[n.type]||{},w=[];g[0]=n,n.delegateTarget=this;if(b.preDispatch&&b.preDispatch.call(this,n)===!1)return;if(m&&(!n.button||n.type!=="click"))for(s=n.target;s!=this;s=s.parentNode||this)if(s.disabled!==!0||n.type!=="click"){u={},f=[];for(r=0;r<m;r++)c=d[r],h=c.selector,u[h]===t&&(u[h]=c.needsContext?v(h,this).index(s)>=0:v.find(h,this,null,[s]).length),u[h]&&f.push(c);f.length&&w.push({elem:s,matches:f})}d.length>m&&w.push({elem:this,matches:d.slice(m)});for(r=0;r<w.length&&!n.isPropagationStopped();r++){a=w[r],n.currentTarget=a.elem;for(i=0;i<a.matches.length&&!n.isImmediatePropagationStopped();i++){c=a.matches[i];if(y||!n.namespace&&!c.namespace||n.namespace_re&&n.namespace_re.test(c.namespace))n.data=c.data,n.handleObj=c,o=((v.event.special[c.origType]||{}).handle||c.handler).apply(a.elem,g),o!==t&&(n.result=o,o===!1&&(n.preventDefault(),n.stopPropagation()))}}return b.postDispatch&&b.postDispatch.call(this,n),n.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return e.which==null&&(e.which=t.charCode!=null?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,s,o,u=n.button,a=n.fromElement;return e.pageX==null&&n.clientX!=null&&(r=e.target.ownerDocument||i,s=r.documentElement,o=r.body,e.pageX=n.clientX+(s&&s.scrollLeft||o&&o.scrollLeft||0)-(s&&s.clientLeft||o&&o.clientLeft||0),e.pageY=n.clientY+(s&&s.scrollTop||o&&o.scrollTop||0)-(s&&s.clientTop||o&&o.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?n.toElement:a),!e.which&&u!==t&&(e.which=u&1?1:u&2?3:u&4?2:0),e}},fix:function(e){if(e[v.expando])return e;var t,n,r=e,s=v.event.fixHooks[e.type]||{},o=s.props?this.props.concat(s.props):this.props;e=v.Event(r);for(t=o.length;t;)n=o[--t],e[n]=r[n];return e.target||(e.target=r.srcElement||i),e.target.nodeType===3&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(e,t,n){v.isWindow(this)&&(this.onbeforeunload=n)},teardown:function(e,t){this.onbeforeunload===t&&(this.onbeforeunload=null)}}},simulate:function(e,t,n,r){var i=v.extend(new v.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?v.event.trigger(i,null,t):v.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},v.event.handle=v.event.dispatch,v.removeEvent=i.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]=="undefined"&&(e[r]=null),e.detachEvent(r,n))},v.Event=function(e,t){if(!(this instanceof v.Event))return new v.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?tt:et):this.type=e,t&&v.extend(this,t),this.timeStamp=e&&e.timeStamp||v.now(),this[v.expando]=!0},v.Event.prototype={preventDefault:function(){this.isDefaultPrevented=tt;var e=this.originalEvent;if(!e)return;e.preventDefault?e.preventDefault():e.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=tt;var e=this.originalEvent;if(!e)return;e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=tt,this.stopPropagation()},isDefaultPrevented:et,isPropagationStopped:et,isImmediatePropagationStopped:et},v.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){v.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,s=e.handleObj,o=s.selector;if(!i||i!==r&&!v.contains(r,i))e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t;return n}}}),v.support.submitBubbles||(v.event.special.submit={setup:function(){if(v.nodeName(this,"form"))return!1;v.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=v.nodeName(n,"input")||v.nodeName(n,"button")?n.form:t;r&&!v._data(r,"_submit_attached")&&(v.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),v._data(r,"_submit_attached",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&v.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){if(v.nodeName(this,"form"))return!1;v.event.remove(this,"._submit")}}),v.support.changeBubbles||(v.event.special.change={setup:function(){if($.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")v.event.add(this,"propertychange._change",function(e){e.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),v.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),v.event.simulate("change",this,e,!0)});return!1}v.event.add(this,"beforeactivate._change",function(e){var t=e.target;$.test(t.nodeName)&&!v._data(t,"_change_attached")&&(v.event.add(t,"change._change",function(e){this.parentNode&&!e.isSimulated&&!e.isTrigger&&v.event.simulate("change",this.parentNode,e,!0)}),v._data(t,"_change_attached",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||t.type!=="radio"&&t.type!=="checkbox")return e.handleObj.handler.apply(this,arguments)},teardown:function(){return v.event.remove(this,"._change"),!$.test(this.nodeName)}}),v.support.focusinBubbles||v.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){v.event.simulate(t,e.target,v.event.fix(e),!0)};v.event.special[t]={setup:function(){n++===0&&i.addEventListener(e,r,!0)},teardown:function(){--n===0&&i.removeEventListener(e,r,!0)}}}),v.fn.extend({on:function(e,n,r,i,s){var o,u;if(typeof e=="object"){typeof n!="string"&&(r=r||n,n=t);for(u in e)this.on(u,n,r,e[u],s);return this}r==null&&i==null?(i=n,r=n=t):i==null&&(typeof n=="string"?(i=r,r=t):(i=r,r=n,n=t));if(i===!1)i=et;else if(!i)return this;return s===1&&(o=i,i=function(e){return v().off(e),o.apply(this,arguments)},i.guid=o.guid||(o.guid=v.guid++)),this.each(function(){v.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,s;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,v(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if(typeof e=="object"){for(s in e)this.off(s,n,e[s]);return this}if(n===!1||typeof n=="function")r=n,n=t;return r===!1&&(r=et),this.each(function(){v.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},live:function(e,t,n){return v(this.context).on(e,this.selector,t,n),this},die:function(e,t){return v(this.context).off(e,this.selector||"**",t),this},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)},trigger:function(e,t){return this.each(function(){v.event.trigger(e,t,this)})},triggerHandler:function(e,t){if(this[0])return v.event.trigger(e,t,this[0],!0)},toggle:function(e){var t=arguments,n=e.guid||v.guid++,r=0,i=function(n){var i=(v._data(this,"lastToggle"+e.guid)||0)%r;return v._data(this,"lastToggle"+e.guid,i+1),n.preventDefault(),t[i].apply(this,arguments)||!1};i.guid=n;while(r<t.length)t[r++].guid=n;return this.click(i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){v.fn[t]=function(e,n){return n==null&&(n=e,e=null),arguments.length>0?this.on(t,null,e,n):this.trigger(t)},Q.test(t)&&(v.event.fixHooks[t]=v.event.keyHooks),G.test(t)&&(v.event.fixHooks[t]=v.event.mouseHooks)}),function(e,t){function nt(e,t,n,r){n=n||[],t=t||g;var i,s,a,f,l=t.nodeType;if(!e||typeof e!="string")return n;if(l!==1&&l!==9)return[];a=o(t);if(!a&&!r)if(i=R.exec(e))if(f=i[1]){if(l===9){s=t.getElementById(f);if(!s||!s.parentNode)return n;if(s.id===f)return n.push(s),n}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(f))&&u(t,s)&&s.id===f)return n.push(s),n}else{if(i[2])return S.apply(n,x.call(t.getElementsByTagName(e),0)),n;if((f=i[3])&&Z&&t.getElementsByClassName)return S.apply(n,x.call(t.getElementsByClassName(f),0)),n}return vt(e.replace(j,"$1"),t,n,r,a)}function rt(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function it(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function st(e){return N(function(t){return t=+t,N(function(n,r){var i,s=e([],n.length,t),o=s.length;while(o--)n[i=s[o]]&&(n[i]=!(r[i]=n[i]))})})}function ot(e,t,n){if(e===t)return n;var r=e.nextSibling;while(r){if(r===t)return-1;r=r.nextSibling}return 1}function ut(e,t){var n,r,s,o,u,a,f,l=L[d][e+" "];if(l)return t?0:l.slice(0);u=e,a=[],f=i.preFilter;while(u){if(!n||(r=F.exec(u)))r&&(u=u.slice(r[0].length)||u),a.push(s=[]);n=!1;if(r=I.exec(u))s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=r[0].replace(j," ");for(o in i.filter)(r=J[o].exec(u))&&(!f[o]||(r=f[o](r)))&&(s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=o,n.matches=r);if(!n)break}return t?u.length:u?nt.error(e):L(e,a).slice(0)}function at(e,t,r){var i=t.dir,s=r&&t.dir==="parentNode",o=w++;return t.first?function(t,n,r){while(t=t[i])if(s||t.nodeType===1)return e(t,n,r)}:function(t,r,u){if(!u){var a,f=b+" "+o+" ",l=f+n;while(t=t[i])if(s||t.nodeType===1){if((a=t[d])===l)return t.sizset;if(typeof a=="string"&&a.indexOf(f)===0){if(t.sizset)return t}else{t[d]=l;if(e(t,r,u))return t.sizset=!0,t;t.sizset=!1}}}else while(t=t[i])if(s||t.nodeType===1)if(e(t,r,u))return t}}function ft(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function lt(e,t,n,r,i){var s,o=[],u=0,a=e.length,f=t!=null;for(;u<a;u++)if(s=e[u])if(!n||n(s,r,i))o.push(s),f&&t.push(u);return o}function ct(e,t,n,r,i,s){return r&&!r[d]&&(r=ct(r)),i&&!i[d]&&(i=ct(i,s)),N(function(s,o,u,a){var f,l,c,h=[],p=[],d=o.length,v=s||dt(t||"*",u.nodeType?[u]:u,[]),m=e&&(s||!t)?lt(v,h,e,u,a):v,g=n?i||(s?e:d||r)?[]:o:m;n&&n(m,g,u,a);if(r){f=lt(g,p),r(f,[],u,a),l=f.length;while(l--)if(c=f[l])g[p[l]]=!(m[p[l]]=c)}if(s){if(i||e){if(i){f=[],l=g.length;while(l--)(c=g[l])&&f.push(m[l]=c);i(null,g=[],f,a)}l=g.length;while(l--)(c=g[l])&&(f=i?T.call(s,c):h[l])>-1&&(s[f]=!(o[f]=c))}}else g=lt(g===o?g.splice(d,g.length):g),i?i(null,o,g,a):S.apply(o,g)})}function ht(e){var t,n,r,s=e.length,o=i.relative[e[0].type],u=o||i.relative[" "],a=o?1:0,f=at(function(e){return e===t},u,!0),l=at(function(e){return T.call(t,e)>-1},u,!0),h=[function(e,n,r){return!o&&(r||n!==c)||((t=n).nodeType?f(e,n,r):l(e,n,r))}];for(;a<s;a++)if(n=i.relative[e[a].type])h=[at(ft(h),n)];else{n=i.filter[e[a].type].apply(null,e[a].matches);if(n[d]){r=++a;for(;r<s;r++)if(i.relative[e[r].type])break;return ct(a>1&&ft(h),a>1&&e.slice(0,a-1).join("").replace(j,"$1"),n,a<r&&ht(e.slice(a,r)),r<s&&ht(e=e.slice(r)),r<s&&e.join(""))}h.push(n)}return ft(h)}function pt(e,t){var r=t.length>0,s=e.length>0,o=function(u,a,f,l,h){var p,d,v,m=[],y=0,w="0",x=u&&[],T=h!=null,N=c,C=u||s&&i.find.TAG("*",h&&a.parentNode||a),k=b+=N==null?1:Math.E;T&&(c=a!==g&&a,n=o.el);for(;(p=C[w])!=null;w++){if(s&&p){for(d=0;v=e[d];d++)if(v(p,a,f)){l.push(p);break}T&&(b=k,n=++o.el)}r&&((p=!v&&p)&&y--,u&&x.push(p))}y+=w;if(r&&w!==y){for(d=0;v=t[d];d++)v(x,m,a,f);if(u){if(y>0)while(w--)!x[w]&&!m[w]&&(m[w]=E.call(l));m=lt(m)}S.apply(l,m),T&&!u&&m.length>0&&y+t.length>1&&nt.uniqueSort(l)}return T&&(b=k,c=N),x};return o.el=0,r?N(o):o}function dt(e,t,n){var r=0,i=t.length;for(;r<i;r++)nt(e,t[r],n);return n}function vt(e,t,n,r,s){var o,u,f,l,c,h=ut(e),p=h.length;if(!r&&h.length===1){u=h[0]=h[0].slice(0);if(u.length>2&&(f=u[0]).type==="ID"&&t.nodeType===9&&!s&&i.relative[u[1].type]){t=i.find.ID(f.matches[0].replace($,""),t,s)[0];if(!t)return n;e=e.slice(u.shift().length)}for(o=J.POS.test(e)?-1:u.length-1;o>=0;o--){f=u[o];if(i.relative[l=f.type])break;if(c=i.find[l])if(r=c(f.matches[0].replace($,""),z.test(u[0].type)&&t.parentNode||t,s)){u.splice(o,1),e=r.length&&u.join("");if(!e)return S.apply(n,x.call(r,0)),n;break}}}return a(e,h)(r,t,s,n,z.test(e)),n}function mt(){}var n,r,i,s,o,u,a,f,l,c,h=!0,p="undefined",d=("sizcache"+Math.random()).replace(".",""),m=String,g=e.document,y=g.documentElement,b=0,w=0,E=[].pop,S=[].push,x=[].slice,T=[].indexOf||function(e){var t=0,n=this.length;for(;t<n;t++)if(this[t]===e)return t;return-1},N=function(e,t){return e[d]=t==null||t,e},C=function(){var e={},t=[];return N(function(n,r){return t.push(n)>i.cacheLength&&delete e[t.shift()],e[n+" "]=r},e)},k=C(),L=C(),A=C(),O="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",_=M.replace("w","w#"),D="([*^$|!~]?=)",P="\\["+O+"*("+M+")"+O+"*(?:"+D+O+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+_+")|)|)"+O+"*\\]",H=":("+M+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+P+")|[^:]|\\\\.)*|.*))\\)|)",B=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)",j=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),F=new RegExp("^"+O+"*,"+O+"*"),I=new RegExp("^"+O+"*([\\x20\\t\\r\\n\\f>+~])"+O+"*"),q=new RegExp(H),R=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,U=/^:not/,z=/[\x20\t\r\n\f]*[+~]/,W=/:not\($/,X=/h\d/i,V=/input|select|textarea|button/i,$=/\\(?!\\)/g,J={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),NAME:new RegExp("^\\[name=['\"]?("+M+")['\"]?\\]"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+H),POS:new RegExp(B,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),needsContext:new RegExp("^"+O+"*[>+~]|"+B,"i")},K=function(e){var t=g.createElement("div");try{return e(t)}catch(n){return!1}finally{t=null}},Q=K(function(e){return e.appendChild(g.createComment("")),!e.getElementsByTagName("*").length}),G=K(function(e){return e.innerHTML="<a href='#'></a>",e.firstChild&&typeof e.firstChild.getAttribute!==p&&e.firstChild.getAttribute("href")==="#"}),Y=K(function(e){e.innerHTML="<select></select>";var t=typeof e.lastChild.getAttribute("multiple");return t!=="boolean"&&t!=="string"}),Z=K(function(e){return e.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!e.getElementsByClassName||!e.getElementsByClassName("e").length?!1:(e.lastChild.className="e",e.getElementsByClassName("e").length===2)}),et=K(function(e){e.id=d+0,e.innerHTML="<a name='"+d+"'></a><div name='"+d+"'></div>",y.insertBefore(e,y.firstChild);var t=g.getElementsByName&&g.getElementsByName(d).length===2+g.getElementsByName(d+0).length;return r=!g.getElementById(d),y.removeChild(e),t});try{x.call(y.childNodes,0)[0].nodeType}catch(tt){x=function(e){var t,n=[];for(;t=this[e];e++)n.push(t);return n}}nt.matches=function(e,t){return nt(e,null,null,t)},nt.matchesSelector=function(e,t){return nt(t,null,null,[e]).length>0},s=nt.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(i===1||i===9||i===11){if(typeof e.textContent=="string")return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=s(e)}else if(i===3||i===4)return e.nodeValue}else for(;t=e[r];r++)n+=s(t);return n},o=nt.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":!1},u=nt.contains=y.contains?function(e,t){var n=e.nodeType===9?e.documentElement:e,r=t&&t.parentNode;return e===r||!!(r&&r.nodeType===1&&n.contains&&n.contains(r))}:y.compareDocumentPosition?function(e,t){return t&&!!(e.compareDocumentPosition(t)&16)}:function(e,t){while(t=t.parentNode)if(t===e)return!0;return!1},nt.attr=function(e,t){var n,r=o(e);return r||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):r||Y?e.getAttribute(t):(n=e.getAttributeNode(t),n?typeof e[t]=="boolean"?e[t]?t:null:n.specified?n.value:null:null)},i=nt.selectors={cacheLength:50,createPseudo:N,match:J,attrHandle:G?{}:{href:function(e){return e.getAttribute("href",2)},type:function(e){return e.getAttribute("type")}},find:{ID:r?function(e,t,n){if(typeof t.getElementById!==p&&!n){var r=t.getElementById(e);return r&&r.parentNode?[r]:[]}}:function(e,n,r){if(typeof n.getElementById!==p&&!r){var i=n.getElementById(e);return i?i.id===e||typeof i.getAttributeNode!==p&&i.getAttributeNode("id").value===e?[i]:t:[]}},TAG:Q?function(e,t){if(typeof t.getElementsByTagName!==p)return t.getElementsByTagName(e)}:function(e,t){var n=t.getElementsByTagName(e);if(e==="*"){var r,i=[],s=0;for(;r=n[s];s++)r.nodeType===1&&i.push(r);return i}return n},NAME:et&&function(e,t){if(typeof t.getElementsByName!==p)return t.getElementsByName(name)},CLASS:Z&&function(e,t,n){if(typeof t.getElementsByClassName!==p&&!n)return t.getElementsByClassName(e)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace($,""),e[3]=(e[4]||e[5]||"").replace($,""),e[2]==="~="&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),e[1]==="nth"?(e[2]||nt.error(e[0]),e[3]=+(e[3]?e[4]+(e[5]||1):2*(e[2]==="even"||e[2]==="odd")),e[4]=+(e[6]+e[7]||e[2]==="odd")):e[2]&&nt.error(e[0]),e},PSEUDO:function(e){var t,n;if(J.CHILD.test(e[0]))return null;if(e[3])e[2]=e[3];else if(t=e[4])q.test(t)&&(n=ut(t,!0))&&(n=t.indexOf(")",t.length-n)-t.length)&&(t=t.slice(0,n),e[0]=e[0].slice(0,n)),e[2]=t;return e.slice(0,3)}},filter:{ID:r?function(e){return e=e.replace($,""),function(t){return t.getAttribute("id")===e}}:function(e){return e=e.replace($,""),function(t){var n=typeof t.getAttributeNode!==p&&t.getAttributeNode("id");return n&&n.value===e}},TAG:function(e){return e==="*"?function(){return!0}:(e=e.replace($,"").toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[d][e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==p&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r,i){var s=nt.attr(r,e);return s==null?t==="!=":t?(s+="",t==="="?s===n:t==="!="?s!==n:t==="^="?n&&s.indexOf(n)===0:t==="*="?n&&s.indexOf(n)>-1:t==="$="?n&&s.substr(s.length-n.length)===n:t==="~="?(" "+s+" ").indexOf(n)>-1:t==="|="?s===n||s.substr(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r){return e==="nth"?function(e){var t,i,s=e.parentNode;if(n===1&&r===0)return!0;if(s){i=0;for(t=s.firstChild;t;t=t.nextSibling)if(t.nodeType===1){i++;if(e===t)break}}return i-=r,i===n||i%n===0&&i/n>=0}:function(t){var n=t;switch(e){case"only":case"first":while(n=n.previousSibling)if(n.nodeType===1)return!1;if(e==="first")return!0;n=t;case"last":while(n=n.nextSibling)if(n.nodeType===1)return!1;return!0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||nt.error("unsupported pseudo: "+e);return r[d]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?N(function(e,n){var i,s=r(e,t),o=s.length;while(o--)i=T.call(e,s[o]),e[i]=!(n[i]=s[o])}):function(e){return r(e,0,n)}):r}},pseudos:{not:N(function(e){var t=[],n=[],r=a(e.replace(j,"$1"));return r[d]?N(function(e,t,n,i){var s,o=r(e,null,i,[]),u=e.length;while(u--)if(s=o[u])e[u]=!(t[u]=s)}):function(e,i,s){return t[0]=e,r(t,null,s,n),!n.pop()}}),has:N(function(e){return function(t){return nt(e,t).length>0}}),contains:N(function(e){return function(t){return(t.textContent||t.innerText||s(t)).indexOf(e)>-1}}),enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},parent:function(e){return!i.pseudos.empty(e)},empty:function(e){var t;e=e.firstChild;while(e){if(e.nodeName>"@"||(t=e.nodeType)===3||t===4)return!1;e=e.nextSibling}return!0},header:function(e){return X.test(e.nodeName)},text:function(e){var t,n;return e.nodeName.toLowerCase()==="input"&&(t=e.type)==="text"&&((n=e.getAttribute("type"))==null||n.toLowerCase()===t)},radio:rt("radio"),checkbox:rt("checkbox"),file:rt("file"),password:rt("password"),image:rt("image"),submit:it("submit"),reset:it("reset"),button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},input:function(e){return V.test(e.nodeName)},focus:function(e){var t=e.ownerDocument;return e===t.activeElement&&(!t.hasFocus||t.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},active:function(e){return e===e.ownerDocument.activeElement},first:st(function(){return[0]}),last:st(function(e,t){return[t-1]}),eq:st(function(e,t,n){return[n<0?n+t:n]}),even:st(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:st(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:st(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:st(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},f=y.compareDocumentPosition?function(e,t){return e===t?(l=!0,0):(!e.compareDocumentPosition||!t.compareDocumentPosition?e.compareDocumentPosition:e.compareDocumentPosition(t)&4)?-1:1}:function(e,t){if(e===t)return l=!0,0;if(e.sourceIndex&&t.sourceIndex)return e.sourceIndex-t.sourceIndex;var n,r,i=[],s=[],o=e.parentNode,u=t.parentNode,a=o;if(o===u)return ot(e,t);if(!o)return-1;if(!u)return 1;while(a)i.unshift(a),a=a.parentNode;a=u;while(a)s.unshift(a),a=a.parentNode;n=i.length,r=s.length;for(var f=0;f<n&&f<r;f++)if(i[f]!==s[f])return ot(i[f],s[f]);return f===n?ot(e,s[f],-1):ot(i[f],t,1)},[0,0].sort(f),h=!l,nt.uniqueSort=function(e){var t,n=[],r=1,i=0;l=h,e.sort(f);if(l){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e},nt.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},a=nt.compile=function(e,t){var n,r=[],i=[],s=A[d][e+" "];if(!s){t||(t=ut(e)),n=t.length;while(n--)s=ht(t[n]),s[d]?r.push(s):i.push(s);s=A(e,pt(i,r))}return s},g.querySelectorAll&&function(){var e,t=vt,n=/'|\\/g,r=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,i=[":focus"],s=[":active"],u=y.matchesSelector||y.mozMatchesSelector||y.webkitMatchesSelector||y.oMatchesSelector||y.msMatchesSelector;K(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||i.push("\\["+O+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),e.querySelectorAll(":checked").length||i.push(":checked")}),K(function(e){e.innerHTML="<p test=''></p>",e.querySelectorAll("[test^='']").length&&i.push("[*^$]="+O+"*(?:\"\"|'')"),e.innerHTML="<input type='hidden'/>",e.querySelectorAll(":enabled").length||i.push(":enabled",":disabled")}),i=new RegExp(i.join("|")),vt=function(e,r,s,o,u){if(!o&&!u&&!i.test(e)){var a,f,l=!0,c=d,h=r,p=r.nodeType===9&&e;if(r.nodeType===1&&r.nodeName.toLowerCase()!=="object"){a=ut(e),(l=r.getAttribute("id"))?c=l.replace(n,"\\$&"):r.setAttribute("id",c),c="[id='"+c+"'] ",f=a.length;while(f--)a[f]=c+a[f].join("");h=z.test(e)&&r.parentNode||r,p=a.join(",")}if(p)try{return S.apply(s,x.call(h.querySelectorAll(p),0)),s}catch(v){}finally{l||r.removeAttribute("id")}}return t(e,r,s,o,u)},u&&(K(function(t){e=u.call(t,"div");try{u.call(t,"[test!='']:sizzle"),s.push("!=",H)}catch(n){}}),s=new RegExp(s.join("|")),nt.matchesSelector=function(t,n){n=n.replace(r,"='$1']");if(!o(t)&&!s.test(n)&&!i.test(n))try{var a=u.call(t,n);if(a||e||t.document&&t.document.nodeType!==11)return a}catch(f){}return nt(n,null,null,[t]).length>0})}(),i.pseudos.nth=i.pseudos.eq,i.filters=mt.prototype=i.pseudos,i.setFilters=new mt,nt.attr=v.attr,v.find=nt,v.expr=nt.selectors,v.expr[":"]=v.expr.pseudos,v.unique=nt.uniqueSort,v.text=nt.getText,v.isXMLDoc=nt.isXML,v.contains=nt.contains}(e);var nt=/Until$/,rt=/^(?:parents|prev(?:Until|All))/,it=/^.[^:#\[\.,]*$/,st=v.expr.match.needsContext,ot={children:!0,contents:!0,next:!0,prev:!0};v.fn.extend({find:function(e){var t,n,r,i,s,o,u=this;if(typeof e!="string")return v(e).filter(function(){for(t=0,n=u.length;t<n;t++)if(v.contains(u[t],this))return!0});o=this.pushStack("","find",e);for(t=0,n=this.length;t<n;t++){r=o.length,v.find(e,this[t],o);if(t>0)for(i=r;i<o.length;i++)for(s=0;s<r;s++)if(o[s]===o[i]){o.splice(i--,1);break}}return o},has:function(e){var t,n=v(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(v.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1),"not",e)},filter:function(e){return this.pushStack(ft(this,e,!0),"filter",e)},is:function(e){return!!e&&(typeof e=="string"?st.test(e)?v(e,this.context).index(this[0])>=0:v.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,s=[],o=st.test(e)||typeof e!="string"?v(e,t||this.context):0;for(;r<i;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&n.nodeType!==11){if(o?o.index(n)>-1:v.find.matchesSelector(n,e)){s.push(n);break}n=n.parentNode}}return s=s.length>1?v.unique(s):s,this.pushStack(s,"closest",e)},index:function(e){return e?typeof e=="string"?v.inArray(this[0],v(e)):v.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(e,t){var n=typeof e=="string"?v(e,t):v.makeArray(e&&e.nodeType?[e]:e),r=v.merge(this.get(),n);return this.pushStack(ut(n[0])||ut(r[0])?r:v.unique(r))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}}),v.fn.andSelf=v.fn.addBack,v.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return v.dir(e,"parentNode")},parentsUntil:function(e,t,n){return v.dir(e,"parentNode",n)},next:function(e){return at(e,"nextSibling")},prev:function(e){return at(e,"previousSibling")},nextAll:function(e){return v.dir(e,"nextSibling")},prevAll:function(e){return v.dir(e,"previousSibling")},nextUntil:function(e,t,n){return v.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return v.dir(e,"previousSibling",n)},siblings:function(e){return v.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return v.sibling(e.firstChild)},contents:function(e){return v.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:v.merge([],e.childNodes)}},function(e,t){v.fn[e]=function(n,r){var i=v.map(this,t,n);return nt.test(e)||(r=n),r&&typeof r=="string"&&(i=v.filter(r,i)),i=this.length>1&&!ot[e]?v.unique(i):i,this.length>1&&rt.test(e)&&(i=i.reverse()),this.pushStack(i,e,l.call(arguments).join(","))}}),v.extend({filter:function(e,t,n){return n&&(e=":not("+e+")"),t.length===1?v.find.matchesSelector(t[0],e)?[t[0]]:[]:v.find.matches(e,t)},dir:function(e,n,r){var i=[],s=e[n];while(s&&s.nodeType!==9&&(r===t||s.nodeType!==1||!v(s).is(r)))s.nodeType===1&&i.push(s),s=s[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)e.nodeType===1&&e!==t&&n.push(e);return n}});var ct="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",ht=/ jQuery\d+="(?:null|\d+)"/g,pt=/^\s+/,dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,vt=/<([\w:]+)/,mt=/<tbody/i,gt=/<|&#?\w+;/,yt=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,wt=new RegExp("<(?:"+ct+")[\\s/>]","i"),Et=/^(?:checkbox|radio)$/,St=/checked\s*(?:[^=]|=\s*.checked.)/i,xt=/\/(java|ecma)script/i,Tt=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,Nt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},Ct=lt(i),kt=Ct.appendChild(i.createElement("div"));Nt.optgroup=Nt.option,Nt.tbody=Nt.tfoot=Nt.colgroup=Nt.caption=Nt.thead,Nt.th=Nt.td,v.support.htmlSerialize||(Nt._default=[1,"X<div>","</div>"]),v.fn.extend({text:function(e){return v.access(this,function(e){return e===t?v.text(this):this.empty().append((this[0]&&this[0].ownerDocument||i).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(v.isFunction(e))return this.each(function(t){v(this).wrapAll(e.call(this,t))});if(this[0]){var t=v(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&e.firstChild.nodeType===1)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return v.isFunction(e)?this.each(function(t){v(this).wrapInner(e.call(this,t))}):this.each(function(){var t=v(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=v.isFunction(e);return this.each(function(n){v(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){v.nodeName(this,"body")||v(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(e,this.firstChild)})},before:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(e,this),"before",this.selector)}},after:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this.nextSibling)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(this,e),"after",this.selector)}},remove:function(e,t){var n,r=0;for(;(n=this[r])!=null;r++)if(!e||v.filter(e,[n]).length)!t&&n.nodeType===1&&(v.cleanData(n.getElementsByTagName("*")),v.cleanData([n])),n.parentNode&&n.parentNode.removeChild(n);return this},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){e.nodeType===1&&v.cleanData(e.getElementsByTagName("*"));while(e.firstChild)e.removeChild(e.firstChild)}return this},clone:function(e,t){return e=e==null?!1:e,t=t==null?e:t,this.map(function(){return v.clone(this,e,t)})},html:function(e){return v.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return n.nodeType===1?n.innerHTML.replace(ht,""):t;if(typeof e=="string"&&!yt.test(e)&&(v.support.htmlSerialize||!wt.test(e))&&(v.support.leadingWhitespace||!pt.test(e))&&!Nt[(vt.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(dt,"<$1></$2>");try{for(;r<i;r++)n=this[r]||{},n.nodeType===1&&(v.cleanData(n.getElementsByTagName("*")),n.innerHTML=e);n=0}catch(s){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){return ut(this[0])?this.length?this.pushStack(v(v.isFunction(e)?e():e),"replaceWith",e):this:v.isFunction(e)?this.each(function(t){var n=v(this),r=n.html();n.replaceWith(e.call(this,t,r))}):(typeof e!="string"&&(e=v(e).detach()),this.each(function(){var t=this.nextSibling,n=this.parentNode;v(this).remove(),t?v(t).before(e):v(n).append(e)}))},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=[].concat.apply([],e);var i,s,o,u,a=0,f=e[0],l=[],c=this.length;if(!v.support.checkClone&&c>1&&typeof f=="string"&&St.test(f))return this.each(function(){v(this).domManip(e,n,r)});if(v.isFunction(f))return this.each(function(i){var s=v(this);e[0]=f.call(this,i,n?s.html():t),s.domManip(e,n,r)});if(this[0]){i=v.buildFragment(e,this,l),o=i.fragment,s=o.firstChild,o.childNodes.length===1&&(o=s);if(s){n=n&&v.nodeName(s,"tr");for(u=i.cacheable||c-1;a<c;a++)r.call(n&&v.nodeName(this[a],"table")?Lt(this[a],"tbody"):this[a],a===u?o:v.clone(o,!0,!0))}o=s=null,l.length&&v.each(l,function(e,t){t.src?v.ajax?v.ajax({url:t.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):v.error("no ajax"):v.globalEval((t.text||t.textContent||t.innerHTML||"").replace(Tt,"")),t.parentNode&&t.parentNode.removeChild(t)})}return this}}),v.buildFragment=function(e,n,r){var s,o,u,a=e[0];return n=n||i,n=!n.nodeType&&n[0]||n,n=n.ownerDocument||n,e.length===1&&typeof a=="string"&&a.length<512&&n===i&&a.charAt(0)==="<"&&!bt.test(a)&&(v.support.checkClone||!St.test(a))&&(v.support.html5Clone||!wt.test(a))&&(o=!0,s=v.fragments[a],u=s!==t),s||(s=n.createDocumentFragment(),v.clean(e,n,s,r),o&&(v.fragments[a]=u&&s)),{fragment:s,cacheable:o}},v.fragments={},v.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){v.fn[e]=function(n){var r,i=0,s=[],o=v(n),u=o.length,a=this.length===1&&this[0].parentNode;if((a==null||a&&a.nodeType===11&&a.childNodes.length===1)&&u===1)return o[t](this[0]),this;for(;i<u;i++)r=(i>0?this.clone(!0):this).get(),v(o[i])[t](r),s=s.concat(r);return this.pushStack(s,e,o.selector)}}),v.extend({clone:function(e,t,n){var r,i,s,o;v.support.html5Clone||v.isXMLDoc(e)||!wt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(kt.innerHTML=e.outerHTML,kt.removeChild(o=kt.firstChild));if((!v.support.noCloneEvent||!v.support.noCloneChecked)&&(e.nodeType===1||e.nodeType===11)&&!v.isXMLDoc(e)){Ot(e,o),r=Mt(e),i=Mt(o);for(s=0;r[s];++s)i[s]&&Ot(r[s],i[s])}if(t){At(e,o);if(n){r=Mt(e),i=Mt(o);for(s=0;r[s];++s)At(r[s],i[s])}}return r=i=null,o},clean:function(e,t,n,r){var s,o,u,a,f,l,c,h,p,d,m,g,y=t===i&&Ct,b=[];if(!t||typeof t.createDocumentFragment=="undefined")t=i;for(s=0;(u=e[s])!=null;s++){typeof u=="number"&&(u+="");if(!u)continue;if(typeof u=="string")if(!gt.test(u))u=t.createTextNode(u);else{y=y||lt(t),c=t.createElement("div"),y.appendChild(c),u=u.replace(dt,"<$1></$2>"),a=(vt.exec(u)||["",""])[1].toLowerCase(),f=Nt[a]||Nt._default,l=f[0],c.innerHTML=f[1]+u+f[2];while(l--)c=c.lastChild;if(!v.support.tbody){h=mt.test(u),p=a==="table"&&!h?c.firstChild&&c.firstChild.childNodes:f[1]==="<table>"&&!h?c.childNodes:[];for(o=p.length-1;o>=0;--o)v.nodeName(p[o],"tbody")&&!p[o].childNodes.length&&p[o].parentNode.removeChild(p[o])}!v.support.leadingWhitespace&&pt.test(u)&&c.insertBefore(t.createTextNode(pt.exec(u)[0]),c.firstChild),u=c.childNodes,c.parentNode.removeChild(c)}u.nodeType?b.push(u):v.merge(b,u)}c&&(u=c=y=null);if(!v.support.appendChecked)for(s=0;(u=b[s])!=null;s++)v.nodeName(u,"input")?_t(u):typeof u.getElementsByTagName!="undefined"&&v.grep(u.getElementsByTagName("input"),_t);if(n){m=function(e){if(!e.type||xt.test(e.type))return r?r.push(e.parentNode?e.parentNode.removeChild(e):e):n.appendChild(e)};for(s=0;(u=b[s])!=null;s++)if(!v.nodeName(u,"script")||!m(u))n.appendChild(u),typeof u.getElementsByTagName!="undefined"&&(g=v.grep(v.merge([],u.getElementsByTagName("script")),m),b.splice.apply(b,[s+1,0].concat(g)),s+=g.length)}return b},cleanData:function(e,t){var n,r,i,s,o=0,u=v.expando,a=v.cache,f=v.support.deleteExpando,l=v.event.special;for(;(i=e[o])!=null;o++)if(t||v.acceptData(i)){r=i[u],n=r&&a[r];if(n){if(n.events)for(s in n.events)l[s]?v.event.remove(i,s):v.removeEvent(i,s,n.handle);a[r]&&(delete a[r],f?delete i[u]:i.removeAttribute?i.removeAttribute(u):i[u]=null,v.deletedIds.push(r))}}}}),function(){var e,t;v.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e=v.uaMatch(o.userAgent),t={},e.browser&&(t[e.browser]=!0,t.version=e.version),t.chrome?t.webkit=!0:t.webkit&&(t.safari=!0),v.browser=t,v.sub=function(){function e(t,n){return new e.fn.init(t,n)}v.extend(!0,e,this),e.superclass=this,e.fn=e.prototype=this(),e.fn.constructor=e,e.sub=this.sub,e.fn.init=function(r,i){return i&&i instanceof v&&!(i instanceof e)&&(i=e(i)),v.fn.init.call(this,r,i,t)},e.fn.init.prototype=e.fn;var t=e(i);return e}}();var Dt,Pt,Ht,Bt=/alpha\([^)]*\)/i,jt=/opacity=([^)]*)/,Ft=/^(top|right|bottom|left)$/,It=/^(none|table(?!-c[ea]).+)/,qt=/^margin/,Rt=new RegExp("^("+m+")(.*)$","i"),Ut=new RegExp("^("+m+")(?!px)[a-z%]+$","i"),zt=new RegExp("^([-+])=("+m+")","i"),Wt={BODY:"block"},Xt={position:"absolute",visibility:"hidden",display:"block"},Vt={letterSpacing:0,fontWeight:400},$t=["Top","Right","Bottom","Left"],Jt=["Webkit","O","Moz","ms"],Kt=v.fn.toggle;v.fn.extend({css:function(e,n){return v.access(this,function(e,n,r){return r!==t?v.style(e,n,r):v.css(e,n)},e,n,arguments.length>1)},show:function(){return Yt(this,!0)},hide:function(){return Yt(this)},toggle:function(e,t){var n=typeof e=="boolean";return v.isFunction(e)&&v.isFunction(t)?Kt.apply(this,arguments):this.each(function(){(n?e:Gt(this))?v(this).show():v(this).hide()})}}),v.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Dt(e,"opacity");return n===""?"1":n}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":v.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(!e||e.nodeType===3||e.nodeType===8||!e.style)return;var s,o,u,a=v.camelCase(n),f=e.style;n=v.cssProps[a]||(v.cssProps[a]=Qt(f,a)),u=v.cssHooks[n]||v.cssHooks[a];if(r===t)return u&&"get"in u&&(s=u.get(e,!1,i))!==t?s:f[n];o=typeof r,o==="string"&&(s=zt.exec(r))&&(r=(s[1]+1)*s[2]+parseFloat(v.css(e,n)),o="number");if(r==null||o==="number"&&isNaN(r))return;o==="number"&&!v.cssNumber[a]&&(r+="px");if(!u||!("set"in u)||(r=u.set(e,r,i))!==t)try{f[n]=r}catch(l){}},css:function(e,n,r,i){var s,o,u,a=v.camelCase(n);return n=v.cssProps[a]||(v.cssProps[a]=Qt(e.style,a)),u=v.cssHooks[n]||v.cssHooks[a],u&&"get"in u&&(s=u.get(e,!0,i)),s===t&&(s=Dt(e,n)),s==="normal"&&n in Vt&&(s=Vt[n]),r||i!==t?(o=parseFloat(s),r||v.isNumeric(o)?o||0:s):s},swap:function(e,t,n){var r,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];r=n.call(e);for(i in t)e.style[i]=s[i];return r}}),e.getComputedStyle?Dt=function(t,n){var r,i,s,o,u=e.getComputedStyle(t,null),a=t.style;return u&&(r=u.getPropertyValue(n)||u[n],r===""&&!v.contains(t.ownerDocument,t)&&(r=v.style(t,n)),Ut.test(r)&&qt.test(n)&&(i=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=u.width,a.width=i,a.minWidth=s,a.maxWidth=o)),r}:i.documentElement.currentStyle&&(Dt=function(e,t){var n,r,i=e.currentStyle&&e.currentStyle[t],s=e.style;return i==null&&s&&s[t]&&(i=s[t]),Ut.test(i)&&!Ft.test(t)&&(n=s.left,r=e.runtimeStyle&&e.runtimeStyle.left,r&&(e.runtimeStyle.left=e.currentStyle.left),s.left=t==="fontSize"?"1em":i,i=s.pixelLeft+"px",s.left=n,r&&(e.runtimeStyle.left=r)),i===""?"auto":i}),v.each(["height","width"],function(e,t){v.cssHooks[t]={get:function(e,n,r){if(n)return e.offsetWidth===0&&It.test(Dt(e,"display"))?v.swap(e,Xt,function(){return tn(e,t,r)}):tn(e,t,r)},set:function(e,n,r){return Zt(e,n,r?en(e,t,r,v.support.boxSizing&&v.css(e,"boxSizing")==="border-box"):0)}}}),v.support.opacity||(v.cssHooks.opacity={get:function(e,t){return jt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=v.isNumeric(t)?"alpha(opacity="+t*100+")":"",s=r&&r.filter||n.filter||"";n.zoom=1;if(t>=1&&v.trim(s.replace(Bt,""))===""&&n.removeAttribute){n.removeAttribute("filter");if(r&&!r.filter)return}n.filter=Bt.test(s)?s.replace(Bt,i):s+" "+i}}),v(function(){v.support.reliableMarginRight||(v.cssHooks.marginRight={get:function(e,t){return v.swap(e,{display:"inline-block"},function(){if(t)return Dt(e,"marginRight")})}}),!v.support.pixelPosition&&v.fn.position&&v.each(["top","left"],function(e,t){v.cssHooks[t]={get:function(e,n){if(n){var r=Dt(e,t);return Ut.test(r)?v(e).position()[t]+"px":r}}}})}),v.expr&&v.expr.filters&&(v.expr.filters.hidden=function(e){return e.offsetWidth===0&&e.offsetHeight===0||!v.support.reliableHiddenOffsets&&(e.style&&e.style.display||Dt(e,"display"))==="none"},v.expr.filters.visible=function(e){return!v.expr.filters.hidden(e)}),v.each({margin:"",padding:"",border:"Width"},function(e,t){v.cssHooks[e+t]={expand:function(n){var r,i=typeof n=="string"?n.split(" "):[n],s={};for(r=0;r<4;r++)s[e+$t[r]+t]=i[r]||i[r-2]||i[0];return s}},qt.test(e)||(v.cssHooks[e+t].set=Zt)});var rn=/%20/g,sn=/\[\]$/,on=/\r?\n/g,un=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,an=/^(?:select|textarea)/i;v.fn.extend({serialize:function(){return v.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?v.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||an.test(this.nodeName)||un.test(this.type))}).map(function(e,t){var n=v(this).val();return n==null?null:v.isArray(n)?v.map(n,function(e,n){return{name:t.name,value:e.replace(on,"\r\n")}}):{name:t.name,value:n.replace(on,"\r\n")}}).get()}}),v.param=function(e,n){var r,i=[],s=function(e,t){t=v.isFunction(t)?t():t==null?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};n===t&&(n=v.ajaxSettings&&v.ajaxSettings.traditional);if(v.isArray(e)||e.jquery&&!v.isPlainObject(e))v.each(e,function(){s(this.name,this.value)});else for(r in e)fn(r,e[r],n,s);return i.join("&").replace(rn,"+")};var ln,cn,hn=/#.*$/,pn=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,dn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,vn=/^(?:GET|HEAD)$/,mn=/^\/\//,gn=/\?/,yn=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bn=/([?&])_=[^&]*/,wn=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,En=v.fn.load,Sn={},xn={},Tn=["*/"]+["*"];try{cn=s.href}catch(Nn){cn=i.createElement("a"),cn.href="",cn=cn.href}ln=wn.exec(cn.toLowerCase())||[],v.fn.load=function(e,n,r){if(typeof e!="string"&&En)return En.apply(this,arguments);if(!this.length)return this;var i,s,o,u=this,a=e.indexOf(" ");return a>=0&&(i=e.slice(a,e.length),e=e.slice(0,a)),v.isFunction(n)?(r=n,n=t):n&&typeof n=="object"&&(s="POST"),v.ajax({url:e,type:s,dataType:"html",data:n,complete:function(e,t){r&&u.each(r,o||[e.responseText,t,e])}}).done(function(e){o=arguments,u.html(i?v("<div>").append(e.replace(yn,"")).find(i):e)}),this},v.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(e,t){v.fn[t]=function(e){return this.on(t,e)}}),v.each(["get","post"],function(e,n){v[n]=function(e,r,i,s){return v.isFunction(r)&&(s=s||i,i=r,r=t),v.ajax({type:n,url:e,data:r,success:i,dataType:s})}}),v.extend({getScript:function(e,n){return v.get(e,t,n,"script")},getJSON:function(e,t,n){return v.get(e,t,n,"json")},ajaxSetup:function(e,t){return t?Ln(e,v.ajaxSettings):(t=e,e=v.ajaxSettings),Ln(e,t),e},ajaxSettings:{url:cn,isLocal:dn.test(ln[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":Tn},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":e.String,"text html":!0,"text json":v.parseJSON,"text xml":v.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:Cn(Sn),ajaxTransport:Cn(xn),ajax:function(e,n){function T(e,n,s,a){var l,y,b,w,S,T=n;if(E===2)return;E=2,u&&clearTimeout(u),o=t,i=a||"",x.readyState=e>0?4:0,s&&(w=An(c,x,s));if(e>=200&&e<300||e===304)c.ifModified&&(S=x.getResponseHeader("Last-Modified"),S&&(v.lastModified[r]=S),S=x.getResponseHeader("Etag"),S&&(v.etag[r]=S)),e===304?(T="notmodified",l=!0):(l=On(c,w),T=l.state,y=l.data,b=l.error,l=!b);else{b=T;if(!T||e)T="error",e<0&&(e=0)}x.status=e,x.statusText=(n||T)+"",l?d.resolveWith(h,[y,T,x]):d.rejectWith(h,[x,T,b]),x.statusCode(g),g=t,f&&p.trigger("ajax"+(l?"Success":"Error"),[x,c,l?y:b]),m.fireWith(h,[x,T]),f&&(p.trigger("ajaxComplete",[x,c]),--v.active||v.event.trigger("ajaxStop"))}typeof e=="object"&&(n=e,e=t),n=n||{};var r,i,s,o,u,a,f,l,c=v.ajaxSetup({},n),h=c.context||c,p=h!==c&&(h.nodeType||h instanceof v)?v(h):v.event,d=v.Deferred(),m=v.Callbacks("once memory"),g=c.statusCode||{},b={},w={},E=0,S="canceled",x={readyState:0,setRequestHeader:function(e,t){if(!E){var n=e.toLowerCase();e=w[n]=w[n]||e,b[e]=t}return this},getAllResponseHeaders:function(){return E===2?i:null},getResponseHeader:function(e){var n;if(E===2){if(!s){s={};while(n=pn.exec(i))s[n[1].toLowerCase()]=n[2]}n=s[e.toLowerCase()]}return n===t?null:n},overrideMimeType:function(e){return E||(c.mimeType=e),this},abort:function(e){return e=e||S,o&&o.abort(e),T(0,e),this}};d.promise(x),x.success=x.done,x.error=x.fail,x.complete=m.add,x.statusCode=function(e){if(e){var t;if(E<2)for(t in e)g[t]=[g[t],e[t]];else t=e[x.status],x.always(t)}return this},c.url=((e||c.url)+"").replace(hn,"").replace(mn,ln[1]+"//"),c.dataTypes=v.trim(c.dataType||"*").toLowerCase().split(y),c.crossDomain==null&&(a=wn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===ln[1]&&a[2]===ln[2]&&(a[3]||(a[1]==="http:"?80:443))==(ln[3]||(ln[1]==="http:"?80:443)))),c.data&&c.processData&&typeof c.data!="string"&&(c.data=v.param(c.data,c.traditional)),kn(Sn,c,n,x);if(E===2)return x;f=c.global,c.type=c.type.toUpperCase(),c.hasContent=!vn.test(c.type),f&&v.active++===0&&v.event.trigger("ajaxStart");if(!c.hasContent){c.data&&(c.url+=(gn.test(c.url)?"&":"?")+c.data,delete c.data),r=c.url;if(c.cache===!1){var N=v.now(),C=c.url.replace(bn,"$1_="+N);c.url=C+(C===c.url?(gn.test(c.url)?"&":"?")+"_="+N:"")}}(c.data&&c.hasContent&&c.contentType!==!1||n.contentType)&&x.setRequestHeader("Content-Type",c.contentType),c.ifModified&&(r=r||c.url,v.lastModified[r]&&x.setRequestHeader("If-Modified-Since",v.lastModified[r]),v.etag[r]&&x.setRequestHeader("If-None-Match",v.etag[r])),x.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+(c.dataTypes[0]!=="*"?", "+Tn+"; q=0.01":""):c.accepts["*"]);for(l in c.headers)x.setRequestHeader(l,c.headers[l]);if(!c.beforeSend||c.beforeSend.call(h,x,c)!==!1&&E!==2){S="abort";for(l in{success:1,error:1,complete:1})x[l](c[l]);o=kn(xn,c,n,x);if(!o)T(-1,"No Transport");else{x.readyState=1,f&&p.trigger("ajaxSend",[x,c]),c.async&&c.timeout>0&&(u=setTimeout(function(){x.abort("timeout")},c.timeout));try{E=1,o.send(b,T)}catch(k){if(!(E<2))throw k;T(-1,k)}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var Mn=[],_n=/\?/,Dn=/(=)\?(?=&|$)|\?\?/,Pn=v.now();v.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Mn.pop()||v.expando+"_"+Pn++;return this[e]=!0,e}}),v.ajaxPrefilter("json jsonp",function(n,r,i){var s,o,u,a=n.data,f=n.url,l=n.jsonp!==!1,c=l&&Dn.test(f),h=l&&!c&&typeof a=="string"&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Dn.test(a);if(n.dataTypes[0]==="jsonp"||c||h)return s=n.jsonpCallback=v.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,o=e[s],c?n.url=f.replace(Dn,"$1"+s):h?n.data=a.replace(Dn,"$1"+s):l&&(n.url+=(_n.test(f)?"&":"?")+n.jsonp+"="+s),n.converters["script json"]=function(){return u||v.error(s+" was not called"),u[0]},n.dataTypes[0]="json",e[s]=function(){u=arguments},i.always(function(){e[s]=o,n[s]&&(n.jsonpCallback=r.jsonpCallback,Mn.push(s)),u&&v.isFunction(o)&&o(u[0]),u=o=t}),"script"}),v.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(e){return v.globalEval(e),e}}}),v.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),v.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=i.head||i.getElementsByTagName("head")[0]||i.documentElement;return{send:function(s,o){n=i.createElement("script"),n.async="async",e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,i){if(i||!n.readyState||/loaded|complete/.test(n.readyState))n.onload=n.onreadystatechange=null,r&&n.parentNode&&r.removeChild(n),n=t,i||o(200,"success")},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(0,1)}}}});var Hn,Bn=e.ActiveXObject?function(){for(var e in Hn)Hn[e](0,1)}:!1,jn=0;v.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&Fn()||In()}:Fn,function(e){v.extend(v.support,{ajax:!!e,cors:!!e&&"withCredentials"in e})}(v.ajaxSettings.xhr()),v.support.ajax&&v.ajaxTransport(function(n){if(!n.crossDomain||v.support.cors){var r;return{send:function(i,s){var o,u,a=n.xhr();n.username?a.open(n.type,n.url,n.async,n.username,n.password):a.open(n.type,n.url,n.async);if(n.xhrFields)for(u in n.xhrFields)a[u]=n.xhrFields[u];n.mimeType&&a.overrideMimeType&&a.overrideMimeType(n.mimeType),!n.crossDomain&&!i["X-Requested-With"]&&(i["X-Requested-With"]="XMLHttpRequest");try{for(u in i)a.setRequestHeader(u,i[u])}catch(f){}a.send(n.hasContent&&n.data||null),r=function(e,i){var u,f,l,c,h;try{if(r&&(i||a.readyState===4)){r=t,o&&(a.onreadystatechange=v.noop,Bn&&delete Hn[o]);if(i)a.readyState!==4&&a.abort();else{u=a.status,l=a.getAllResponseHeaders(),c={},h=a.responseXML,h&&h.documentElement&&(c.xml=h);try{c.text=a.responseText}catch(p){}try{f=a.statusText}catch(p){f=""}!u&&n.isLocal&&!n.crossDomain?u=c.text?200:404:u===1223&&(u=204)}}}catch(d){i||s(-1,d)}c&&s(u,f,c,l)},n.async?a.readyState===4?setTimeout(r,0):(o=++jn,Bn&&(Hn||(Hn={},v(e).unload(Bn)),Hn[o]=r),a.onreadystatechange=r):r()},abort:function(){r&&r(0,1)}}}});var qn,Rn,Un=/^(?:toggle|show|hide)$/,zn=new RegExp("^(?:([-+])=|)("+m+")([a-z%]*)$","i"),Wn=/queueHooks$/,Xn=[Gn],Vn={"*":[function(e,t){var n,r,i=this.createTween(e,t),s=zn.exec(t),o=i.cur(),u=+o||0,a=1,f=20;if(s){n=+s[2],r=s[3]||(v.cssNumber[e]?"":"px");if(r!=="px"&&u){u=v.css(i.elem,e,!0)||n||1;do a=a||".5",u/=a,v.style(i.elem,e,u+r);while(a!==(a=i.cur()/o)&&a!==1&&--f)}i.unit=r,i.start=u,i.end=s[1]?u+(s[1]+1)*n:n}return i}]};v.Animation=v.extend(Kn,{tweener:function(e,t){v.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;r<i;r++)n=e[r],Vn[n]=Vn[n]||[],Vn[n].unshift(t)},prefilter:function(e,t){t?Xn.unshift(e):Xn.push(e)}}),v.Tween=Yn,Yn.prototype={constructor:Yn,init:function(e,t,n,r,i,s){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=s||(v.cssNumber[n]?"":"px")},cur:function(){var e=Yn.propHooks[this.prop];return e&&e.get?e.get(this):Yn.propHooks._default.get(this)},run:function(e){var t,n=Yn.propHooks[this.prop];return this.options.duration?this.pos=t=v.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Yn.propHooks._default.set(this),this}},Yn.prototype.init.prototype=Yn.prototype,Yn.propHooks={_default:{get:function(e){var t;return e.elem[e.prop]==null||!!e.elem.style&&e.elem.style[e.prop]!=null?(t=v.css(e.elem,e.prop,!1,""),!t||t==="auto"?0:t):e.elem[e.prop]},set:function(e){v.fx.step[e.prop]?v.fx.step[e.prop](e):e.elem.style&&(e.elem.style[v.cssProps[e.prop]]!=null||v.cssHooks[e.prop])?v.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Yn.propHooks.scrollTop=Yn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},v.each(["toggle","show","hide"],function(e,t){var n=v.fn[t];v.fn[t]=function(r,i,s){return r==null||typeof r=="boolean"||!e&&v.isFunction(r)&&v.isFunction(i)?n.apply(this,arguments):this.animate(Zn(t,!0),r,i,s)}}),v.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Gt).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=v.isEmptyObject(e),s=v.speed(t,n,r),o=function(){var t=Kn(this,v.extend({},e),s);i&&t.stop(!0)};return i||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return typeof e!="string"&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=e!=null&&e+"queueHooks",s=v.timers,o=v._data(this);if(n)o[n]&&o[n].stop&&i(o[n]);else for(n in o)o[n]&&o[n].stop&&Wn.test(n)&&i(o[n]);for(n=s.length;n--;)s[n].elem===this&&(e==null||s[n].queue===e)&&(s[n].anim.stop(r),t=!1,s.splice(n,1));(t||!r)&&v.dequeue(this,e)})}}),v.each({slideDown:Zn("show"),slideUp:Zn("hide"),slideToggle:Zn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){v.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),v.speed=function(e,t,n){var r=e&&typeof e=="object"?v.extend({},e):{complete:n||!n&&t||v.isFunction(e)&&e,duration:e,easing:n&&t||t&&!v.isFunction(t)&&t};r.duration=v.fx.off?0:typeof r.duration=="number"?r.duration:r.duration in v.fx.speeds?v.fx.speeds[r.duration]:v.fx.speeds._default;if(r.queue==null||r.queue===!0)r.queue="fx";return r.old=r.complete,r.complete=function(){v.isFunction(r.old)&&r.old.call(this),r.queue&&v.dequeue(this,r.queue)},r},v.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},v.timers=[],v.fx=Yn.prototype.init,v.fx.tick=function(){var e,n=v.timers,r=0;qn=v.now();for(;r<n.length;r++)e=n[r],!e()&&n[r]===e&&n.splice(r--,1);n.length||v.fx.stop(),qn=t},v.fx.timer=function(e){e()&&v.timers.push(e)&&!Rn&&(Rn=setInterval(v.fx.tick,v.fx.interval))},v.fx.interval=13,v.fx.stop=function(){clearInterval(Rn),Rn=null},v.fx.speeds={slow:600,fast:200,_default:400},v.fx.step={},v.expr&&v.expr.filters&&(v.expr.filters.animated=function(e){return v.grep(v.timers,function(t){return e===t.elem}).length});var er=/^(?:body|html)$/i;v.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){v.offset.setOffset(this,e,t)});var n,r,i,s,o,u,a,f={top:0,left:0},l=this[0],c=l&&l.ownerDocument;if(!c)return;return(r=c.body)===l?v.offset.bodyOffset(l):(n=c.documentElement,v.contains(n,l)?(typeof l.getBoundingClientRect!="undefined"&&(f=l.getBoundingClientRect()),i=tr(c),s=n.clientTop||r.clientTop||0,o=n.clientLeft||r.clientLeft||0,u=i.pageYOffset||n.scrollTop,a=i.pageXOffset||n.scrollLeft,{top:f.top+u-s,left:f.left+a-o}):f)},v.offset={bodyOffset:function(e){var t=e.offsetTop,n=e.offsetLeft;return v.support.doesNotIncludeMarginInBodyOffset&&(t+=parseFloat(v.css(e,"marginTop"))||0,n+=parseFloat(v.css(e,"marginLeft"))||0),{top:t,left:n}},setOffset:function(e,t,n){var r=v.css(e,"position");r==="static"&&(e.style.position="relative");var i=v(e),s=i.offset(),o=v.css(e,"top"),u=v.css(e,"left"),a=(r==="absolute"||r==="fixed")&&v.inArray("auto",[o,u])>-1,f={},l={},c,h;a?(l=i.position(),c=l.top,h=l.left):(c=parseFloat(o)||0,h=parseFloat(u)||0),v.isFunction(t)&&(t=t.call(e,n,s)),t.top!=null&&(f.top=t.top-s.top+c),t.left!=null&&(f.left=t.left-s.left+h),"using"in t?t.using.call(e,f):i.css(f)}},v.fn.extend({position:function(){if(!this[0])return;var e=this[0],t=this.offsetParent(),n=this.offset(),r=er.test(t[0].nodeName)?{top:0,left:0}:t.offset();return n.top-=parseFloat(v.css(e,"marginTop"))||0,n.left-=parseFloat(v.css(e,"marginLeft"))||0,r.top+=parseFloat(v.css(t[0],"borderTopWidth"))||0,r.left+=parseFloat(v.css(t[0],"borderLeftWidth"))||0,{top:n.top-r.top,left:n.left-r.left}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||i.body;while(e&&!er.test(e.nodeName)&&v.css(e,"position")==="static")e=e.offsetParent;return e||i.body})}}),v.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);v.fn[e]=function(i){return v.access(this,function(e,i,s){var o=tr(e);if(s===t)return o?n in o?o[n]:o.document.documentElement[i]:e[i];o?o.scrollTo(r?v(o).scrollLeft():s,r?s:v(o).scrollTop()):e[i]=s},e,i,arguments.length,null)}}),v.each({Height:"height",Width:"width"},function(e,n){v.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){v.fn[i]=function(i,s){var o=arguments.length&&(r||typeof i!="boolean"),u=r||(i===!0||s===!0?"margin":"border");return v.access(this,function(n,r,i){var s;return v.isWindow(n)?n.document.documentElement["client"+e]:n.nodeType===9?(s=n.documentElement,Math.max(n.body["scroll"+e],s["scroll"+e],n.body["offset"+e],s["offset"+e],s["client"+e])):i===t?v.css(n,r,i,u):v.style(n,r,i,u)},n,o?i:t,o,null)}})}),e.jQuery=e.$=v,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return v})})(window);]]></content>
    
    
      
      
    <summary type="html">/*! jQuery v1.8.3 jquery.com | jquery.org/license */
(function(e,t){function _(e){var t=M[e]={};return v.each(e.split(y),function(e,n){t[n]=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Love Page</title>
    <link href="http://example.com/posts/undefined.html"/>
    <id>http://example.com/posts/undefined.html</id>
    <published>2024-12-16T06:05:29.661Z</published>
    <updated>2024-12-16T15:32:55.835Z</updated>
    
    <content type="html"><![CDATA[<html><!DOCTYPE HTML><html><head><meta http-equiv='Pragma' content='no-cache' /><meta charset="UTF-8"><meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"><meta name="author" content="DSX,工科男表白,浪漫表白,表白网站"><meta name="description" content="这是刘钢为何松婷表白制作的表白网站"><title>刘钢 LOVE 何松婷</title><style>        /* 重置样式，防止被 Hexo 主题影响 */        #love-page {            all: initial;            * {                all: unset;            }        }    </style><link rel="stylesheet" href="all.min.css" ></head><body><div class="flowtime"><div class="ft-section section-1" data-id="section-1"><div id="/section-1/page-1" class="ft-page page-1" data-id="page-1"><p class="text1"><span id="text-75" contenteditable="true">刘钢</span> ❤ <span id="text-76" contenteditable="true">何松婷</span> <span id="text-77" contenteditable="true">一生一世</span></p><p class="text2">按键盘 "↓" <span id="text-78" contenteditable="true">开始倾听工科男的浪漫表白</span></p></div><div id="/section-1/page-2" class="ft-page page-2" data-id="page-2"><p class="top-text" id="text-1" contenteditable="true">过去的刘钢一直是一个人生活，享受着孤独，也憧憬着爱情。</p><img src="img/iali63.jpg" tppabs="img/iali63.jpg"  alt="过去的刘钢一直是一个人生活，享受着孤独，也憧憬着爱情。" /></div><div id="/section-1/page-3" class="ft-page page-3 left-img" data-id="page-3"><h2 class="text" id="text-2" contenteditable="true">一个人的长廊</h2><img src="img/iali35.jpg" tppabs="img/iali35.jpg"  alt="一个人的长廊"/></div><div id="/section-1/page-4" class="ft-page page-4 full-img" data-id="page-4"><h2 class="center-text" id="text-3" contenteditable="true">一个人的山岗</h2><img src="img/iali6.jpg" tppabs="img/iali6.jpg"  alt="一个人的山岗" /></div></div><div class="ft-section section-2" data-id="section-2"><div id="/section-2/page-1" class="ft-page page-5 full-img" data-id="page-1"><h2 class="center-text" id="text-4" contenteditable="true">一个人的地铁</h2><img src="img/iali19.jpg" tppabs="img/iali19.jpg"  alt="一个人的地铁" /></div><div id="/section-2/page-2" class="ft-page page-6" data-id="page-2"><h2 class="center-text" id="text-5" contenteditable="true">一个人的游乐场</h2><img src="img/iali29.jpg" tppabs="img/iali29.jpg" alt="一个人的游乐场"/></div><div id="/section-2/page-3" class="ft-page page-7" data-id="page-3"><h3 id="text-6" contenteditable="true">但他依然乐观，微笑着，等待着</h3><img src="img/iali60.jpg" tppabs="img/iali60.jpg"  alt="但他依然乐观，微笑着，等待着"/></div><div id="/section-2/page-4" class="ft-page page-8 full-img" data-id="page-4"><h3 id="text-7" contenteditable="true">生活难免有风风雨雨</h3><img src="img/iali51.jpg" tppabs="img/iali51.jpg" alt="生活难免有风风雨雨" /></div><div id="/section-2/page-5" class="ft-page page-9" data-id="page-5"><h3 id="text-8" contenteditable="true">他总是能够轻松的应对</h3><img src="img/iali5.jpg" tppabs="img/iali5.jpg" /></div><div id="/section-2/page-6" class="ft-page page-10" data-id="page-6"><h3 id="text-9" contenteditable="true">并且面带阳光、自信的笑容</h3><img src="img/iali22.jpg" tppabs="img/iali22.jpg" /></div></div><div class="ft-section section-3" data-id="section-3"><div id="/section-3/page-1" class="ft-page page-11 full-img" data-id="page-1"><h3 id="text-10" contenteditable="true">生活也不会总是一帆风顺</h3><img src="img/iali24.jpg" tppabs="img/iali24.jpg"  /></div><div id="/section-3/page-2" class="ft-page page-12" data-id="page-2"><h3><span id="text-11" contenteditable="true">但他每次都能勇敢的面对</span><br /><span id="text-12" contenteditable="true">随时准备接受生活的挑战</span></h3><img src="img/iali25.jpg" tppabs="img/iali25.jpg" /></div><div id="/section-3/page-3" class="ft-page page-13" data-id="page-3"><img src="img/iali64.jpg" tppabs="img/iali64.jpg" alt='可是刘钢的爱情又在哪里呢？' /><h3 id="text-13" contenteditable="true">可是刘钢的爱情又在哪里呢？</h3></div><div id="/section-3/page-4" class="ft-page page-14 left-img" data-id="page-4"><h3 id="text-14" contenteditable="true">在镜子里面吗？他不敢相信</h3><img src="img/iali46.jpg" tppabs="img/iali46.jpg" /></div><div id="/section-3/page-5" class="ft-page page-15 left-img" data-id="page-5"><h3><span id="text-15" contenteditable="true">他去问大树，我的爱情在哪里？</span><br /><span id="text-16" contenteditable="true">大树告诉他，也许就在不远的地方</span></h3><img src="img/iali45.jpg" tppabs="img/iali45.jpg" /></div><div id="/section-3/page-6" class="ft-page page-16 left-img" data-id="page-6"><h3><span id="text-17" contenteditable="true">于是，刘钢一个人继续向前走</span><br /><span id="text-18" contenteditable="true">走在茫茫的雪地上</span></h3><img src="img/iali66.jpg" tppabs="img/iali66.jpg" /></div><div id="/section-3/page-7" class="ft-page page-17 top-text" data-id="page-7"><h3 id="text-19" contenteditable="true">直到有一天刘钢与何松婷相遇了</h3><img src="img/iali16.jpg" tppabs="img/iali16.jpg" /></div></div><div class="ft-section section-4" data-id="section-4"><div id="/section-4/page-1" class="ft-page page-18 full-img" data-id="page-1"><p class="text" id="text-20" contenteditable="true">刘钢喜欢何松婷，非常非常的喜欢，因为何松婷的出现，刘钢脸上有了更加灿烂的笑容</p><img src="img/iali11.jpg" tppabs="img/iali11.jpg"  /></div><div id="/section-4/page-2" class="ft-page page-19" data-id="page-2"><h3 id="text-21" contenteditable="true">可是何松婷会喜欢刘钢吗？</h3><img src="img/iali75.jpg" tppabs="img/iali75.jpg" /></div><div id="/section-4/page-3" class="ft-page page-20" data-id="page-3"><img src="img/iali59.png" tppabs="img/iali59.png" /><h3 id="text-22" contenteditable="true">刘钢想。。。</h3><img src="img/iali9.jpg" tppabs="img/iali9.jpg" /></div><div id="/section-4/page-4" class="ft-page page-21" data-id="page-4"><h3 id="text-23" contenteditable="true">刘钢想和何松婷在一起</h3><img src="img/iali59.png" tppabs="img/iali59.png" /></div><div id="/section-4/page-5" class="ft-page page-22 left-img" data-id="page-5"><h3 id="text-24" contenteditable="true">然后刘钢会经常去找何松婷</h3><img src="img/iali4.jpg" tppabs="img/iali4.jpg" /></div><div id="/section-4/page-6" class="ft-page page-23 left-img" data-id="page-6"><h3 id="text-25" contenteditable="true">然后两个人一起出去玩</h3><img src="img/iali44.jpg" tppabs="img/iali44.jpg" /></div><div id="/section-4/page-7" class="ft-page page-24 full-img" data-id="page-7"><h3 id="text-26" contenteditable="true">晚上刘钢会把何松婷送回家</h3><img src="img/iali32.jpg" tppabs="img/iali32.jpg" /></div></div><div class="ft-section section-5" data-id="section-5"><div id="/section-5/page-1" class="ft-page page-25 left-img" data-id="page-1"><h3><span id="text-27" contenteditable="true">直到很晚</span><br /><span id="text-28" contenteditable="true">刘钢再一个人回家</span></h3><img src="img/iali37.jpg" tppabs="img/iali37.jpg" /></div><div id="/section-5/page-2" class="ft-page page-26 top-text" data-id="page-2"><h3 id="text-29" contenteditable="true">然后高兴地进入梦乡，在梦中还会和何松婷在一起</h3><img src="img/iali10.gif" tppabs="img/iali10.gif" /></div><div id="/section-5/page-3" class="ft-page page-27" data-id="page-3"><h3 id="text-30" contenteditable="true">刘钢想成为了何松婷的逛街助手</h3><img src="img/iali67.jpg" tppabs="img/iali67.jpg"  /></div><div id="/section-5/page-4" class="ft-page page-28" data-id="page-4"><h3 id="text-31" contenteditable="true">然后，刘钢和何松婷一起去很多地方玩</h3><img src="img/iali40.jpg" tppabs="img/iali40.jpg" /></div><div id="/section-5/page-5" class="ft-page page-29" data-id="page-5"><h3 id="text-32" contenteditable="true">刘钢也想和何松婷一块成为一对吃货</h3><img src="img/iali12.jpg" tppabs="img/iali12.jpg" /></div><div id="/section-5/page-6" class="ft-page page-30" data-id="page-6"><h3 id="text-33" contenteditable="true">再然后，他们会搬到了一起</h3><img src="img/iali76.gif" tppabs="img/iali76.gif" /></div><div id="/section-5/page-7" class="ft-page page-31" data-id="page-7"><h3 id="text-34" contenteditable="true">再然后，刘钢会开始学习她的技能</h3><img src="img/iali77.jpg" tppabs="img/iali77.jpg" /></div></div><div class="ft-section section-6" data-id="section-6"><div id="/section-6/page-1" class="ft-page page-32" data-id="page-1"><h3 id="text-35" contenteditable="true">煮饭</h3><img src="img/iali62.jpg" tppabs="img/iali62.jpg"  /></div><div id="/section-6/page-2" class="ft-page page-33 top-text" data-id="page-2"><h3 id="text-36" contenteditable="true">那时候，每天早上，他们吃着自己做的美食</h3><img src="img/iali3.jpg" tppabs="img/iali3.jpg" /></div><div id="/section-6/page-3" class="ft-page page-34 left-img" data-id="page-3"><h3 id="text-37" contenteditable="true">然后在同一个站台，高高兴兴的一起上班</h3></div><div id="/section-6/page-4" class="ft-page page-35" data-id="page-4"><h3><span id="text-38" contenteditable="true">刘钢会感觉自己好幸福。</span><br /><span id="text-39" contenteditable="true">因为自己有了家</span><br /><span id="text-40" contenteditable="true">那个有何松婷在的地方</span></h3><img src="img/iali8.gif" tppabs="img/iali8.gif" /></div><div id="/section-6/page-5" class="ft-page page-36 full-img" data-id="page-5"><h3 id="text-41" contenteditable="true">他们可能偶尔也会吵架</h3><img src="img/iali31.jpg" tppabs="img/iali31.jpg" /></div><div id="/section-6/page-6" class="ft-page page-37 left-img" data-id="page-6"><h3 id="text-42" contenteditable="true">刘钢不想这样</h3><img src="img/iali49.jpg" tppabs="img/iali49.jpg" /></div><div id="/section-6/page-7" class="ft-page page-38 bottom-text" data-id="page-7"><img src="img/iali21.jpg" tppabs="img/iali21.jpg" /><h3 id="text-43" contenteditable="true">一定是我有什么做的不对，刘钢会这么想</h3></div></div><div class="ft-section section-7" data-id="section-7"><div id="/section-7/page-1" class="ft-page page-39 left-img" data-id="page-1"><h3 id="text-44" contenteditable="true">如果没有何松婷在身边，窗外就没有风景</h3><img src="img/iali2.jpg" tppabs="img/iali2.jpg" /></div><div id="/section-7/page-2" class="ft-page page-40" data-id="page-2"><h3 id="text-45" contenteditable="true">如果没有何松婷在身后</h3><img src="img/iali14.jpg" tppabs="img/iali14.jpg"  /></div><div id="/section-7/page-3" class="ft-page page-41" data-id="page-3"><img src="img/iali30_1.jpg" tppabs="img/iali30_1.jpg" class='img1'/><img src="img/iali30_2.jpg" tppabs="img/iali30_2.jpg" class='img2'/><h3 id="text-46" contenteditable="true"> 刘钢又怎会飞的更高更远</h3></div><div id="/section-7/page-4" class="ft-page page-42" data-id="page-4"><h3><span id="text-47" contenteditable="true">刘钢不想这样。他要为何松婷改变自己</span><br /><span id="text-48" contenteditable="true">刘钢不知道何松婷喜欢什么，但他一定会满足她的一切。</span></h3><img src="img/iali69.jpg" tppabs="img/iali69.jpg"  /></div><div id="/section-7/page-5" class="ft-page page-43" data-id="page-5"><img src="img/iali42.jpg" tppabs="img/iali42.jpg" /><h3 id="text-49" contenteditable="true">我愿意一直陪伴着你</h3></div><div id="/section-7/page-6" class="ft-page page-44 left-img" data-id="page-6"><h3><span id="text-50" contenteditable="true">爱情就像花草一样</span><br /><span id="text-51" contenteditable="true">需要用包容来浇灌</span></h3><img src="img/iali0.jpg" tppabs="img/iali0.jpg" /></div><div id="/section-7/page-7" class="ft-page page-45 left-img" data-id="page-7"><h3><span id="text-52" contenteditable="true">直到一天，刘钢不想让自己后悔</span><br /><span id="text-53" contenteditable="true">刘钢开始准备一份惊喜</span></h3><img src="img/iali18.jpg" tppabs="img/iali18.jpg" /></div></div><div class="ft-section section-8" data-id="section-8"><div id="/section-8/page-1" class="ft-page page-46" data-id="page-1"><img src="img/iali57.gif" tppabs="img/iali57.gif" /><h3><span id="text-54" contenteditable="true">看着惊喜一点点准备好了</span><span id="text-55" contenteditable="true">刘钢好开心</span><span id="text-56" contenteditable="true">因为他想象着何松婷看到时</span><span id="text-57" contenteditable="true">开心的样子</span></h3></div><div id="/section-8/page-2" class="ft-page page-47 top-text" data-id="page-2"><img src="img/iali58.jpg" tppabs="img/iali58.jpg" /><h3><span id="text-58" contenteditable="true">想想未来他们或许</span><span id="text-59" contenteditable="true">会有一辈子</span><span id="text-59" contenteditable="true">刘钢好开心</span><span id="text-60" contenteditable="true">或许他可以和何松婷一起</span><span id="text-61" contenteditable="true">去全世界好多地方玩</span></h3></div><div id="/section-8/page-3" class="ft-page page-48 left-img" data-id="page-3"><p><span id="text-62" contenteditable="true">刘钢也会继续努力</span><br /><span id="text-63" contenteditable="true">为了他和何松婷的梦之城堡</span></p><img src="img/iali65.jpg" tppabs="img/iali65.jpg"  /></div><div id="/section-8/page-4" class="ft-page page-49 full-img" data-id="page-4"><img src="img/iali71.jpg" tppabs="img/iali71.jpg" /><p class="text"><span class='text' id="text-64" contenteditable="true">刘钢很幸福，因为他遇到了何松婷。他相信后面的每天都会是快乐的</span><br /><span class='text' id="text-65" contenteditable="true">简简单单，体会与何松婷在一起的每一个刻</span></p></div><div id="/section-8/page-5" class="ft-page page-50" data-id="page-5"><p class='text' id="text-66" contenteditable="true">刘钢想和何松婷一起过幸福的生活</p><img src="img/iali50_1.jpg" tppabs="img/iali50_1.jpg" class='img1' /><img src="img/iali50_2.jpg" tppabs="img/iali50_2.jpg" class='img2' /></div><div id="/section-8/page-6" class="ft-page page-51" data-id="page-6"><p><span id="text-67" contenteditable="true">永远有多远？</span><br /><span id="text-68" contenteditable="true">比时间多一秒就是永远，我会永远爱你</span><br /><span id="text-69" contenteditable="true">世界有多大？</span><br /><span id="text-70" contenteditable="true">你走到哪里，世界就有多大</span></p></div></div><div class="ft-section section-9" data-id="section-9"><div id="/section-9/page-1" class="ft-page page-52 full-img" data-id="page-1"><h3 id="text-71" contenteditable="true">如果三年后你注定是刘钢女朋友，你何不提早行使你的权利</h3><img src="img/iali20.jpg" tppabs="img/iali20.jpg"  /></div><div id="/section-9/page-2" class="ft-page page-53" data-id="page-2"><img src="img/iali68.jpg" tppabs="img/iali68.jpg" alt='happy birthday' /><h3 id="text-72" contenteditable="true">我爱你</h3></div><div id="/section-9/page-3" class="ft-page page-54 center-img" data-id="page-3" ><div class="center-img">I love you</div></div><div id="/section-9/page-4" class="ft-page page-55 right-img" data-id="page-4"><img src="img/14915.jpg" tppabs="img/14915.jpg" /><p class="text"><span id="text-73" contenteditable="true">我相信，刘钢和何松婷的故事会一直继续下去。</span><br /><span id="text-74" contenteditable="true">无论精彩、平淡都会是他们喜欢的。</span><br />                <span id="text-74" contenteditable="true">何松婷，我爱你</span><br /><br /><br /><span> -- 按“Esc"键有惊喜</span></p></div></div></div><!-- <div class="nojavascript">您的浏览器禁用了javascript，无法正常浏览本页面</div> --><audio id="bgmMusic" src="lovebgm.mp3" autoplay="autoplay" loop preload="auto" type="audio/mp3"></audio><script src="jquery.min.js" tppabs="http://libs.baidu.com/jquery/1.8.3/jquery.min.js"></script><script src="all.min.js" ></script><script src="love.min.js" ></script><div class="mPower"><span id="on" title="点击暂停" style=""></span><span id="off" title="点击播放"  style=""></span></div></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv=&#39;Pragma&#39; content=&#39;no-cache&#39; /&gt;
	&lt;meta charset=&quot;UTF-8&quot;&gt;
	&lt;meta name=&quot;viewport&quot; content=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-12-16T06:05:29.655Z</published>
    <updated>2018-01-04T08:04:50.000Z</updated>
    
    <content type="html"><![CDATA[/*! * Brav1Toolbox.js - common utility scripts and polyfills * http://marcolago.com/ * MIT licensed * * Copyright (C) 2012-2013 Marco Lago, http://marcolago.com */var Brav1Toolbox=(function(){var d=["","-webkit-","-moz-","-ms-","-o-"];var i;if(window.getComputedStyle){i=window.getComputedStyle(document.body)}else{i=document.documentElement.style}function k(m,o,n,l){if(m.addEventListener){m.addEventListener(o,n,l)}else{if(m.attachEvent){m.attachEvent(o,n)}}}function g(l){return j(l)!=""}function j(o){for(var l=0;l<d.length;l++){var n=d[l].replace(/-/g,"");var m=o;if(n.length>0){m=m.charAt(0).toUpperCase()+m.substr(1)}m=n+m;if(m in i==true){return m}}return""}function e(l){return !!l&&Object.prototype.toString.call(l).match(/(\w+)\]/)[1]}function h(m,n){if(m.classList){m.classList.add(n)}else{if(f(m,n)==false){var l=m.className;if(l.length>0){l+=" "}m.className=l+n}}}function a(m,n){if(m.classList){m.classList.remove(n)}else{var l=m.className;if(l.indexOf(n)!=-1){if(l.indexOf(" "+n)!=-1){l=l.replace(" "+n,"")}else{if(l.indexOf(n+" ")!=-1){l=l.replace(n+" ","")}else{l=l.replace(n,"")}}}m.className=l}}function f(l,m){if(l){if(l.classList){return l.classList.contains(m)}else{if(l.className){return l.className.indexOf(m)!=-1}}}return false}function c(l,o){if(document.createEvent){var n=document.createEvent("HTMLEvents");n.initEvent(l,true,true);for(var m in o){n[m]=o[m]}document.dispatchEvent(n)}}function b(m,l){var o;var n;o=l.x-m.x;o*=o;n=l.y-m.y;n*=n;return Math.abs(Math.sqrt(o+n))}return{addListener:k,dispatchEvent:c,testCSS:g,getPrefixed:j,typeOf:e,addClass:h,removeClass:a,hasClass:f,distance:b}})();/*! * Flowtime.js * http://marcolago.com/flowtime-js/ * MIT licensed * * Copyright (C) 2012-2013 Marco Lago, http://marcolago.com */var Flowtime=(function(){var l="ontouchstart" in document.documentElement;var aJ=window.history.pushState;var j="ft-section";var aU="."+j;var aM="ft-page";var aK="."+aM;var aG="ft-fragment";var A="."+aG;var ah="revealed";var aI="actual";var ax="revealed-temp";var ak="ft-default-progress";var N="."+ak;var ab="ft-section-thumb";var G="."+ab;var k="ft-page-thumb";var S="."+k;var s="flowtimenavigation";var J=document.querySelector(".flowtime");var aL=document.querySelector("html");var u=document.querySelector("body");var aA=false;var ac="";var D={section:0,page:0};var H=false;var aF=document.title;var O;var aN=22;var az=null;var x=false;var p=true;var C=false;var M=false;var av=false;var aX=false;var aE=false;var ao=false;var h=50;var g=50;var T=document.querySelector(".parallax")!=null;var I=true;try{var m=document.querySelector("html").className.toLowerCase();if(m.indexOf("ie7")!=-1||m.indexOf("ie8")!=-1||m.indexOf("lt-ie9")!=-1){I=false}}catch(aa){I=false}if(I){Brav1Toolbox.addClass(u,"ft-absolute-nav")}var z=(function(){var bN;var bm;var bw;var bJ;var bs;var bC=[];var bt=[];var bB=0;var bZ=0;var bK=0;var bT=0;var bq=0;var bU=0;var bj=0;var bF;function ba(){bm=[];bt=[];bJ=document.querySelectorAll(A);bs=[];bN=J.querySelectorAll(".flowtime > "+aU);bw=J.querySelectorAll(".flowtime "+aK);for(var b2=0;b2<bN.length;b2++){var b0=[];var b6=bN[b2];bs[b2]=[];bC[b2]=[];if(b6.getAttribute("data-id")){b6.setAttribute("data-id","__"+F(b6.getAttribute("data-id")))}b6.setAttribute("data-prog","__"+(b2+1));b6.index=b2;b6.setAttribute("id","");pages=b6.querySelectorAll(aK);bK+=pages.length;bZ=Math.max(bZ,pages.length);for(var b3=0;b3<pages.length;b3++){var b1=pages[b3];if(b1.getAttribute("data-id")){b1.setAttribute("data-id","__"+F(b1.getAttribute("data-id")))}b1.setAttribute("data-prog","__"+(b3+1));b1.index=b3;b1.setAttribute("id","");if(!b1.getAttribute("data-title")){var b5=b1.querySelector("h1");if(b5!=null&&b5.textContent.lenght!=""){b1.setAttribute("data-title",b5.textContent)}}br(b1,b2,b3);b0.push(b1);var b4=b1.querySelectorAll(A);bs[b2][b3]=b4;bC[b2][b3]=-1}bm.push(b0)}bB=bN.length;ad();bk()}function br(b6,b7,b3){if(T){if(bt[b7]==undefined){bt[b7]=[]}if(bt[b7][b3]==undefined){bt[b7][b3]=[]}var b5=b6.querySelectorAll(".parallax");if(b5.length>0){for(var b4=0;b4<b5.length;b4++){var b0=b5[b4];var b2=h;var b1=g;if(b0.getAttribute("data-parallax")!=null){var b8=b0.getAttribute("data-parallax").split(",");b2=b1=b8[0];if(b8.length>1){b1=b8[1]}}b0.pX=b2;b0.pY=b1;bt[b7][b3].push(b0)}}}}function bi(){return bt}function bk(){for(var b1=0;b1<bw.length;b1++){var b0=bw[b1];b0.x=b0.offsetLeft+b0.parentNode.offsetLeft;b0.y=b0.offsetTop+b0.parentNode.offsetTop}}function be(b3,b2,b4){var b1=bq;var b0=b3==!M;if(b2==true&&bs[bT][bq].length>0&&bC[bT][bq]<bs[bT][bq].length-1&&b0!=true&&b4==false){bn(bT,bq)}else{b1=0;if(b0==true&&bT+1<bm.length-1){b1=0}else{if(b0!=true||p==true||bT+1>bm.length-1){b1=bq}}bT=Math.min(bT+1,bm.length-1);return bI(bm[bT],b1,b4)}return bO(bm[bT][bq],b4)}function bM(b3,b2,b4){var b1=bq;var b0=b3==!M;if(b2==true&&bs[bT][bq].length>0&&bC[bT][bq]>=0&&b0!=true&&b4==false){bV(bT,bq)}else{var b1=0;b1=0;if(b0==true&&bT-1>=0){b1=0}else{if(b0!=true||p==true||bT-1<0){b1=bq}}bT=Math.max(bT-1,0);return bI(bm[bT],b1,b4)}return bO(bm[bT][bq],b4)}function bI(b4,b1,b3){var b2=b4[b1];if(b2==undefined){for(var b0=b1;b0>=0;b0--){if(b4[b0]!=undefined){b2=b4[b0];b1=b0;break}}}bq=b1;if(!H){bD()}return bO(b2,b3)}function a9(b0,b1){if(bs[bT][bq].length>0&&bC[bT][bq]<bs[bT][bq].length-1&&b0!=true&&b1==false){bn(bT,bq)}else{if(bm[bT][bq+1]==undefined&&bm[bT+1]!=undefined){bT+=1;bq=0}else{bq=Math.min(bq+1,bm[bT].length-1)}}return bO(bm[bT][bq],b1)}function bW(b0,b1){if(bs[bT][bq].length>0&&bC[bT][bq]>=0&&b0!=true&&b1==false){bV(bT,bq)}else{if(bq==0&&bm[bT-1]!=undefined){bT-=1;bq=bm[bT].length-1}else{bq=Math.max(bq-1,0)}}return bO(bm[bT][bq],b1)}function bO(b0,b1){if(b1==true){bb(b0);return}else{return b0}}function bn(b0,b2,b3){if(b3!=undefined){bC[b0][b2]=b3}else{b3=bC[b0][b2]+=1}for(var b1=0;b1<=b3;b1++){Brav1Toolbox.addClass(bs[b0][b2][b1],ah);Brav1Toolbox.removeClass(bs[b0][b2][b1],aI)}Brav1Toolbox.addClass(bs[b0][b2][b3],aI)}function bV(b0,b2,b3){if(b3!=undefined){bC[b0][b2]=b3}else{b3=bC[b0][b2]}for(var b1=0;b1<bs[b0][b2].length;b1++){if(b1>=b3){Brav1Toolbox.removeClass(bs[b0][b2][b1],ah);Brav1Toolbox.removeClass(bs[b0][b2][b1],ax)}Brav1Toolbox.removeClass(bs[b0][b2][b1],aI)}b3-=1;if(b3>=0){Brav1Toolbox.addClass(bs[b0][b2][b3],aI)}bC[b0][b2]=b3}function bg(){for(var b0=0;b0<bJ.length;b0++){Brav1Toolbox.addClass(bJ[b0],ax)}}function bv(){for(var b0=0;b0<bJ.length;b0++){Brav1Toolbox.removeClass(bJ[b0],ax)}}function bD(){for(var b4=0;b4<bs.length;b4++){var b1=bs[b4];for(var b2=0;b2<b1.length;b2++){var b0=b1[b2];if(b0.length>0){if(b4>bT){for(var b3=b0.length-1;b3>=0;b3--){bV(b4,b2,b3)}}else{if(b4<bT){for(var b3=0;b3<b0.length;b3++){bn(b4,b2,b3)}}else{if(b4==bT){if(b2>bq){for(var b3=b0.length-1;b3>=0;b3--){bV(b4,b2,b3)}}else{if(b2<bq){for(var b3=0;b3<b0.length;b3++){bn(b4,b2,b3)}}else{if(b2==bq){if(p==true&&(D.section>z.getPageIndex().section||D.page>z.getPageIndex().page)){for(var b3=0;b3<b0.length;b3++){bn(b4,b2,b3)}}else{for(var b3=b0.length-1;b3>=0;b3--){bV(b4,b2,b3)}}if(p==false){bC[b4][b2]=-1}else{if(D.section>z.getPageIndex().section||D.page>z.getPageIndex().page){bC[b4][b2]=b0.length-1}else{bC[b4][b2]=-1}}}}}}}}}}}}function bp(b0){if(b0){}return bT}function a8(b0){if(b0){}return bq}function bR(){return bN}function bx(b0){return bm[b0]}function bz(){return bw}function bY(){return bB}function bE(){return bZ}function bA(){return bK}function bL(b2){var b1=bT;var b0=bq;if(b2!=undefined){b1=b2.parentNode.index;b0=b2.index}return{section:b1,page:b0}}function bS(b0){return bN[b0]}function bu(b0,b1){return bm[b1][b0]}function bh(){return bN[bT]}function bP(){return bm[bT][bq]}function bH(){return bs[bT][bq][e()]}function e(){return bC[bT][bq]}function by(){return bT<bN.length-1}function bf(){return bT>0}function bl(){return bq<bm[bT].length-1}function bd(){return bq>0}function bG(){if(bT==0&&bq==0){return 0}var b1=0;for(var b0=0;b0<bT;b0++){b1+=bm[b0].length}b1+=bm[bT][bq].index+1;return b1}function bQ(b3){if(b3!=undefined){bq=bL(b3).page;bT=bL(b3).section}var b2="";var b0=bN[bT];b2+=d(b0);if(bm[bT].length>1){var b1=bm[bT][bq];b2+="/"+d(b1)}return b2}function bc(b4){var b5=aZ(b4);if(b5){var b1=b5.parentNode;for(var b0=0;b0<bm.length;b0++){var b3=bm[b0];if(bN[b0]===b1){bT=b0;for(var b2=0;b2<b3.length;b2++){if(b3[b2]===b5){bq=b2;break}}}}bD()}return b5}function bb(b6,b0){var b4=b6.parentNode.index;for(var b1=0;b1<bm.length;b1++){var b3=bm[b1];for(var b2=0;b2<b3.length;b2++){var b5=b3[b2];Brav1Toolbox.removeClass(b5,"past-section");Brav1Toolbox.removeClass(b5,"future-section");Brav1Toolbox.removeClass(b5,"past-page");Brav1Toolbox.removeClass(b5,"future-page");if(b5!==b6){Brav1Toolbox.removeClass(b5,"hilite");if(H==false&&b5!==bP()){Brav1Toolbox.removeClass(b5,"actual")}if(b1<b4){Brav1Toolbox.addClass(b5,"past-section")}else{if(b1>b4){Brav1Toolbox.addClass(b5,"future-section")}}if(b5.index<b6.index){Brav1Toolbox.addClass(b5,"past-page")}else{if(b5.index>b6.index){Brav1Toolbox.addClass(b5,"future-page")}}}}}Brav1Toolbox.addClass(b6,"hilite");if(b0){bX(b6)}bF=b6}function bo(){return bF}function bX(b0){Brav1Toolbox.addClass(b0,"actual")}ba();return{update:ba,updateFragments:bD,showFragments:bg,hideFragments:bv,getSection:bp,getPage:a8,getSections:bR,getPages:bx,getAllPages:bz,getNextSection:be,getPrevSection:bM,getNextPage:a9,getPrevPage:bW,getSectionsLength:bY,getPagesLength:bE,getPagesTotalLength:bA,getPageIndex:bL,getSectionByIndex:bS,getPageByIndex:bu,getCurrentSection:bh,getCurrentPage:bP,getCurrentFragment:bH,getCurrentFragmentIndex:e,getProgress:bG,getHash:bQ,setPage:bc,switchActivePage:bb,getCurrentHilited:bo,hasNextSection:by,hasPrevSection:bf,hasNextPage:bl,hasPrevPage:bd,updateOffsets:bk,getParallaxElements:bi}})();if(I){if(l){Brav1Toolbox.addListener(document,"touchend",a7,false)}else{Brav1Toolbox.addListener(document,"click",a7,false)}}function a7(bd){var a9=bd.target.getAttribute("href");if(a9&&a9.substr(0,1)=="#"){bd.target.blur();bd.preventDefault();var bc=a9;var ba=z.setPage(bc);V(ba,true,true)}if(H){var ba=bd.target;while(ba&&!Brav1Toolbox.hasClass(ba,aM)){ba=ba.parentNode}if(Brav1Toolbox.hasClass(ba,aM)){bd.preventDefault();V(ba,null,true)}}if(Brav1Toolbox.hasClass(bd.target,k)){bd.preventDefault();var bb=Number(F(bd.target.getAttribute("data-section")));var a8=Number(F(bd.target.getAttribute("data-page")));aB(bb,a8)}}if(aA==false&&window.history.pushState){window.onpopstate=B}else{aA=true}function B(ba){aA=false;var a9;if(ba.state){a9=ba.state.token.replace("#/","")}else{a9=document.location.hash.replace("#/","")}var a8=z.setPage(a9);V(a8,false)}Brav1Toolbox.addListener(window,"hashchange",L);function L(ba,bb){if(aA||bb){var a9=document.location.hash.replace("#/","");var a8=z.setPage(a9);V(a8,false)}}var a6=J.offsetX;var a4=0;var Z=0;var W=0;var au=0;var ar=0;var aq=0;var aS="x";var y=100;aL.addEventListener("touchstart",aP,false);aL.addEventListener("touchmove",aY,false);aL.addEventListener("touchend",Y,false);function aP(a8){au=0;ar=0;a8.preventDefault();a8=an(a8);Z=a8.clientX;W=a8.clientY;aq=1;var a9=v();a6=a9.x;a4=a9.y}function aY(a8){a8.preventDefault();a8=an(a8);au=a8.clientX-Z;ar=a8.clientY-W}function Y(a8){a8=an(a8);aq=0;aS=Math.abs(au)>=Math.abs(ar)?"x":"y";if(aS=="x"&&Math.abs(au)>=y){if(au>0){b();return}else{if(au<0){K();return}}}else{if(ar>0&&Math.abs(ar)>=y){aH();return}else{if(ar<0){ae();return}}}}function an(a8){if(a8.touches){a8=a8.touches[0]}return a8}function v(){var bb=J.style[Brav1Toolbox.getPrefixed("transform")];var ba=bb.indexOf("translateX(")+11;var a8=bb.substring(ba,bb.indexOf(")",ba));if(a8.indexOf("%")!=-1){a8=a8.replace("%","");a8=(parseInt(a8)/100)*window.innerWidth}else{if(a8.indexOf("px")!=-1){a8=parseInt(a8.replace("px",""))}}var a9=bb.indexOf("translateY(")+11;var e=bb.substring(a9,bb.indexOf(")",a9));if(e.indexOf("%")!=-1){e=e.replace("%","");e=(parseInt(e)/100)*window.innerHeight}else{if(e.indexOf("px")!=-1){e=parseInt(e.replace("px",""))}}return{x:a8,y:e}}var P=true;Brav1Toolbox.addListener(window,"scroll",f);function f(a8){a8.preventDefault();ad()}var aR=(function n(){var ba=NaN;function a9(){e();if(!H){ba=setTimeout(a8,300)}}function e(){clearTimeout(ba)}function a8(){z.updateOffsets();V()}Brav1Toolbox.addListener(window,"resize",a9);window.addEventListener("orientationchange",a9,false);return{enable:a9,disable:e,}})();function aZ(a8){if(a8.length>0){var e=a8.replace("#/","").split("/");var ba=document.querySelector(aU+"[data-id=__"+e[0]+"]")||document.querySelector(aU+"[data-prog=__"+e[0]+"]");if(ba!=null){var a9=null;if(e.length>1){a9=ba.querySelector(aK+"[data-id=__"+e[1]+"]")||ba.querySelector(aK+"[data-prog=__"+e[1]+"]")}if(a9==null){a9=ba.querySelector(aK)}return a9}}return}function aQ(){z.update();L(null,true)}function a1(bb){var ba=aF;var e=z.getCurrentPage().getAttribute("data-title");if(e==null){var a9=bb.split("/");for(var a8=0;a8<a9.length;a8++){ba+=" | "+a9[a8]}}else{if(z.getCurrentSection().getAttribute("data-title")!=null){ba+=" | "+z.getCurrentSection().getAttribute("data-title")}ba+=" | "+e}document.title=ba}function d(e){return(e.getAttribute("data-id")!=null?e.getAttribute("data-id").replace(/__/,""):e.getAttribute("data-prog").replace(/__/,""))}function aV(e){if(e.substr(0,2)!="__"){return"__"+e}else{return e}}function F(e){if(e.substr(0,2)=="__"){return e.replace(/__/,"")}else{return e}}function V(bb,ba,bd){ba=ba==false?ba:true;if(!bb){if(z.getCurrentPage()!=null){bb=z.getCurrentPage()}else{bb=document.querySelector(aK)}ba=true}a3(bb);t(bb);if(H){af(false,false)}var bc=z.getHash(bb);if(bd==true){z.updateFragments()}var e=z.getPageIndex(bb);if(D.section!=e.section||D.page!=e.page){if(aJ!=null&&ba!=false&&z.getCurrentFragmentIndex()==-1){var a9={token:bc};var a8="#/"+bc;ac=a8;window.history.pushState(a9,null,ac)}else{document.location.hash="/"+bc}}a1(bc);aO();D=e;z.switchActivePage(bb,true);if(aE){a5()}}function aO(){var e=z.getPageIndex();Brav1Toolbox.dispatchEvent(s,{section:z.getCurrentSection(),page:z.getCurrentPage(),sectionIndex:e.section,pageIndex:e.page,pastSectionIndex:D.section,pastPageIndex:D.page,prevSection:z.hasPrevSection(),nextSection:z.hasNextSection(),prevPage:z.hasPrevPage(),nextPage:z.hasNextPage(),fragment:z.getCurrentFragment(),fragmentIndex:z.getCurrentFragmentIndex(),isOverview:H,progress:z.getProgress(),total:z.getPagesTotalLength()})}function a3(a9){var a8;var ba;var e=z.getPageIndex(a9);if(C==true){a8=a9.x;ba=a9.y}else{a8=e.section;ba=e.page}if(Brav1Toolbox.testCSS("transform")){if(C){J.style[Brav1Toolbox.getPrefixed("transform")]="translateX("+-a8+"px) translateY("+-ba+"px)"}else{J.style[Brav1Toolbox.getPrefixed("transform")]="translateX("+-a8*100+"%) translateY("+-ba*100+"%)"}}else{if(C){J.style.top=-ba+"px";J.style.left=-a8+"px"}else{J.style.top=-ba*100+"%";J.style.left=-a8*100+"%"}}ad()}function t(be){if(T){var a9=z.getPageIndex(be);var bd=z.getParallaxElements();for(var bb=0;bb<bd.length;bb++){var ba=bd[bb];if(ba!=undefined){for(var bg=0;bg<ba.length;bg++){var bf=ba[bg];if(bf!=undefined){for(var bc=0;bc<bf.length;bc++){var bh=bf[bc];var a8=0;var e=0;if(a9.section<bb){a8=bh.pX}else{if(a9.section>bb){a8=-bh.pX}}if(a9.page<bg){e=bh.pY}else{if(a9.page>bg){e=-bh.pY}}if(ao){bh.style[Brav1Toolbox.getPrefixed("transform")]="translateX("+a8+"px) translateY("+e+"px)"}else{bh.style[Brav1Toolbox.getPrefixed("transform")]="translateX("+a8+"%) translateY("+e+"%)"}}}}}}}}function ad(){window.scrollTo(0,0)}var az=null;var aw=null;function aW(){var a8=document.createDocumentFragment();az=document.createElement("div");az.className=ak;a8.appendChild(az);for(var ba=0;ba<z.getSectionsLength();ba++){var e=document.createElement("div");e.setAttribute("data-section","__"+ba);e.className=ab;Brav1Toolbox.addClass(e,"thumb-section-"+ba);var a9=z.getPages(ba);for(var bb=0;bb<a9.length;bb++){var bc=document.createElement("div");bc.className=k;bc.setAttribute("data-section","__"+ba);bc.setAttribute("data-page","__"+bb);Brav1Toolbox.addClass(bc,"thumb-page-"+bb);e.appendChild(bc)}az.appendChild(e)}u.appendChild(az)}function w(){if(az!=null){u.removeChild(az);az=null}}function a5(){if(az!=null){var ba=az.querySelectorAll(S);for(var a9=0;a9<ba.length;a9++){var bb=ba[a9];var a8=Number(F(bb.getAttribute("data-section")));var e=Number(F(bb.getAttribute("data-page")));if(a8==z.getPageIndex().section&&e==z.getPageIndex().page){Brav1Toolbox.addClass(ba[a9],"actual")}else{Brav1Toolbox.removeClass(ba[a9],"actual")}}}}function ag(){return az}function af(e,a8){if(H){o(e,a8)}else{O=z.getCurrentPage();U()}}function o(e,a8){H=false;Brav1Toolbox.removeClass(u,"ft-overview");z.hideFragments();a8=a8===false?false:true;if(a8==true){if(e==true){V(O)}else{V()}}}function U(){H=true;Brav1Toolbox.addClass(u,"ft-overview");z.showFragments();if(av==false){R(true)}else{Q(true)}aO()}function R(ba){if(ba){var a9=100/z.getSectionsLength();var a8=100/z.getPagesLength();var bb=Math.min(a9,a8)*0.9;var e=(100-z.getSectionsLength()*bb)/2;var bc=(100-z.getPagesLength()*bb)/2;J.style[Brav1Toolbox.getPrefixed("transform")]="translate("+e+"%, "+bc+"%) scale("+bb/100+", "+bb/100+")"}}function Q(a8){if(a8){var ba=aN;var a9=z.getPageIndex();var e=50-(ba*a9.section)-(ba/2);var bb=50-(ba*a9.page)-(ba/2);J.style[Brav1Toolbox.getPrefixed("transform")]="translate("+e+"%, "+bb+"%) scale("+ba/100+", "+ba/100+")"}}Brav1Toolbox.addListener(window,"keydown",E);Brav1Toolbox.addListener(window,"keyup",ay);function E(a9){var a8=a9.target.tagName;if(a8!="INPUT"&&a8!="TEXTAREA"&&a8!="SELECT"){if(a9.keyCode>=37&&a9.keyCode<=40){a9.preventDefault()}}}function ay(ba){var a8=ba.target.tagName;var a9;if(a8!="INPUT"&&a8!="TEXTAREA"&&a8!="SELECT"){ba.preventDefault();switch(ba.keyCode){case 27:af(true);break;case 33:c();break;case 34:aj();break;case 35:aD();break;case 36:i();break;case 37:b(ba.shiftKey);break;case 39:K(ba.shiftKey);break;case 38:aH(ba.shiftKey);break;case 40:ae(ba.shiftKey);break;case 13:if(H){aB(z.getCurrentHilited())}break;default:break}}}function a(){if(aE&&az==null){aW()}if(document.location.hash.length>0){Brav1Toolbox.addClass(J,"no-transition");L(null,true);Brav1Toolbox.removeClass(J,"no-transition")}else{if(a.arguments.length>0){aB.apply(this,a.arguments)}else{aB(0,0);a5()}}}function K(e){var a8=z.getNextSection(e,x,H);if(a8!=undefined){V(a8)}else{if(H&&av){U()}}}function b(e){var a8=z.getPrevSection(e,x,H);if(a8!=undefined){V(a8)}else{if(H&&av){U()}}}function ae(e){var a8=z.getNextPage(e,H);if(a8!=undefined){V(a8)}else{if(H&&av){U()}}}function aH(e){var a8=z.getPrevPage(e,H);if(a8!=undefined){V(a8)}else{if(H&&av){U()}}}function aB(){var a8=aB.arguments;if(a8.length>0){if(a8.length==1){if(Brav1Toolbox.typeOf(a8[0])==="Object"){var bc=a8[0];var bb=bc.section;var ba=bc.page;if(bb!=null&&bb!=undefined){var e=document.querySelector(aU+"[data-id="+aV(bb)+"]");if(ba!=null&&ba!=undefined){var a9=e.querySelector(aK+"[data-id="+aV(ba)+"]");if(a9!=null){V(a9);return}}}}else{if(a8[0].nodeName!=undefined){V(a8[0],null,true)}}}if(Brav1Toolbox.typeOf(a8[0])==="Number"||a8[0]===0){var a9=z.getPageByIndex(a8[1],a8[0]);V(a9);return}}}function i(){aB(0,0)}function aD(){var e=z.getSectionsLength()-1;aB(e,z.getPages(e).length-1)}function c(){var e=z.getPageIndex();aB(e.section,0)}function aj(){var e=z.getPageIndex();aB(e.section,z.getPages(e.section).length-1)}function am(a9,a8,e){Brav1Toolbox.addListener(document,a9,a8,e)}function ap(e){x=e;ai(e)}function ai(e){p=e}function a0(e){aJ=e}function a2(e){C=e;V()}function r(e){M=e}function q(e){M=!e}function X(e){av=e}function al(e){aX=e}function aT(e){aE=e;if(aE){if(az==null){aW()}a5()}else{if(az!=null){w()}}}function at(e,a8){h=e;g=a8==undefined?h:a8;z.update()}function aC(e){ao=e}return{start:a,updateNavigation:aQ,nextSection:K,prevSection:b,next:ae,prev:aH,nextFragment:ae,prevFragment:aH,gotoPage:aB,gotoHome:i,gotoTop:c,gotoBottom:aj,gotoEnd:aD,toggleOverview:af,fragmentsOnSide:ap,fragmentsOnBack:ai,useHistory:a0,slideInPx:a2,sectionsSlideToTop:r,gridNavigation:q,useOverviewVariant:X,twoStepsSlide:al,showProgress:aT,addEventListener:am,defaultParallaxValues:at,parallaxInPx:aC,getDefaultProgress:ag}})();(function(h,o,g){var p=function(){for(var b=/audio(.min)?.js.*/,a=document.getElementsByTagName("script"),c=0,d=a.length;c<d;c++){var e=a[c].getAttribute("src");if(b.test(e))return e.replace(b,"")}}();g[h]={instanceCount:0,instances:{},flashSource:'      <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="$1" width="1" height="1" name="$1" style="position: absolute; left: -1px;">         <param name="movie" value="$2?playerInstance='+h+'.instances[\'$1\']&datetime=$3">         <param name="allowscriptaccess" value="always">         <embed name="$1" src="$2?playerInstance='+h+'.instances[\'$1\']&datetime=$3" width="1" height="1" allowscriptaccess="always">       </object>',settings:{autoplay:false,loop:false,preload:true,imageLocation:p+"player-graphics.gif",swfLocation:p+"audiojs.swf",useFlash:function(){var b=document.createElement("audio");return!(b.canPlayType&&b.canPlayType("audio/mpeg;").replace(/no/,""))}(),hasFlash:function(){if(navigator.plugins&&navigator.plugins.length&&navigator.plugins["Shockwave Flash"])return true;else if(navigator.mimeTypes&&navigator.mimeTypes.length){var b=navigator.mimeTypes["application/x-shockwave-flash"];return b&&b.enabledPlugin}else try{new ActiveXObject("ShockwaveFlash.ShockwaveFlash");return true}catch(a){}return false}(),createPlayer:{markup:'          <div class="play-pause">             <p class="play"></p>             <p class="pause"></p>             <p class="loading"></p>             <p class="error"></p>           </div>           <div class="scrubber">             <div class="progress"></div>             <div class="loaded"></div>           </div>           <div class="time">             <em class="played">00:00</em>/<strong class="duration">00:00</strong>           </div>           <div class="error-message"></div>',playPauseClass:"play-pause",scrubberClass:"scrubber",progressClass:"progress",loaderClass:"loaded",timeClass:"time",durationClass:"duration",playedClass:"played",errorMessageClass:"error-message",playingClass:"playing",loadingClass:"loading",errorClass:"error"},css:'        .audiojs audio { position: absolute; left: -1px; }         .audiojs { width: 460px; height: 36px; background: #404040; overflow: hidden; font-family: monospace; font-size: 12px;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #444), color-stop(0.5, #555), color-stop(0.51, #444), color-stop(1, #444));           background-image: -moz-linear-gradient(center top, #444 0%, #555 50%, #444 51%, #444 100%);           -webkit-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); -moz-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3);           -o-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); }         .audiojs .play-pause { width: 25px; height: 40px; padding: 4px 6px; margin: 0px; float: left; overflow: hidden; border-right: 1px solid #000; }         .audiojs p { display: none; width: 25px; height: 40px; margin: 0px; cursor: pointer; }         .audiojs .play { display: block; }         .audiojs .scrubber { position: relative; float: left; width: 280px; background: #5a5a5a; height: 14px; margin: 10px; border-top: 1px solid #3f3f3f; border-left: 0px; border-bottom: 0px; overflow: hidden; }         .audiojs .progress { position: absolute; top: 0px; left: 0px; height: 14px; width: 0px; background: #ccc; z-index: 1;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #ccc), color-stop(0.5, #ddd), color-stop(0.51, #ccc), color-stop(1, #ccc));           background-image: -moz-linear-gradient(center top, #ccc 0%, #ddd 50%, #ccc 51%, #ccc 100%); }         .audiojs .loaded { position: absolute; top: 0px; left: 0px; height: 14px; width: 0px; background: #000;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #222), color-stop(0.5, #333), color-stop(0.51, #222), color-stop(1, #222));           background-image: -moz-linear-gradient(center top, #222 0%, #333 50%, #222 51%, #222 100%); }         .audiojs .time { float: left; height: 36px; line-height: 36px; margin: 0px 0px 0px 6px; padding: 0px 6px 0px 12px; border-left: 1px solid #000; color: #ddd; text-shadow: 1px 1px 0px rgba(0, 0, 0, 0.5); }         .audiojs .time em { padding: 0px 2px 0px 0px; color: #f9f9f9; font-style: normal; }         .audiojs .time strong { padding: 0px 0px 0px 2px; font-weight: normal; }         .audiojs .error-message { float: left; display: none; margin: 0px 10px; height: 36px; width: 400px; overflow: hidden; line-height: 36px; white-space: nowrap; color: #fff;           text-overflow: ellipsis; -o-text-overflow: ellipsis; -icab-text-overflow: ellipsis; -khtml-text-overflow: ellipsis; -moz-text-overflow: ellipsis; -webkit-text-overflow: ellipsis; }         .audiojs .error-message a { color: #eee; text-decoration: none; padding-bottom: 1px; border-bottom: 1px solid #999; white-space: wrap; }                 .audiojs .play { background: url("$1") -2px -1px no-repeat; }         .audiojs .loading { background: url("$1") -2px -31px no-repeat; }         .audiojs .error { background: url("$1") -2px -61px no-repeat; }         .audiojs .pause { background: url("$1") -2px -91px no-repeat; }                 .playing .play, .playing .loading, .playing .error { display: none; }         .playing .pause { display: block; }                 .loading .play, .loading .pause, .loading .error { display: none; }         .loading .loading { display: block; }                 .error .time, .error .play, .error .pause, .error .scrubber, .error .loading { display: none; }         .error .error { display: block; }         .error .play-pause p { cursor: auto; }         .error .error-message { display: block; }',trackEnded:function(){},flashError:function(){var b=this.settings.createPlayer,a=j(b.errorMessageClass,this.wrapper),c='Missing <a href="http://get.adobe.com/flashplayer/">flash player</a> plugin.';if(this.mp3)c+=' <a href="'+this.mp3+'">Download audio file</a>.';g[h].helpers.removeClass(this.wrapper,b.loadingClass);g[h].helpers.addClass(this.wrapper,b.errorClass);a.innerHTML=c},loadError:function(){var b=this.settings.createPlayer,a=j(b.errorMessageClass,this.wrapper);g[h].helpers.removeClass(this.wrapper,b.loadingClass);g[h].helpers.addClass(this.wrapper,b.errorClass);a.innerHTML='Error loading: "'+this.mp3+'"'},init:function(){g[h].helpers.addClass(this.wrapper,this.settings.createPlayer.loadingClass)},loadStarted:function(){var b=this.settings.createPlayer,a=j(b.durationClass,this.wrapper),c=Math.floor(this.duration/60),d=Math.floor(this.duration%60);g[h].helpers.removeClass(this.wrapper,b.loadingClass);a.innerHTML=(c<10?"0":"")+c+":"+(d<10?"0":"")+d},loadProgress:function(b){var a=this.settings.createPlayer,c=j(a.scrubberClass,this.wrapper);j(a.loaderClass,this.wrapper).style.width=c.offsetWidth*b+"px"},playPause:function(){this.playing?this.settings.play():this.settings.pause()},play:function(){g[h].helpers.addClass(this.wrapper,this.settings.createPlayer.playingClass)},pause:function(){g[h].helpers.removeClass(this.wrapper,this.settings.createPlayer.playingClass)},updatePlayhead:function(b){var a=this.settings.createPlayer,c=j(a.scrubberClass,this.wrapper);j(a.progressClass,this.wrapper).style.width=c.offsetWidth*b+"px";a=j(a.playedClass,this.wrapper);c=this.duration*b;b=Math.floor(c/60);c=Math.floor(c%60);a.innerHTML=(b<10?"0":"")+b+":"+(c<10?"0":"")+c}},create:function(b,a){a=a||{};return b.length?this.createAll(a,b):this.newInstance(b,a)},createAll:function(b,a){var c=a||document.getElementsByTagName("audio"),d=[];b=b||{};for(var e=0,i=c.length;e<i;e++)d.push(this.newInstance(c[e],b));return d},newInstance:function(b,a){var c=this.helpers.clone(this.settings),d="audiojs"+this.instanceCount,e="audiojs_wrapper"+this.instanceCount;this.instanceCount++;if(b.getAttribute("autoplay")!=null)c.autoplay=true;if(b.getAttribute("loop")!=null)c.loop=true;if(b.getAttribute("preload")=="none")c.preload=false;a&&this.helpers.merge(c,a);if(c.createPlayer.markup)b=this.createPlayer(b,c.createPlayer,e);else b.parentNode.setAttribute("id",e);e=new g[o](b,c);c.css&&this.helpers.injectCss(e,c.css);if(c.useFlash&&c.hasFlash){this.injectFlash(e,d);this.attachFlashEvents(e.wrapper,e)}else c.useFlash&&!c.hasFlash&&this.settings.flashError.apply(e);if(!c.useFlash||c.useFlash&&c.hasFlash)this.attachEvents(e.wrapper,e);return this.instances[d]=e},createPlayer:function(b,a,c){var d=document.createElement("div"),e=b.cloneNode(true);d.setAttribute("class","audiojs");d.setAttribute("className","audiojs");d.setAttribute("id",c);if(e.outerHTML&&!document.createElement("audio").canPlayType){e=this.helpers.cloneHtml5Node(b);d.innerHTML=a.markup;d.appendChild(e);b.outerHTML=d.outerHTML;d=document.getElementById(c)}else{d.appendChild(e);d.innerHTML+=a.markup;b.parentNode.replaceChild(d,b)}return d.getElementsByTagName("audio")[0]},attachEvents:function(b,a){if(a.settings.createPlayer){var c=a.settings.createPlayer,d=j(c.playPauseClass,b),e=j(c.scrubberClass,b);g[h].events.addListener(d,"click",function(){a.playPause.apply(a)});g[h].events.addListener(e,"click",function(i){i=i.clientX;var f=this,k=0;if(f.offsetParent){do k+=f.offsetLeft;while(f=f.offsetParent)}a.skipTo((i-k)/e.offsetWidth)});if(!a.settings.useFlash){g[h].events.trackLoadProgress(a);g[h].events.addListener(a.element,"timeupdate",function(){a.updatePlayhead.apply(a)});g[h].events.addListener(a.element,"ended",function(){a.trackEnded.apply(a)});g[h].events.addListener(a.source,"error",function(){clearInterval(a.readyTimer);clearInterval(a.loadTimer);a.settings.loadError.apply(a)})}}},attachFlashEvents:function(b,a){a.swfReady=false;a.load=function(c){a.mp3=c;a.swfReady&&a.element.load(c)};a.loadProgress=function(c,d){a.loadedPercent=c;a.duration=d;a.settings.loadStarted.apply(a);a.settings.loadProgress.apply(a,[c])};a.skipTo=function(c){if(!(c>a.loadedPercent)){a.updatePlayhead.call(a,[c]);a.element.skipTo(c)}};a.updatePlayhead=function(c){a.settings.updatePlayhead.apply(a,[c])};a.play=function(){if(!a.settings.preload){a.settings.preload=true;a.element.init(a.mp3)}a.playing=true;a.element.pplay();a.settings.play.apply(a)};a.pause=function(){a.playing=false;a.element.ppause();a.settings.pause.apply(a)};a.setVolume=function(c){a.element.setVolume(c)};a.loadStarted=function(){a.swfReady=true;a.settings.preload&&a.element.init(a.mp3);a.settings.autoplay&&a.play.apply(a)}},injectFlash:function(b,a){var c=this.flashSource.replace(/\$1/g,a);c=c.replace(/\$2/g,b.settings.swfLocation);c=c.replace(/\$3/g,+new Date+Math.random());var d=b.wrapper.innerHTML,e=document.createElement("div");e.innerHTML=c+d;b.wrapper.innerHTML=e.innerHTML;b.element=this.helpers.getSwf(a)},helpers:{merge:function(b,a){for(attr in a)if(b.hasOwnProperty(attr)||a.hasOwnProperty(attr))b[attr]=a[attr]},clone:function(b){if(b==null||typeof b!=="object")return b;var a=new b.constructor,c;for(c in b)a[c]=arguments.callee(b[c]);return a},addClass:function(b,a){RegExp("(\\s|^)"+a+"(\\s|$)").test(b.className)||(b.className+=" "+a)},removeClass:function(b,a){b.className=b.className.replace(RegExp("(\\s|^)"+a+"(\\s|$)")," ")},injectCss:function(b,a){for(var c="",d=document.getElementsByTagName("style"),e=a.replace(/\$1/g,b.settings.imageLocation),i=0,f=d.length;i<f;i++){var k=d[i].getAttribute("title");if(k&&~k.indexOf("audiojs")){f=d[i];if(f.innerHTML===e)return;c=f.innerHTML;break}}d=document.getElementsByTagName("head")[0];i=d.firstChild;f=document.createElement("style");if(d){f.setAttribute("type","text/css");f.setAttribute("title","audiojs");if(f.styleSheet)f.styleSheet.cssText=c+e;else f.appendChild(document.createTextNode(c+e));i?d.insertBefore(f,i):d.appendChild(styleElement)}},cloneHtml5Node:function(b){var a=document.createDocumentFragment(),c=a.createElement?a:document;c.createElement("audio");c=c.createElement("div");a.appendChild(c);c.innerHTML=b.outerHTML;return c.firstChild},getSwf:function(b){b=document[b]||window[b];return b.length>1?b[b.length-1]:b}},events:{memoryLeaking:false,listeners:[],addListener:function(b,a,c){if(b.addEventListener)b.addEventListener(a,c,false);else if(b.attachEvent){this.listeners.push(b);if(!this.memoryLeaking){window.attachEvent("onunload",function(){if(this.listeners)for(var d=0,e=this.listeners.length;d<e;d++)g[h].events.purge(this.listeners[d])});this.memoryLeaking=true}b.attachEvent("on"+a,function(){c.call(b,window.event)})}},trackLoadProgress:function(b){if(b.settings.preload){var a,c;b=b;var d=/(ipod|iphone|ipad)/i.test(navigator.userAgent);a=setInterval(function(){if(b.element.readyState>-1)d||b.init.apply(b);if(b.element.readyState>1){b.settings.autoplay&&b.play.apply(b);clearInterval(a);c=setInterval(function(){b.loadProgress.apply(b);b.loadedPercent>=1&&clearInterval(c)})}},10);b.readyTimer=a;b.loadTimer=c}},purge:function(b){var a=b.attributes,c;if(a)for(c=0;c<a.length;c+=1)if(typeof b[a[c].name]==="function")b[a[c].name]=null;if(a=b.childNodes)for(c=0;c<a.length;c+=1)purge(b.childNodes[c])},ready:function(){return function(b){var a=window,c=false,d=true,e=a.document,i=e.documentElement,f=e.addEventListener?"addEventListener":"attachEvent",k=e.addEventListener?"removeEventListener":"detachEvent",n=e.addEventListener?"":"on",m=function(l){if(!(l.type=="readystatechange"&&e.readyState!="complete")){(l.type=="load"?a:e)[k](n+l.type,m,false);if(!c&&(c=true))b.call(a,l.type||l)}},q=function(){try{i.doScroll("left")}catch(l){setTimeout(q,50);return}m("poll")};if(e.readyState=="complete")b.call(a,"lazy");else{if(e.createEventObject&&i.doScroll){try{d=!a.frameElement}catch(r){}d&&q()}e[f](n+"DOMContentLoaded",m,false);e[f](n+"readystatechange",m,false);a[f](n+"load",m,false)}}}()}};g[o]=function(b,a){this.element=b;this.wrapper=b.parentNode;this.source=b.getElementsByTagName("source")[0]||b;this.mp3=function(c){var d=c.getElementsByTagName("source")[0];return c.getAttribute("src")||(d?d.getAttribute("src"):null)}(b);this.settings=a;this.loadStartedCalled=false;this.loadedPercent=0;this.duration=1;this.playing=false};g[o].prototype={updatePlayhead:function(){this.settings.updatePlayhead.apply(this,[this.element.currentTime/this.duration])},skipTo:function(b){if(!(b>this.loadedPercent)){this.element.currentTime=this.duration*b;this.updatePlayhead()}},load:function(b){this.loadStartedCalled=false;this.source.setAttribute("src",b);this.element.load();this.mp3=b;g[h].events.trackLoadProgress(this)},loadError:function(){this.settings.loadError.apply(this)},init:function(){this.settings.init.apply(this)},loadStarted:function(){if(!this.element.duration)return false;this.duration=this.element.duration;this.updatePlayhead();this.settings.loadStarted.apply(this)},loadProgress:function(){if(this.element.buffered!=null&&this.element.buffered.length){if(!this.loadStartedCalled)this.loadStartedCalled=this.loadStarted();this.loadedPercent=this.element.buffered.end(this.element.buffered.length-1)/this.duration;this.settings.loadProgress.apply(this,[this.loadedPercent])}},playPause:function(){this.playing?this.pause():this.play()},play:function(){/(ipod|iphone|ipad)/i.test(navigator.userAgent)&&this.element.readyState==0&&this.init.apply(this);if(!this.settings.preload){this.settings.preload=true;this.element.setAttribute("preload","auto");g[h].events.trackLoadProgress(this)}this.playing=true;this.element.play();this.settings.play.apply(this)},pause:function(){this.playing=false;this.element.pause();this.settings.pause.apply(this)},setVolume:function(b){this.element.volume=b},trackEnded:function(){this.skipTo.apply(this,[0]);this.settings.loop||this.pause.apply(this);this.settings.trackEnded.apply(this)}};var j=function(b,a){var c=[];a=a||document;if(a.getElementsByClassName)c=a.getElementsByClassName(b);else{var d,e,i=a.getElementsByTagName("*"),f=RegExp("(^|\\s)"+b+"(\\s|$)");d=0;for(e=i.length;d<e;d++)f.test(i[d].className)&&c.push(i[d])}return c.length>1?c:c[0]}})("audiojs","audiojsInstance",this);]]></content>
    
    
      
      
    <summary type="html">/*!
 * Brav1Toolbox.js - common utility scripts and polyfills
 * http://marcolago.com/
 * MIT licensed
 *
 * Copyright (C) 2012-2013 Marco L</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-12-16T06:05:29.652Z</published>
    <updated>2024-12-16T09:00:27.386Z</updated>
    
    <content type="html"><![CDATA[#love-page {    position: fixed;    top: 0;    left: 0;    width: 100%;    height: 100%;    z-index: 9999;    background: #fff;}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video {margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section {display:block}body {line-height:1}strong,b {font-weight:bold}ol,ul {list-style:none}blockquote,q {quotes:none}blockquote:before,blockquote:after,q:before,q:after {content:'';content:none}table {border-collapse:collapse;border-spacing:0}html,body {width:100%;height:100%;-webkit-text-size-adjust:none}body {white-space:nowrap}.nojavascript {position:fixed;top:0;width:100%;text-align:center;font-size:3em;}.flowtime {font-size:0;width:100%;height:100%;-o-transform-origin:0 0;-ms-transform-origin:0 0;-moz-transform-origin:0 0;-webkit-transform-origin:0 0;transform-origin:0 0;-o-transform:translateZ(0);-ms-transform:translateZ(0);-moz-transform:translateZ(0);-webkit-transform:translateZ(0);transform:translateZ(0);-o-backface-visibility:hidden;-ms-backface-visibility:hidden;-moz-backface-visibility:hidden;-webkit-backface-visibility:hidden;backface-visibility:hidden;-o-transition:-o-transform .5s cubic-bezier(.77,.10,.22,1);-moz-transition:-moz-transform .5s cubic-bezier(.77,.10,.22,1);-webkit-transition:-webkit-transform .5s cubic-bezier(.77,.10,.22,1);transition:transform .5s cubic-bezier(.77,.10,.22,1)}.flowtime.no-transition {-o-transition:-o-transform 0s;-moz-transition:-moz-transform 0s;-webkit-transition:-webkit-transform 0s;transition:transform 0s}.ft-section {width:100%;height:100%;position:relative;-o-transform:translateZ(0);-ms-transform:translateZ(0);-moz-transform:translateZ(0);-webkit-transform:translateZ(0);transform:translateZ(0)}.ft-section,.ft-section-thumb {font-size:16px;font-size:1rem;white-space:normal;display:inline-block;vertical-align:top}.ft-page {-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;height:100%;position:relative;z-index:auto;-o-transform:translateZ(0);-ms-transform:translateZ(0);-moz-transform:translateZ(0);-webkit-transform:translateZ(0);transform:translateZ(0)}.ft-page.actual {z-index:100}.ft-overview .ft-page {cursor:pointer;-o-transition:all .5s cubic-bezier(.77,.10,.22,1);-moz-transition:all .5s cubic-bezier(.77,.10,.22,1);-webkit-transition:all .5s cubic-bezier(.77,.10,.22,1);transition:all .5s cubic-bezier(.77,.10,.22,1);-o-transform:scale(0.95);-ms-transform:scale(0.95);-moz-transform:scale(0.95);-webkit-transform:scale(0.95);transform:scale(0.95);-o-transform-origin:50% 50%;-ms-transform-origin:50% 50%;-moz-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;transform-origin:50% 50%}.ft-overview .ft-page * {pointer-events:none}.ft-absolute-nav {overflow:hidden}.ft-absolute-nav .flowtime {position:absolute}.ft-fragment {opacity:0;-o-transition:all .3s cubic-bezier(.77,.10,.22,1);-moz-transition:all .3s cubic-bezier(.77,.10,.22,1);-webkit-transition:all .3s cubic-bezier(.77,.10,.22,1);transition:all .3s cubic-bezier(.77,.10,.22,1);-o-transform:translateZ(0);-ms-transform:translateZ(0);-moz-transform:translateZ(0);-webkit-transform:translateZ(0);transform:translateZ(0)}.ft-fragment.revealed.step {opacity:.3}.ft-fragment.revealed.shy {opacity:0}.ft-fragment.revealed,.ft-fragment.revealed-temp,.ft-fragment.revealed.actual {opacity:1}.ft-default-progress {position:fixed;bottom:16px;bottom:1rem;right:16px;right:1rem;z-index:1000;opacity:.3;-o-transition:all .5s cubic-bezier(.77,.10,.22,1);-moz-transition:all .5s cubic-bezier(.77,.10,.22,1);-webkit-transition:all .5s cubic-bezier(.77,.10,.22,1);transition:all .5s cubic-bezier(.77,.10,.22,1)}.ft-default-progress:hover {opacity:1}.ft-overview .ft-default-progress {opacity:0;pointer-events:none}.ft-page-thumb {-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:18px;height:12px;margin-right:1px;margin-bottom:1px;background-color:rgba(0,0,0,0.7);cursor:pointer;-o-transition:all .3s cubic-bezier(.77,.10,.22,1);-moz-transition:all .3s cubic-bezier(.77,.10,.22,1);-webkit-transition:all .3s cubic-bezier(.77,.10,.22,1);transition:all .3s cubic-bezier(.77,.10,.22,1)}.ft-page-thumb:hover {background-color:rgba(255,255,255,0.7)}.ft-page-thumb.actual {background-color:rgba(255,255,255,0.5);border:1px solid #fff}img {-o-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);-o-backface-visibility:hidden;-ms-backface-visibility:hidden;-moz-backface-visibility:hidden;-webkit-backface-visibility:hidden;backface-visibility:hidden}.parallax {position:relative;-o-transition:all .5s cubic-bezier(.50,.10,.50,1);-moz-transition:all .5s cubic-bezier(.50,.10,.50,1);-webkit-transition:all .5s cubic-bezier(.50,.10,.50,1);transition:all .5s cubic-bezier(.50,.10,.50,1)}.ft-overview .parallax {-o-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;-moz-transform:translate3d(0,0,0)!important;-webkit-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}@font-face {font-family:'RuiHeiXiTi';src:url('fonts/RuiHeiXiTi.otf') format('truetype');font-weight:bold;font-style:normal}html {font-size:100%;line-height:1.5rem;background-color:#aaa;color:#6e2d52;text-shadow:1px 1px 0 rgba(255,255,255,0.4)}body,button {font-family:"RuiHeiXiTi",sans-serif}.navigation,.credits,.switches {display:none}.ft-page {padding:1em;background-color:#fed1ea;text-align:center}.flowtime h1,.flowtime h2,.flowtime h3,.flowtime h4,.flowtime h5,.flowtime h6,.flowtime p,.flowtime ul,.flowtime ol,.flowtime dl,.flowtime li,.flowtime dt,.flowtime dd {display:block;-o-transition:all .3s cubic-bezier(.77,.10,.22,1);-moz-transition:all .3s cubic-bezier(.77,.10,.22,1);-webkit-transition:all .3s cubic-bezier(.77,.10,.22,1);transition:all .3s cubic-bezier(.77,.10,.22,1)}.flowtime h1,.flowtime h2,.flowtime h3,.flowtime h4,.flowtime h5,.flowtime h6 {font-weight:bold;color:#613b3b;padding-top:1em}.flowtime h1 {font-size:4rem;line-height:4.3rem}.flowtime h2 {font-size:3rem;line-height:3.3rem}.flowtime h3 {font-size:2.5rem;line-height:3rem}.flowtime h4,.flowtime h5,.flowtime h6 {font-size:1.75rem;line-height:2rem}.flowtime p {font-size:1.75rem;line-height:2rem;margin:2rem 0}.flowtime ul,.flowtime ol,.flowtime dl {font-size:1.75rem;line-height:2rem;margin:2rem 0}.flowtime ul,.flowtime ol,.flowtime dl {margin:0 2rem}.flowtime li,.flowtime dd {line-height:1.75rem;margin-bottom:1rem;position:relative}.flowtime dt {position:relative}.flowtime ul li:before,.flowtime dl dt:before {content:"\2022";text-align:right;color:#fd0;margin-right:.5rem;display:inline-block;position:absolute;left:-1rem}.flowtime ol {counter-reset:list}.flowtime ol li:before {content:counter(list) ".";counter-increment:list;font-size:.75em;color:#fd0;margin-right:.5rem;display:inline-block;position:relative;top:-0.075em}.flowtime dl dd {font-size:.8em;margin-left:1rem}.flowtime small {font-size:.6em;vertical-align:middle}.flowtime pre,.flowtime code {font-family:monospace;margin:1rem 0}.flowtime strong {font-weight:bold;color:#fd0;text-shadow:1px 2px 0 #000,1px -1px 0 rgba(0,0,0,0.3),-1px -1px 0 rgba(0,0,0,0.3),-1px 1px 0 rgba(0,0,0,0.3)}.flowtime q {quotes:"“" "”"}.flowtime q:before {content:open-quote}.flowtime q:after {content:close-quote}.flowtime blockquote {font-size:1.5rem;margin:1.5rem 2rem;padding:1rem;background-color:rgba(0,0,0,0.3);border-left:.5rem solid rgba(255,255,255,0.5);border-radius:.5rem}.flowtime q,.flowtime cite,.flowtime blockquote {font-style:italic}.flowtime .small {font-size:.6em}.flowtime .attention {color:red;text-shadow:1px 2px 0 #000,1px -1px 0 rgba(0,0,0,0.3),-1px -1px 0 rgba(0,0,0,0.3),-1px 1px 0 rgba(0,0,0,0.3)}.flowtime sup {font-size:.7em;position:relative;top:-0.5em}.flowtime a,.flowtime a:link,.flowtime a:visited,.flowtime a:active,.flowtime a:focus {color:#666;text-decoration:none}.flowtime a:hover {color:#666;text-decoration:underline}.flowtime a:hover img,.flowtime a:active img,.flowtime a:focus img {-webkit-box-shadow:1px 2px 10px 5px rgba(0,0,0,0.5);box-shadow:1px 2px 10px 5px rgba(0,0,0,0.5)}.flowtime .stack {width:100%;height:100%;margin:1rem 0;position:relative}.flowtime .stacked {width:100%;position:absolute;top:0;left:0}.flowtime img {max-width:100%;max-height:100%;display:block;margin:0 auto}.flowtime .stack-center {text-align:center;white-space:nowrap;position:absolute;top:2rem;right:2rem;bottom:2rem;left:2rem}.flowtime .stack-center:before {content:"";height:100%;display:inline-block;vertical-align:middle}.flowtime .stack-center .stacked-center {white-space:normal;max-width:100%;max-height:100%;display:inline-block;vertical-align:middle}@media screen and (min-height:41em) and (min-width:80em) {html {font-size:120%}}@media screen and (min-height:50em) and (min-width:90em) {html {font-size:140%}}@media screen and (max-device-height:578px) {html {font-size:50%}}.parallax-demo {overflow:hidden}.parallax-demo .kingmix {position:absolute;left:20%;bottom:-10%;z-index:50}.parallax-demo .sax {position:absolute;left:6%;bottom:-18%;z-index:40}.parallax-demo .tone {position:absolute;left:49%;bottom:-32%;z-index:30}.ft-overview .section-1 {margin-top:0}.ft-overview .section-2 {margin-top:-40%}.ft-overview .section-3 {margin-top:-40%}.ft-overview .section-4 {margin-top:0}.ft-overview .section-5 {margin-top:60%}.ft-overview .section-6 {margin-top:0}.ft-overview .section-7 {margin-top:-40%}.ft-overview .section-8 {margin-top:-40%}.ft-overview .section-9 {margin-top:0}.ft-page-thumb {background-color:#a54479}.ft-page-thumb.actual {background-color:#44a54a;border:0}.ft-default-progress {bottom:3rem;right:2rem}.thumb-section-0 {position:relative;top:13px}.thumb-section-3 {position:relative;top:13px}.thumb-section-4 {position:relative;top:26px}.thumb-section-5 {position:relative;top:13px}.thumb-section-8 {position:relative;top:13px}.thumb-section-8 {position:relative;top:13px}.left-img {padding:0;text-align:left}.left-img img {position:absolute;left:0;top:0;height:100%;z-index:1}.left-img p,.left-img h3,.left-img .text {position:absolute;top:1em;right:1em;z-index:2;text-align:right}.full-img {padding:0}.full-img img {width:100%;height:100%}.full-img h3,.full-img .text,.full-img .center-text {position:absolute;width:100%;text-align:center;z-index:2}.right-img {padding:0;text-align:left}.right-img img,.right-img .text {position:absolute}.right-img img {margin:0;height:100%;right:0;top:0;z-index:1}.right-img .text {left:0;top:0;z-index:2;padding:2em}.center-img {width:100%;height:100%;background-position:center center;background-repeat:no-repeat}.top-text {padding:0}.bottom-text h3 {height:10%;padding-bottom:10%}.bottom-text img {height:80%}.page-1 {background:#fff url(img/iali53.jpg) bottom right no-repeat;text-align:left}.page-1 p {font-size:1em}.page-1 img {margin:1em auto 0 1em}.page-1 .text1 {font-size:3em;color:#FA4A4A;line-height:2em;margin:0.5em 0 0 0.5em}.page-1 .text2 {font-size:1.2em;margin:1.5em 0 0 1.5em}.flowtime .page-1 a {color:#6e2626}.page-1 input {font-size:0.6em;padding:6px 8px;width:8rem;text-align:center;border:1px solid #ccc;vertical-align:6px;}.page-2 {background-color:#fefff1;padding:0;text-align:center}.page-2 p {height:10%;padding-top:5%;margin:0}.page-2 img {height:80%}.page-3 {background-color:#c1b287}.page-6 {background-color:#ecfafb;padding:0}.page-6 img {position:absolute;bottom:0;left:0;max-width:70%}.page-6 h3 {position:absolute;right:10%;top:45%;color:#bc195b}.page-7 {background-color:#e6fbec}.page-7 img {max-height:100%;margin:0 auto}.page-7 h3 {position:absolute;top:1em;left:50%;padding:0;margin-top:0;margin-left:-240px;z-index:1}.page-8 {background:#66cbff}.page-8 h3 {color:#eef;position:absolute;top:1em;left:50%;margin-left:-40%;padding:0;margin-top:0;width:10em;text-align:left}.page-8 h3 span {display:inline-block;width:1em;vertical-align:top}.page-9 {background-color:#c9f4fb}.page-9 img {margin-top:3em}.page-10 {background:url(img/iali22_bg.jpg)}.page-12 {background-color:#aff1ff;padding:0}.page-12 img {position:absolute;bottom:1em;left:1em;z-index:2;height:40%}.page-12 h3 {margin-left:1em;margin-right:1em}.page-13 {background-color:#feeff4;padding:0}.page-13 img {height:80%}.page-13 he {height:20%}.page-14 {background-color:#fbf7d1}.page-15 {background:#dcf2fa url(img/iali45_bg.jpg)}.page-16 {background-color:#7db6df}.page-17 {background-color:#e5f0f2}.page-19 {background-image:url(img/iali75_bg.jpg)}.page-19 h3 {margin-bottom:2em}.page-18 .text {margin-left:1em;margin-right:1em}.page-20 {background-color:#fcd0ca;padding:0}.page-20 img {position:absolute;bottom:0;left:4em}.page-21 {background:#fbf2a3 url(img/iali59_bg.jpg)}.page-22 {background-color:#f5d484}.page-23 {background-color:#fff}.page-25 {background-color:#fcc1b1}.page-26 {background-color:#fdeacf}.page-27 {background-color:#ffc8c5;padding:0}.page-27 h3 {position:absolute;z-index:2;width:100%;text-align:center}.page-28 {background:#b7e7f3 url(img/iali40_bg.jpg) bottom repeat-x;padding:0}.page-28 img {position:absolute;bottom:0;left:3em}.page-28 h3 {position:absolute;right:1em;bottom:360px;text-align:right;color:#127184}.page-29 {background:#0d85d1;padding:0}.page-29 h3 {position:absolute;z-index:2;width:100%;text-align:center;color:#eef}.page-30 {background:#fff url(img/iali76_bg.png) center bottom repeat-x;padding:0;padding:0}.page-30 img {position:absolute;bottom:0;left:0}.page-31 {background-color:#fbf5e9}.page-32 {background-color:#faf2e5}.page-33 {background-color:#fef0d5;padding:0}.page-33 h3 {font-size:1.8em;color:#a58545}.page-34 {background:#94c2e3 url(img/iali57.jpg) left bottom no-repeat}.page-34 h3 {color:#fff}.page-35 {background:#fff url(img/iali8_bg.png) left bottom repeat-x;padding:0}.page-35 img {position:absolute;bottom:0;left:0;z-index:1}.page-35 h3 {position:absolute;right:10%;top:5%;color:green;z-index:2;font-size:2em}.page-36 h3 {text-align:right;right:1.5em;color:#eee}.page-37 {background-color:#fff}.page-38 {background-color:#fff8f2}.page-39 {background:#e8ccc1 url(img/iali2_bg.jpg) repeat}.page-40 {background-color:#cde7f4}.page-40 img {position:absolute;bottom:1em;left:1em;z-index:1}.page-40 h3 {position:absolute;top:1em;right:1em;z-index:2}.page-41 {background-color:#5aaadc;padding:0}.page-41 .img2,.page-41 .img1 {position:absolute}.page-41 .img1 {left:1em;bottom:1em}.page-41 .img2 {right:1em;top:1em}.page-41 h3 {padding:0;position:absolute;top:35%;width:100%;text-align:center}.page-42 {background-color:#c1c567}.page-42 img {position:absolute;bottom:2em;left:1em}.page-42 h3 {font-size:2em}.page-43 {background-color:#6b79ad}.page-43 img {max-height:80%}.page-43 h2 {color:#fff}.page-44 {background-color:#f3e7ab}.page-45 {background-color:#b1dceb}.page-46 {background:#66cbff}.page-46 h3 {position:absolute;top:1em;left:50%;margin-left:-40%;padding:0;margin-top:0;width:10em;text-align:left}.page-46 h3 span {display:inline-block;width:1em;vertical-align:top}.page-47 {background-color:#fdcbca}.page-47 h3 {position:absolute;top:1em;left:50%;margin-left:-40%;padding:0;margin-top:0;width:10em;text-align:left}.page-47 h3 span {display:inline-block;width:1em;vertical-align:top}.page-48 {background-color:#e3e2e7}.page-49 {background-color:#fce6b6;text-align:left}.page-49 img {margin:0}.page-50 {background-color:#aae1f6;padding:0}.page-50 .img1 {position:absolute;right:0;top:0}.page-50 .img2 {position:absolute;left:1em;bottom:1em}.page-50 p {position:absolute;top:1em;left:1em;width:50%;margin:0;z-index:3;font-size:1.5em}.page-51 {background-image:url(img/iali52.jpg);background-size:cover;background-color:#fff;text-align:left}.page-52 {background-color:#fff2fb;padding:0}.page-52 h3 {margin:0;padding-top:.8em;font-size:1.6em;color:#4e0f3d}.page-53 {background-color:#febebe}.page-54 {background:#d3d2d0 url(img/319280_bg.jpg) repeat}.page-54 .center-img {background-image:url(img/319280.jpg);text-indent:-99999px}.page-54 h3 {line-height:1rem;padding-top:0.5em}.page-55 {background-color:#fff}.write-tip {position:fixed;display:block;color:#333;font-size:16px;bottom:0.2em;left:33%;padding:3px;z-index:999;background-color:#fff;border:1px solid #D3D3D3;border-radius:4px}.write-tip img {vertical-align:-2px;margin-left:5px;cursor:pointer}.write-tip button {color:#fff;font-size:15px;display:inline-block;background-color:#428bca;padding:6px 12px;margin-left:5px;vertical-align:1px;border:1px solid #357ebd;border-radius:4px;outline:none;cursor:pointer}.write-tip button:hover {background-color:#3276b1;border-color:#285e8e}.write-tip button:active {box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.write-ok {position:fixed;top:0;left:0;width:100%;height:100%;z-index:999;background-color:#FCC7E2;background-attachment:fixed;display:none}.write-ok .write-box {position:relative;margin:15% auto;padding:20px;text-align:center;width:50%;height:45%;background:#fff;box-shadow:0px 0px 10px 0px #F7B5DC;border-radius:8px;}.write-box h2 {font-size:2em;line-height:2.5em;color:#5EAF6F;text-shadow:1px 1px 3px #D3D3D3;}.write-box p {line-height:2em;white-space:pre-wrap;word-wrap:break-word}.write-box p u,.write-box p a {color:#007ed9;}.write-box p u:hover,.write-box p a:hover {color:#EB56AF;}.write-box p span {display:inline-block;min-width:1em;line-height:1.3em;padding:0 2px;margin:0 2px;outline:1px solid #ccc}.write-box p i {position:relative;top:-1px;font-size:0.8em;color:#806D6D;padding:3px 4px;background:#F7F7F7;border:1px solid #E7E7E7;border-radius:6px;display:none;}.write-box p small {line-height:3em;font-size:90%;color:#999;}.write-box #back {color:#888;margin-right:5px}.write-box button {color:#fff;font-size:1.2em;display:inline-block;background-color:#428bca;padding:13px 14px;margin-top:1em;border:1px solid #357ebd;border-radius:4px;outline:none;cursor:pointer}.write-box button:hover {background-color:#3276b1;border-color:#285e8e}.write-tip button:active {box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.write-share {background:#f1f1f1;text-align:center;display:inline-block;padding:13px 14px;margin-top:1em;border:1px solid #DADADA;border-radius:4px;display:none;}.disabled {pointer-events:none;cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);box-shadow:none;}.mPower{position: fixed;bottom: 9rem;right: 6.2rem;z-index: 999;}#on, #off{width: 16px;height: 16px;display: inline-block;margin-bottom: -3px;filter: alpha(opacity=0.8);opacity: 0.8;cursor: pointer;}#on:hover, #off:hover{filter: alpha(opacity=4);opacity: 1}#on{background: url(img/music.png) left center no-repeat;}#off{background: url(img/mute.png) left center no-repeat;display: none;}]]></content>
    
    
      
      
    <summary type="html">#love-page {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    background: #fff;
}
htm</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>专业课细节</title>
    <link href="http://example.com/posts/d8993ced.html"/>
    <id>http://example.com/posts/d8993ced.html</id>
    <published>2023-11-27T14:29:50.000Z</published>
    <updated>2024-12-16T05:46:11.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专业课细节题"><a href="#专业课细节题" class="headerlink" title="专业课细节题"></a>专业课细节题</h1><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="指针对应数组位置，地址计算"><a href="#指针对应数组位置，地址计算" class="headerlink" title="指针对应数组位置，地址计算"></a>指针对应数组位置，地址计算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p=a[<span class="number">0</span>];</span><br><span class="line">p+=<span class="number">6</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(*(a+<span class="number">2</span>)+<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(a[<span class="number">1</span>]+<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(&amp;a[<span class="number">0</span>][<span class="number">0</span>]+<span class="number">8</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h3 id="指针数组比较"><a href="#指针数组比较" class="headerlink" title="指针数组比较"></a>指针数组比较</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *language[<span class="number">10</span>]=&#123;<span class="string">&quot;FORTRAN&quot;</span>,<span class="string">&quot;BASIC&quot;</span>,<span class="string">&quot;PASCAL&quot;</span>,<span class="string">&quot;JAVA&quot;</span>,<span class="string">&quot;C&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,language[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,language[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*language[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*language[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BASIC</span><br><span class="line">PASCAL</span><br><span class="line">B</span><br><span class="line">P</span><br></pre></td></tr></table></figure><h3 id="字符串输入输出"><a href="#字符串输入输出" class="headerlink" title="字符串输入输出"></a>字符串输入输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">6</span>],a2[<span class="number">6</span>],a3[<span class="number">6</span>],a4[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a1,a2);</span><br><span class="line">gets(a3);</span><br><span class="line">gets(a4);</span><br><span class="line"><span class="built_in">puts</span>(a1);</span><br><span class="line"><span class="built_in">puts</span>(a2);</span><br><span class="line"><span class="built_in">puts</span>(a3);</span><br><span class="line"><span class="built_in">puts</span>(a4);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aa bb</span><br><span class="line">cc dd</span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line"></span><br><span class="line">cc dd</span><br></pre></td></tr></table></figure><h3 id="求精确值"><a href="#求精确值" class="headerlink" title="求精确值"></a>求精确值</h3><p> π /2=1+1/3+1/3 * 2/5+1/3 * 2/5 * 3/7 + 1/3 * 2/5 * 3/7 +1/3 * 2/5 * 3/7 *4/9 +</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> s=<span class="number">1.0</span>,eps,t=<span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;eps);</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">1</span>;n&lt;eps;n++)&#123;</span><br><span class="line">t=t*n/(<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">s+=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10以内的约数"><a href="#10以内的约数" class="headerlink" title="10以内的约数"></a>10以内的约数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],n;</span><br><span class="line"><span class="keyword">int</span> i,j=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">a[j++]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %6d&quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是</p><p>1 2 5</p><p>数组反转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//int x[100],n;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ive</span><span class="params">(<span class="keyword">int</span> x[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,*p;</span><br><span class="line">p=x+n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(x&lt;p)&#123;</span><br><span class="line">t=*x;</span><br><span class="line">*x++=*p;</span><br><span class="line">*p--=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">ive(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0987654321</span></span><br><span class="line">对于*x++相当于*(x++)若对应x[<span class="number">0</span>] *p--相当于*(p--)</span><br><span class="line">    先保存x[<span class="number">0</span>]将最后一个p[n<span class="number">-1</span>]赋值给x[<span class="number">0</span>]，再将p[n<span class="number">-1</span>]赋值初始的x[<span class="number">0</span>]</span><br><span class="line">    总体而言即交换第一个最后一个，第二个倒数第二个，第三个倒数第三个……以此类推，完成倒序数组</span><br></pre></td></tr></table></figure><p>改变字符串位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *w,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> t,*s1,*s2;</span><br><span class="line">s1=w;</span><br><span class="line">s2=w+n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(s1&lt;s2)&#123;</span><br><span class="line">t=*s1++;</span><br><span class="line">*s1=*s2--;</span><br><span class="line">*s2=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> p[]=<span class="string">&quot;1234567&quot;</span>;</span><br><span class="line">fun(p,<span class="built_in">strlen</span>(p));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1711717</span></span><br><span class="line">第一个不变，t=s1[<span class="number">0</span>]=<span class="number">1</span>,s1[<span class="number">1</span>]=s2[<span class="number">6</span>]=<span class="number">7</span>,s2[<span class="number">5</span>]=t=<span class="number">1</span>，第二个和倒数第二个改变 w=<span class="string">&quot;1734517&quot;</span></span><br><span class="line">第二个不变，t=s1[<span class="number">1</span>]=<span class="number">7</span>,s1[<span class="number">2</span>]=s2[<span class="number">5</span>]=<span class="number">1</span>,s2[<span class="number">4</span>]=t=<span class="number">7</span>,第三个和倒数第三个改变w=<span class="string">&quot;1714717&quot;</span></span><br><span class="line">第三个不变，t=s[<span class="number">2</span>]=<span class="number">1</span>,s1[<span class="number">3</span>]=s2[<span class="number">4</span>]=<span class="number">7</span>,s2[<span class="number">3</span>]=t=<span class="number">1</span>;第四个和倒数第四个即中间一个变w=<span class="string">&quot;1711717&quot;</span></span><br></pre></td></tr></table></figure><p>上一题的细节，字符串数组和字符数组长度和大小的问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> p[]=<span class="string">&quot;1234567&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">8</span>]=&#123;<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,<span class="built_in">strlen</span>(p),<span class="built_in">strlen</span>(a),<span class="keyword">sizeof</span>(p),<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line">第一个字符串数组p的数字只有<span class="number">7</span>个，所以长度是<span class="number">7</span>，但是大小要算上最后的一个<span class="string">&#x27;\0&#x27;</span>，所以为<span class="number">8</span></span><br><span class="line">第二个字符数组a的字符个数有八个，所以长度为<span class="number">8</span>，大小也为<span class="number">8</span></span><br></pre></td></tr></table></figure><p>结构体指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str1</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> *s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str1</span> <span class="title">s1</span>[2]&#123;</span>&#123;<span class="string">&quot;ABCD&quot;</span>,<span class="string">&quot;EFGH&quot;</span>&#125;,&#123;<span class="string">&quot;IJK&quot;</span>,<span class="string">&quot;LMN&quot;</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str2</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str1</span> <span class="title">sr</span>;</span></span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">&#125;s2=&#123;<span class="string">&quot;OPQ&quot;</span>,<span class="string">&quot;RST&quot;</span>,<span class="number">32767</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str1</span> *<span class="title">p</span>[2];</span></span><br><span class="line">p[<span class="number">0</span>]=&amp;s1[<span class="number">0</span>];</span><br><span class="line">p[<span class="number">1</span>]=&amp;s1[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,++p[<span class="number">1</span>]-&gt;s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s2.sr.c[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MN</span><br><span class="line">Q</span><br><span class="line">对于字符串s输出，若在前面写出++s，若当前下标为<span class="number">0</span>则从下标<span class="number">1</span>处输出整个字符串。</span><br><span class="line">指针数组指针p[<span class="number">0</span>]指向s1[<span class="number">0</span>]所在地址,p[<span class="number">1</span>]指向s1[<span class="number">1</span>]所在地址</span><br><span class="line">对于字符串指针数组可以用++p[<span class="number">1</span>]-&gt;s来输出，但对于字符串数组只能直接调用，p[<span class="number">1</span>]-&gt;c不能在前面和后面进行++</span><br></pre></td></tr></table></figure><p>三维指针数组找变量值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *pp[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;defgh&quot;</span>,<span class="string">&quot;ijkl&quot;</span>,<span class="string">&quot;mnopqr&quot;</span>,<span class="string">&quot;stuvw&quot;</span>,<span class="string">&quot;xyz&quot;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,***(pp+<span class="number">1</span>));<span class="comment">//m</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,**pp[<span class="number">0</span>]);<span class="comment">//a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,(*(*(pp+<span class="number">1</span>)+<span class="number">1</span>))[<span class="number">4</span>]);<span class="comment">//w</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*(pp[<span class="number">1</span>][<span class="number">2</span>]+<span class="number">2</span>));<span class="comment">//z</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,**(pp+<span class="number">1</span>));<span class="comment">//defgh</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m</span><br><span class="line">a</span><br><span class="line">w</span><br><span class="line">z</span><br><span class="line">mnopqr</span><br><span class="line">三维数组比较抽象，默认去掉一个*就可以清晰很多了。</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f1,f2;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)</span><br><span class="line">*s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">fun(n<span class="number">-1</span>,&amp;f1);</span><br><span class="line">fun(n<span class="number">-2</span>,&amp;f2);</span><br><span class="line">*s=f1+f2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">fun(<span class="number">6</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">迭代 f(1)=f(2)=1 f(3)=f(1)+f(2)=2 f(4)=f(3)+f(2)=2+1=3 f(5)=f(4)+f(3)=3+2=5 f(6)=f(5)+f(4)=5+3=8</span><br></pre></td></tr></table></figure><h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">E</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;in;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">&#125;e;</span><br><span class="line">e.a=<span class="number">1</span>;e.b=<span class="number">2</span>;</span><br><span class="line">e.in.x=e.a*e.b;</span><br><span class="line">e.in.y=e.a+e.b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,e.in.x,e.in.y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;专业课细节题&quot;&gt;&lt;a href=&quot;#专业课细节题&quot; class=&quot;headerlink&quot; title=&quot;专业课细节题&quot;&gt;&lt;/a&gt;专业课细节题&lt;/h1&gt;&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>专业课代码复盘</title>
    <link href="http://example.com/posts/78c7d46b.html"/>
    <id>http://example.com/posts/78c7d46b.html</id>
    <published>2023-11-27T14:29:30.000Z</published>
    <updated>2024-12-16T04:45:38.600Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="C代码复盘"><a href="#C代码复盘" class="headerlink" title="C代码复盘"></a>C代码复盘</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="1-1000以内的完数"><a href="#1-1000以内的完数" class="headerlink" title="1. 1000以内的完数"></a>1. 1000以内的完数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">s+=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s==i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is from&quot;</span>,i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-100-200中所有的素数"><a href="#2-100-200中所有的素数" class="headerlink" title="2. 100~200中所有的素数"></a>2. 100~200中所有的素数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> leap=<span class="number">1</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">101</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line">leap=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(leap==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">leap=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-转置"><a href="#3-转置" class="headerlink" title="3. 转置"></a>3. 转置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> t=a[i][j];</span><br><span class="line">a[i][j]=a[j][i];</span><br><span class="line">a[j][i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-给定一个数组，判断有多少种不同的数字"><a href="#4-给定一个数组，判断有多少种不同的数字" class="headerlink" title="4. 给定一个数组，判断有多少种不同的数字"></a>4. 给定一个数组，判断有多少种不同的数字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></span><br><span class="line"><span class="keyword">int</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[a[i]]==<span class="number">0</span>)&#123;</span><br><span class="line">s[a[i]]=<span class="number">1</span>;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;一共有%d个不同的数字&quot;</span>,t);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-将一个整数存放到一个数组中。存放时按逆序存放。例如：483-存放-成”384”。"><a href="#5-将一个整数存放到一个数组中。存放时按逆序存放。例如：483-存放-成”384”。" class="headerlink" title="5. 将一个整数存放到一个数组中。存放时按逆序存放。例如：483 存放 成”384”。"></a>5. 将一个整数存放到一个数组中。存放时按逆序存放。例如：483 存放 成”384”。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>((i=n/<span class="number">10</span>)!=<span class="number">0</span>)</span><br><span class="line">fun(a+<span class="number">1</span>,i);</span><br><span class="line">*a=n%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">fun(str,a);</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一年的第几天"><a href="#一年的第几天" class="headerlink" title="一年的第几天"></a>一年的第几天</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> months[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> year,month,day;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;year,&amp;month,&amp;day);</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">months[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;month;i++)&#123;</span><br><span class="line">s+=months[i];</span><br><span class="line">&#125;</span><br><span class="line">s+=day;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这一年是当年的第%d天&quot;</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8进制转10进制"><a href="#8进制转10进制" class="headerlink" title="8进制转10进制"></a>8进制转10进制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> s[<span class="number">100</span>])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s[i]!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">n=n*<span class="number">8</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契数列前40项"><a href="#斐波那契数列前40项" class="headerlink" title="斐波那契数列前40项"></a>斐波那契数列前40项</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,f3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d &quot;</span>,f1,f2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">38</span>;i++)&#123;</span><br><span class="line">f3=f1+f2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f3);</span><br><span class="line">f1=f2;</span><br><span class="line">f2=f3;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_ele</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//最大公约数</span></span><br><span class="line">    <span class="keyword">int</span> result=<span class="number">1</span>,minn;</span><br><span class="line">    minn=a&lt;b?a:b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=minn;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>&amp;&amp;b%i==<span class="number">0</span>)&#123;</span><br><span class="line">            result=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_time</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//最大公约数</span></span><br><span class="line">    <span class="keyword">int</span> result,maxn;</span><br><span class="line">    maxn=a&gt;b?a:b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=maxn;i&lt;=a*b;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%a==<span class="number">0</span>&amp;&amp;i%b==<span class="number">0</span>)&#123;</span><br><span class="line">            result=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,max_ele(a,b),min_time(a,b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鞍点"><a href="#鞍点" class="headerlink" title="鞍点"></a>鞍点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>],rmax[<span class="number">5</span>],cmin[<span class="number">5</span>],rx[<span class="number">5</span>],ry[<span class="number">5</span>],cx[<span class="number">5</span>],cy[<span class="number">5</span>],t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        rmax[i]=a[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rmax[i]&lt;a[i][j])&#123;</span><br><span class="line">                rmax[i]=a[i][j];</span><br><span class="line">                rx[i]=i;</span><br><span class="line">                ry[i]=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">        cmin[j]=<span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cmin[j]&gt;a[i][j])&#123;</span><br><span class="line">                cmin[j]=a[i][j];</span><br><span class="line">                cx[j]=i;</span><br><span class="line">                cy[j]=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rx[i]==cx[j]&amp;&amp;ry[i]==cy[j])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,rx[i]+<span class="number">1</span>,ry[i]+<span class="number">1</span>,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;<span class="comment">//m行n列的矩阵 </span></span><br><span class="line">    <span class="keyword">int</span> Array[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//定义一个矩阵 </span></span><br><span class="line">    <span class="keyword">int</span> i,j,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m,&amp;n);<span class="comment">//输入行和列数 </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)<span class="comment">//输入矩阵 </span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Array[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max=<span class="number">0</span>;<span class="comment">//用于比较每行最大的值 </span></span><br><span class="line">    <span class="keyword">int</span> min=<span class="number">0</span>;<span class="comment">//用于比较每行中最小的值 </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max=Array[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)<span class="comment">//找出第i行最大值</span></span><br><span class="line">        &#123;</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">if</span>(Array[i][j]&gt;max)</span><br><span class="line">             &#123;</span><br><span class="line">                 max=Array[i][j];</span><br><span class="line">                 b=j;<span class="comment">//将最大值的列数赋值给b </span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        min=Array[<span class="number">0</span>][b];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)<span class="comment">//找出每行最小值 </span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(Array[k][b]&lt;min)</span><br><span class="line">            &#123;</span><br><span class="line">                min=Array[k][b];</span><br><span class="line">                c=k;<span class="comment">//将最小的行数赋值给c </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min==max)<span class="comment">//判断该点是否为鞍点 </span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Array[%d][%d]=%d&quot;</span>,c,b,Array[c][b]);</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//if ture，输出鞍点 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(min!=max)<span class="comment">//根据题目要求，没有鞍点输出None </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">a[i][<span class="number">0</span>]=a[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">a[i][j]=a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数组中值为n的元素"><a href="#删除数组中值为n的元素" class="headerlink" title="删除数组中值为n的元素"></a>删除数组中值为n的元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_element</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i,n;</span><br><span class="line">m=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input n\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">del_element(num,n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,num[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_element</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="keyword">if</span>(num[i]==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">num[j<span class="number">-1</span>]=num[j];</span><br><span class="line">m--;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="利用指针法，输出二维数组各元素"><a href="#利用指针法，输出二维数组各元素" class="headerlink" title="利用指针法，输出二维数组各元素"></a>利用指针法，输出二维数组各元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 4</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N][M];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">p=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,p++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">p=*a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="计算字符串子串出现次数"><a href="#计算字符串子串出现次数" class="headerlink" title="计算字符串子串出现次数"></a>计算字符串子串出现次数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>],b[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> len1,len2,t=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a,b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=len1-len2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>,k=i;j&lt;len2&amp;&amp;b[j]==a[k];j++,k++);</span><br><span class="line">        <span class="keyword">if</span>(j==len2)</span><br><span class="line">            t++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;t;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="达芬奇密码解密"><a href="#达芬奇密码解密" class="headerlink" title="达芬奇密码解密"></a>达芬奇密码解密</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>],a[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密文：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">a[i]=<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;Z&#x27;</span>-s[i];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">a[i]=<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;z&#x27;</span>-s[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;原文：&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否为回文串"><a href="#判断是否为回文串" class="headerlink" title="判断是否为回文串"></a>判断是否为回文串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]!=s[n-i<span class="number">-1</span>])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是回文串&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是回文串&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计字母数字其他字符个数"><a href="#统计字母数字其他字符个数" class="headerlink" title="统计字母数字其他字符个数"></a>统计字母数字其他字符个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>],c;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())!=<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="number">65</span>&amp;&amp;c&lt;=<span class="number">90</span>||c&gt;=<span class="number">97</span>&amp;&amp;c&lt;=<span class="number">122</span>)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字母%d个,数字%d个,空格%d个，其他字符%d个&quot;</span>,i,j,k,m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">15</span>]=&#123;<span class="number">15</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> t,s=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">14</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a[m]==t)&#123;</span><br><span class="line">s=m;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[m]&gt;t)l=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=m<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此数&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个元素&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">int</span> t=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; len - <span class="number">1</span> ; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[min])</span><br><span class="line">min = j;</span><br><span class="line"><span class="keyword">if</span>(min!=i)&#123;</span><br><span class="line"><span class="keyword">int</span> t=a[min];</span><br><span class="line">a[min]=a[i];</span><br><span class="line">a[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="1-合并磁盘A-B-各存放一行字母-，放到C中"><a href="#1-合并磁盘A-B-各存放一行字母-，放到C中" class="headerlink" title="1. 合并磁盘A,B (各存放一行字母)，放到C中"></a>1. 合并磁盘A,B (各存放一行字母)，放到C中</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 打开a文件，读取a的数据，暂时存起来char,str[Maxn]</span></span><br><span class="line"><span class="comment">2. 打开b文件，读取b的数据，暂时存起来char,str[Maxn]</span></span><br><span class="line"><span class="comment">3. 排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">&quot;A.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)<span class="comment">//打开 test1 文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    a[i]=fgetc(fp);<span class="comment">//把 fp 所指向的文件 test2 中的第一个字符读入到数组a[0]</span></span><br><span class="line">    <span class="keyword">while</span>(a[i]!=EOF)<span class="comment">//若第一个字符不是结束符 EOF，则继续把指针 fp 指向的文件test1 中的字符逐个读入到数组 a，直至遇到标识符 EOF 结束循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(a[i]);</span><br><span class="line">        i++;</span><br><span class="line">        a[i]=fgetc(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">&quot;B.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a[i]=fgetc(fp);<span class="comment">//把 fp 所指向的文件 test2 中的第一个字符读入到数组a[0]</span></span><br><span class="line">    <span class="keyword">while</span>(a[i]!=EOF)<span class="comment">//若第一个字符不是结束符 EOF，则继续把指针 fp 指向的文件test1 中的字符逐个读入到数组 a，直至遇到标识符 EOF 结束循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(a[i]);</span><br><span class="line">        i++;</span><br><span class="line">        a[i]=fgetc(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    a[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=i;<span class="comment">//此时 n 为数组 a 的长度</span></span><br><span class="line">    <span class="keyword">int</span> j,k,t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)<span class="comment">//对数组 a 进行直接选择排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                t=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">&quot;C.txt&quot;</span>,<span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open file!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        fputc(a[i],fp);<span class="comment">//在循环里，这条语句把数组 a 的所有字符写到文件指针变量fp 所指向的文件 C.txt 中</span></span><br><span class="line">        <span class="built_in">putchar</span>(a[i]);<span class="comment">//在循环里，这条语句把数组 a 的所有字符显示到屏幕上i++;</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);<span class="comment">//关闭文件 test3，防止它被误用</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-文件处理-姓名输入"><a href="#2-文件处理-姓名输入" class="headerlink" title="2.  文件处理:姓名输入"></a>2.  文件处理:姓名输入</h3><p>下面程序的功能是从键盘接受姓名（例如：输入”ZHANG SAN”），在文件”try.dat”中查 找，若文件中已经存入了刚输入的姓名，则显示提示信息；若文件中没有刚输入的姓名，则将该 姓名存入文件。要求：</p><p>⑴若磁盘文件”try.dat”，已存在，则要保留文件中原来的信息；若文件”try.dat” 不存在，则在磁盘上建立一个新文件；</p><p>⑵当输入的姓名为空时（长度为 0），结束程序。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>],data[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">if</span>((fp=fopen(<span class="string">&quot;try.dat&quot;</span>,<span class="string">&quot;a+&quot;</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter name&quot;</span>);</span><br><span class="line">gets(name);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(name)==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">strcat</span>(name,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">rewind(fp);</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(flag&amp;&amp;(fgets(data,<span class="number">30</span>,fp))!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(data,name)==<span class="number">0</span>)&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">fputs</span>(name,fp);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(ferror(fp)==<span class="number">0</span>);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-文件处理：检索关键字"><a href="#3-文件处理：检索关键字" class="headerlink" title="3. 文件处理：检索关键字"></a>3. 文件处理：检索关键字</h3><p>以字符流形式读入一个文件，从文件中检索出六种Ｃ语言的关键字，并统计、 输出每种关键字在文件中出现的次数。本程序中规定：单词是一个以空格或’\t’、 ‘\n’结束的字符串 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">FILE *cp;</span><br><span class="line"><span class="keyword">char</span> fname[<span class="number">20</span>], buf[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"><span class="keyword">char</span> word[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">&#125;keyword[]=&#123; <span class="string">&quot;if&quot;</span>, <span class="number">0</span>, <span class="string">&quot;char&quot;</span>, <span class="number">0</span>, <span class="string">&quot;int&quot;</span>, <span class="number">0</span>, <span class="string">&quot;else&quot;</span>, <span class="number">0</span>, <span class="string">&quot;while&quot;</span>, <span class="number">0</span>, <span class="string">&quot;return&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getword</span> <span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span>((c=getc(fp)) != EOF &amp;&amp; (c==<span class="string">&#x27; &#x27;</span>||c==<span class="string">&#x27;\t&#x27;</span>||c==<span class="string">&#x27;\n&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span>(c==EOF) </span><br><span class="line"><span class="keyword">return</span> (<span class="literal">NULL</span>) ;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">buf[i++]=c;</span><br><span class="line"><span class="keyword">while</span>((c = fgetc(fp))!=EOF&amp;&amp; c!= <span class="string">&#x27; &#x27;</span> &amp;&amp; c!= <span class="string">&#x27;\t&#x27;</span> &amp;&amp; c!= <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">buf[i++] = c;</span><br><span class="line">buf[i]= <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lookup</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> *q, *s;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)&#123; </span><br><span class="line">q = &amp;keyword[i].word[<span class="number">0</span>] ;</span><br><span class="line">s=p;</span><br><span class="line"><span class="keyword">while</span>( *s &amp;&amp; (*s==*q) )&#123; </span><br><span class="line">s++; q++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( *s==*q )&#123; </span><br><span class="line">keyword[i].count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> *word;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Input file name:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, fname);</span><br><span class="line"><span class="keyword">if</span>((cp=fopen(fname, <span class="string">&quot;r&quot;</span>)) ==<span class="literal">NULL</span> )</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;File open error: %s\n&quot;</span>, fname);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="keyword">sizeof</span>(keyword)/<span class="keyword">sizeof</span>(struct key);</span><br><span class="line"><span class="keyword">while</span>((word=getword(cp))!=<span class="literal">NULL</span>)</span><br><span class="line">lookup(word);</span><br><span class="line">fclose(cp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;keyword:%-20scount=%d\n&quot;</span>,keyword[i].word,keyword[i].count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-文件处理：读入二进制"><a href="#4-文件处理：读入二进制" class="headerlink" title="4. 文件处理：读入二进制"></a>4. 文件处理：读入二进制</h3><p>下面程序的功能是将从终端上读入的 10 个整数以二进制方式写入名为”bi.dat”的新文件 中。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">FILE *fp; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j; </span><br><span class="line"><span class="keyword">if</span>((fp=fopen(<span class="string">&quot;bi.dat&quot;</span>, <span class="string">&quot;wb&quot;</span> )) == <span class="literal">NULL</span> ) </span><br><span class="line"><span class="built_in">exit</span> (<span class="number">0</span>); </span><br><span class="line"><span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;j ); </span><br><span class="line">fwrite(&amp;j,<span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp); </span><br><span class="line">&#125; </span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-文件处理-字符串大小写转换"><a href="#5-文件处理-字符串大小写转换" class="headerlink" title="5.  文件处理:字符串大小写转换"></a>5.  文件处理:字符串大小写转换</h3><p>下面程序的功能是键盘上输入一个字符串，把该字符串中的小写字母转换为大写字母， 输出到文件 test.txt 中，然后从该文件读出字符串并显示出来。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>]; </span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>; </span><br><span class="line">FILE *fp; </span><br><span class="line"><span class="keyword">if</span>((fp=fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>) &#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t open the file.\n&quot;</span>); </span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Input a string:\n&quot;</span>); </span><br><span class="line">gets(str); </span><br><span class="line"><span class="keyword">while</span>(str[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]&gt;= <span class="string">&#x27;a&#x27;</span>&amp;&amp;str[i]&lt;= <span class="string">&#x27;z&#x27;</span>) </span><br><span class="line">str[i]= str[i]<span class="number">-32</span> ; </span><br><span class="line">fputc(str[i],fp); i++; </span><br><span class="line">&#125; </span><br><span class="line">fclose(fp); </span><br><span class="line">fp=fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>); </span><br><span class="line">fgets(str,<span class="built_in">strlen</span>(str)+<span class="number">1</span>,fp); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str); </span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构部分"><a href="#数据结构部分" class="headerlink" title="数据结构部分"></a>数据结构部分</h2><h3 id="将a和b两个链表合并，链表包括学号，成绩，按学号升序排列"><a href="#将a和b两个链表合并，链表包括学号，成绩，按学号升序排列" class="headerlink" title="将a和b两个链表合并，链表包括学号，成绩，按学号升序排列"></a>将a和b两个链表合并，链表包括学号，成绩，按学号升序排列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(LinkList A,LinkList B,LinkList &amp;C)</span></span>&#123;</span><br><span class="line">    LNode *p=A-&gt;next;</span><br><span class="line">    LNode *q=B-&gt;next;</span><br><span class="line">    C=A;</span><br><span class="line">    C-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    LNode *r=C;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&lt;q-&gt;data)&#123;</span><br><span class="line">            r-&gt;next=p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            r=r-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r-&gt;next=q;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">            r=r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)r-&gt;next=p;</span><br><span class="line">    <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)r-&gt;next=q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;C代码复盘&quot;&gt;&lt;a href=&quot;#C代码复盘&quot; class=&quot;headerlink&quot; title=&quot;C代码复盘&quot;&gt;&lt;/a&gt;C代码复盘&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>测试卷1.0</title>
    <link href="http://example.com/posts/241af10e.html"/>
    <id>http://example.com/posts/241af10e.html</id>
    <published>2022-09-11T14:10:14.000Z</published>
    <updated>2022-09-15T12:13:23.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试卷1-0"><a href="#测试卷1-0" class="headerlink" title="测试卷1.0"></a>测试卷1.0</h2><h3 id="1-旧事重提"><a href="#1-旧事重提" class="headerlink" title="1. 旧事重提"></a>1. 旧事重提</h3><p>二分法实现幂函数x的n次方pow(x,n)</p><p>这里的二分法是指减少乘法的次数，把重复的运算省去。我要求x的n次方，那么先求x的n/2次方，然后两个相乘起来。如此递归下去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            n=n<span class="number">-1</span>;</span><br><span class="line">            t*=x;</span><br><span class="line">        &#125;</span><br><span class="line">        x*=x;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> half;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;<span class="comment">//递归转移方程</span></span><br><span class="line">        half=<span class="built_in">fun</span>(x,n/<span class="number">2</span>);<span class="comment">//x的n/2次方</span></span><br><span class="line">        <span class="keyword">return</span> x*half*half;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        half=<span class="built_in">fun</span>(x,n/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> half*half;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result=<span class="built_in">fun</span>(x,n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">        result=<span class="number">1</span>/result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-有两个n维向量相乘，求其点乘的最小值"><a href="#2-有两个n维向量相乘，求其点乘的最小值" class="headerlink" title="2. 有两个n维向量相乘，求其点乘的最小值"></a>2. 有两个n维向量相乘，求其点乘的最小值</h3><p>两个n维的向量，相乘的点是指将向量对应维度的乘积相加，但是我们可以将向量维度交换下可以得到更小的向量点乘，例如3维向量：1,3,-5和4,-2,-1最小向量点乘为-27，即将维度变为：3,1,-5和-2,-1,4。只需要把第一个向量进行全排列，就可以得到所有的乘积</p><p>程序设计要求：输入一个整数n为向量的维度，然后输入两个n维度的向量，用空格区别向量元素，输出为一行，包含一个整数，为最小的点乘。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 进行全排列:三行代码 交换 进入下一层 再交换</span></span><br><span class="line"><span class="comment">2. 当排列好之后进行点乘，当结果小于当前最小值时候进行更新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxnn=<span class="number">1e9</span>+<span class="number">1</span>;<span class="comment">//数值的最大值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn=<span class="number">1e2</span>+<span class="number">1</span>;<span class="comment">//数组的最大值</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[Maxn],b[Maxn];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;n)&#123;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            sum+=a[i]*b[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;ans)</span><br><span class="line">            ans=sum;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=n;i++)<span class="comment">//从第t个元素交换到第n的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[t],a[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(t+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">swap</span>(a[t],a[i]);<span class="comment">//回溯，使得a[t]的值不变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="built_in">backtrack</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-二叉排序树删除某个结点。要求用非递归算法并释放掉该结点。"><a href="#3-二叉排序树删除某个结点。要求用非递归算法并释放掉该结点。" class="headerlink" title="3. 二叉排序树删除某个结点。要求用非递归算法并释放掉该结点。"></a>3. 二叉排序树删除某个结点。要求用非递归算法并释放掉该结点。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 首先判断这个结点是否有右子树；无：直接用这个结点的左子树覆盖当前结点</span></span><br><span class="line"><span class="comment">2. 判断一下是否有左子树；无：直接用右子树来覆盖当前结点</span></span><br><span class="line"><span class="comment">3. 当左右子树都存在时候，从p的左子树的最右结点（最大值）赋值给当前结点p，左子树中的最右结点给删除。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(BiTree *p)</span></span>&#123;</span><br><span class="line">    BiTree *q,*s;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rchild==<span class="literal">NULL</span>)<span class="comment">/*左子树空只需要重接它的左子树（待删节点是叶子也走此分支）*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;lchild;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p=p-&gt;rchild;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        q=p;</span><br><span class="line">        s=p-&gt;lchild;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;rchild)&#123;</span><br><span class="line">            q=s;</span><br><span class="line">            s=s-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data=s-&gt;data;<span class="comment">//s指向被删结点的直接前驱</span></span><br><span class="line">        <span class="keyword">if</span>(q!=p)<span class="comment">//s有右子树</span></span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;rchild=s-&gt;lchild;<span class="comment">//重接q的右子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            q-&gt;lchild=s-&gt;lchild;<span class="comment">//重接q的左子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-用回溯法来解决装载问题。"><a href="#4-用回溯法来解决装载问题。" class="headerlink" title="4. 用回溯法来解决装载问题。"></a>4. 用回溯法来解决装载问题。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//子集树</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn=<span class="number">1e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> c;<span class="comment">//第一个轮船装载量</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> w[Maxn];</span><br><span class="line"><span class="keyword">int</span> r;<span class="comment">//剩余重量</span></span><br><span class="line"><span class="keyword">int</span> x[Maxn];<span class="comment">//记录n个集装箱是否被装入</span></span><br><span class="line"><span class="keyword">int</span> cw;<span class="comment">//当前载重量</span></span><br><span class="line"><span class="keyword">int</span> bestw;<span class="comment">//最优载重量</span></span><br><span class="line"><span class="keyword">int</span> bestx[Maxn];<span class="comment">//最优装载情况</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cw&gt;bestw)&#123;</span><br><span class="line">            bestw=cw;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                bestx[i]=x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    r-=w[t];<span class="comment">//搜索左子树 i---i+1---n</span></span><br><span class="line">    <span class="keyword">if</span>(vw+w[t]&lt;=c)&#123;</span><br><span class="line">        cw+=w[t];</span><br><span class="line">        x[t]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">backtrack</span>(t+<span class="number">1</span>);</span><br><span class="line">        cw-=w[t];<span class="comment">//回溯到上一层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r+cw&gt;bestw)<span class="comment">//当前载重量加上剩余集装箱的重量大于最优质才能进行右子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        x[t]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">backtrack</span>(t+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    r+=w[t];<span class="comment">//回溯到上一层</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        r+=w[i];</span><br><span class="line">    <span class="built_in">backtrack</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;bestx[i]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-二叉树的带权路径长度-WPL-是二叉树中所有叶结点的带权路径长度之和。给定一棵二叉树T，才用二叉链表存储，结点结构为：left-weight-right，其中叶结点的weight域保存该结点的非负权值。设root为指向T的根节点的指针，请设计求T的WPL的算法。要求："><a href="#5-二叉树的带权路径长度-WPL-是二叉树中所有叶结点的带权路径长度之和。给定一棵二叉树T，才用二叉链表存储，结点结构为：left-weight-right，其中叶结点的weight域保存该结点的非负权值。设root为指向T的根节点的指针，请设计求T的WPL的算法。要求：" class="headerlink" title="5. 二叉树的带权路径长度(WPL)是二叉树中所有叶结点的带权路径长度之和。给定一棵二叉树T，才用二叉链表存储，结点结构为：left weight right，其中叶结点的weight域保存该结点的非负权值。设root为指向T的根节点的指针，请设计求T的WPL的算法。要求："></a>5. 二叉树的带权路径长度(WPL)是二叉树中所有叶结点的带权路径长度之和。给定一棵二叉树T，才用二叉链表存储，结点结构为：left weight right，其中叶结点的weight域保存该结点的非负权值。设root为指向T的根节点的指针，请设计求T的WPL的算法。要求：</h3><ol><li>给出算法的基本设计思想</li><li>使用C或C++语言，给出二叉树结点的数据类型定义</li><li>根据设计思想，采用C或C++语言描述算法，关键之处给出注释</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 本问题采用递归算法实现，根据定义:</span></span><br><span class="line"><span class="comment">二叉树的WPL值=树中全部也结点的带权路径长度之和</span></span><br><span class="line"><span class="comment">=根结点左子树中全部叶节点的带权路径长度之和+根结点右子树中全部叶节点的带权路径长度之和</span></span><br><span class="line"><span class="comment">叶节点的带权路径长度=该点的weight域的值*该节点的深度 </span></span><br><span class="line"><span class="comment">设根结点的深度为0，若某结点的深度为d时，则其孩子结点的深度为d+1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    BTree *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WPL</span><span class="params">(BTree *root)</span><span class="comment">//根据WPL的定义采用递归算法实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">WPL1</span>(root,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WPL1</span><span class="params">(BTree *root,<span class="keyword">int</span> d)</span><span class="comment">//d为结点的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;left==<span class="literal">NULL</span>&amp;&amp;root-&gt;right==<span class="literal">NULL</span>)<span class="comment">//递归结束调剂</span></span><br><span class="line">        <span class="keyword">return</span> root-&gt;weight*d;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">WPL1</span>(root-&gt;left,d+<span class="number">1</span>)+<span class="built_in">WPL1</span>(root-&gt;right,d+<span class="number">1</span>);<span class="comment">//递归转移方程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-二路插入排序是将待排关键字序列r-1…n-中关键字分二路分别按序列插入到辅助向量d-1-n-前半部和后半部，其原则为，先将r-1-赋为d-1-，再从r-2-记录开始分二路插入。编写实现二路插入排序算法。"><a href="#6-二路插入排序是将待排关键字序列r-1…n-中关键字分二路分别按序列插入到辅助向量d-1-n-前半部和后半部，其原则为，先将r-1-赋为d-1-，再从r-2-记录开始分二路插入。编写实现二路插入排序算法。" class="headerlink" title="6. 二路插入排序是将待排关键字序列r[1…n]中关键字分二路分别按序列插入到辅助向量d[1..n]前半部和后半部，其原则为，先将r[1]赋为d[1]，再从r[2]记录开始分二路插入。编写实现二路插入排序算法。"></a>6. 二路插入排序是将待排关键字序列r[1…n]中关键字分二路分别按序列插入到辅助向量d[1..n]前半部和后半部，其原则为，先将r[1]赋为d[1]，再从r[2]记录开始分二路插入。编写实现二路插入排序算法。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二路插入排序是对直接插入的改进，特别注意在前半部插入时元素的移动。</span></span><br><span class="line"><span class="comment">1.判断待插入的元素是否大于 d[1];是:插入到 d[1]后面，否:插入到 d[1]前面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn=<span class="number">1e3</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> r[Maxn],d[Maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d[<span class="number">1</span>]=r[<span class="number">1</span>];<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">int</span> first=<span class="number">1</span>,<span class="keyword">final</span>=<span class="number">1</span>;<span class="comment">//first 指前半部”最前面”的下标;final 指后半部”最后面”的下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)<span class="comment">//初始化 d[1]=r[1];first=1,final=1</span></span><br><span class="line">        <span class="keyword">if</span>(r[i]&gt;d[<span class="number">1</span>])<span class="comment">//插入后部</span></span><br><span class="line">        &#123;</span><br><span class="line">            low=<span class="number">1</span>;</span><br><span class="line">            high=<span class="keyword">final</span>;</span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high)<span class="comment">//折半查找插入位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                m=(low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(r[i]&lt;d[m])</span><br><span class="line">                high=m<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                low=m+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="comment">//最后跳出循环时 low&gt;high high+1 是插入的位置</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="keyword">final</span>;j&gt;=high+<span class="number">1</span>;j--)<span class="comment">//移动元素</span></span><br><span class="line">                d[j+<span class="number">1</span>]=d[j];</span><br><span class="line">    d[high+<span class="number">1</span>]=r[i];<span class="comment">//插入有序位置</span></span><br><span class="line">    <span class="keyword">final</span>++;<span class="comment">//后半部的下标+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//插入前部</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(first==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            first=n;</span><br><span class="line">            d[n]=r[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            low=frst;</span><br><span class="line">            high=n;</span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">            &#123;</span><br><span class="line">                m=(low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(r[i]&lt;d[m])</span><br><span class="line">                    high=m<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    low=m+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=first;j&lt;=high;j++)</span><br><span class="line">            d[j<span class="number">-1</span>]=d[j];</span><br><span class="line">            d[high]=r[i];first--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r[<span class="number">1</span>]=d[first];<span class="comment">//存储最小值</span></span><br><span class="line">    <span class="keyword">for</span>(i=first%n+<span class="number">1</span>,j=<span class="number">2</span>;i!=first;i=i%n+<span class="number">1</span>,j++)<span class="comment">//通过循环赋值使得 r 中数据从小到大排序</span></span><br><span class="line">        r[j]=d[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;r[i];</span><br><span class="line">    <span class="built_in">fun</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    cout&lt;&lt;r[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-钱币找零问题"><a href="#7-钱币找零问题" class="headerlink" title="7. 钱币找零问题"></a>7. 钱币找零问题</h3><p>指定币值和相应数量，用最少的数量凑齐某金额</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100</span>][maxn]; <span class="comment">// dp[i][j] 表示用前 i 种钱币 凑 j 元的最少数量</span></span><br><span class="line"><span class="keyword">int</span> coin[maxn],num[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;coin[i]; <span class="comment">// 钱币面值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;num[i];  <span class="comment">// 钱币数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123; <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;maxn;j++)</span><br><span class="line">            dp[i][j]=<span class="number">1e9</span>; <span class="comment">// 求最小初始化为最大</span></span><br><span class="line">        dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123; <span class="comment">// 枚举钱币</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num[i];j++)&#123; <span class="comment">// 枚举钱币数量</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123; <span class="comment">// 枚举需凑 金额</span></span><br><span class="line">                <span class="keyword">if</span>(k&gt;=coin[i]*j) <span class="comment">//当前方案可以凑成 金额k</span></span><br><span class="line">                    dp[i][k]=<span class="built_in">min</span>(dp[i][k],dp[i<span class="number">-1</span>][k-coin[i]*j]+j);</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//当前方案超过金额k，不可凑</span></span><br><span class="line">                    dp[i][k]=<span class="built_in">min</span>(dp[i][k], dp[i<span class="number">-1</span>][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1e9</span>; <span class="comment">// 对前 i 种钱币凑 n 元取最小值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans=<span class="built_in">min</span>(ans,dp[i][n]);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;测试卷1-0&quot;&gt;&lt;a href=&quot;#测试卷1-0&quot; class=&quot;headerlink&quot; title=&quot;测试卷1.0&quot;&gt;&lt;/a&gt;测试卷1.0&lt;/h2&gt;&lt;h3 id=&quot;1-旧事重提&quot;&gt;&lt;a href=&quot;#1-旧事重提&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>8512021</title>
    <link href="http://example.com/posts/cf1b292.html"/>
    <id>http://example.com/posts/cf1b292.html</id>
    <published>2022-09-11T13:56:58.000Z</published>
    <updated>2022-09-15T14:28:09.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="851-2021"><a href="#851-2021" class="headerlink" title="851_2021"></a>851_2021</h2><h3 id="1-链表题"><a href="#1-链表题" class="headerlink" title="1. 链表题"></a>1. 链表题</h3><ol><li>什么是线性结构，写出线性结构的特点</li><li>写出删除链表头结点的算法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1)线性结构的特点是在数据元素的非空有限集中：</span></span><br><span class="line"><span class="comment">①存在惟一的一个被称作“第一个”的数据元素和惟一的一个被称作“最后一个”的数据元素；</span></span><br><span class="line"><span class="comment">②除第一个之外，集合中的每个数据元素均只有一个前驱；除最后一个之外，集合中的每一个数据元素均只有一个后继。线性结构的数据元素之间存在一对一的线性关系。线性结构拥有两种不同的存储结构，即顺序存储结构和链式存储结构。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的，链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息。</span></span><br><span class="line"><span class="comment">线性结构中存在两种操作受限的使用场景，即队列和栈。栈的操作只能在线性表的一端进行，就是我们常说的先进后出（FILO），队列的插入操作在线性表的一端进行而其他操作在线性表的另一端进行，先进先出（FIFO），由于线性结构存在两种存储结构，因此队列和栈各存在两个实现方式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Node *<span class="title">DeleteHead</span><span class="params">(Node *pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(PHead==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//链表为空表,返回NULL</span></span><br><span class="line">    Node *pTemp = pHead-&gt;next;<span class="comment">//pTemp 指向表头的后一个结点</span></span><br><span class="line">    <span class="built_in">free</span>(pHead);<span class="comment">//直接删除表头，释放头节点的内存</span></span><br><span class="line">    <span class="keyword">if</span>(pTemp==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//原表只有表头一个几点，故删除后只剩下NULL</span></span><br><span class="line">    pHead=pTemp;</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-如图所示，阴影部分为边界像素，像素点着色算法的原理如下"><a href="#2-如图所示，阴影部分为边界像素，像素点着色算法的原理如下" class="headerlink" title="2. 如图所示，阴影部分为边界像素，像素点着色算法的原理如下"></a>2. 如图所示，阴影部分为边界像素，像素点着色算法的原理如下</h3><p>我们先选取s点，将其置为区域中的已知颜色，再按右上左下的方式将其邻接点着色</p><p><img src="../../images/123.png"></p><ol><li>栈是什么？有什么特点？</li><li>请描述该算法的过程</li><li>画图展示该算法的运行过程</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1)栈也是用来存储逻辑关系为“一对一”数据的线性存储结构，同顺序表和链表一样。</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">①栈只能从表的一端存取数据，另一端是封闭的；</span></span><br><span class="line"><span class="comment">②在栈中，无论是存数据还是取数据，都必须遵循“先进后出”的原则，即最先进栈的元素最后出栈</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(2)算法步骤：</span></span><br><span class="line"><span class="comment">1.将s点入栈</span></span><br><span class="line"><span class="comment">2.将栈顶元素出栈</span></span><br><span class="line"><span class="comment">3.探索栈顶元素周围按照右上左下的顺序判断是否是合法的活结点，合法的活结点必须符合：</span></span><br><span class="line"><span class="comment">（1）该点是像素点而不是边界；（2）该点未被染色</span></span><br><span class="line"><span class="comment">4.将合法的活结点入栈</span></span><br><span class="line"><span class="comment">重复执行2-4步骤，直至栈空，表示所有像素已经着色。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-综合快速排序，回答下面问题："><a href="#3-综合快速排序，回答下面问题：" class="headerlink" title="3. 综合快速排序，回答下面问题："></a>3. 综合快速排序，回答下面问题：</h3><ol><li>叙述冒泡排序的过程</li><li>设计实例，叙述快速排序的过程</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1)</span></span><br><span class="line"><span class="comment">比较两个相邻的元素，将值大的元素交换到右边。</span></span><br><span class="line"><span class="comment">一趟比较过程：依次比较相邻的两个数，将比较小的数放在前面，比较大的数放在后面。</span></span><br><span class="line"><span class="comment">①第一次比较：首先比较第一和第二个数，将小数放在前面，将大数放在后面。</span></span><br><span class="line"><span class="comment">②比较第 2 和第 3 个数，将小数 放在前面，大数放在后面。</span></span><br><span class="line"><span class="comment">③如此继续，知道比较到最后的两个数，将小数放在前面，大数放在后面，重复步骤，直至全部排序完成</span></span><br><span class="line"><span class="comment">④在上面一趟比较完成后，最后一个数一定是数组中最大的一个数，所以在比较第二趟的时候，最后一个数是不参加比较的。</span></span><br><span class="line"><span class="comment">⑤在第二趟比较完成后，倒数第二个数也一定是数组中倒数第二大数，所以在第三趟的比较中，最后两个数是不参与比较的。</span></span><br><span class="line"><span class="comment">⑥依次类推，每一趟比较次数减少依次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">49, 38, 65, 97, 76, 13, 27</span></span><br><span class="line"><span class="comment">首先将第一个元素49作为基准</span></span><br><span class="line"><span class="comment">设变量j从27从右向左找比基准小的元素，设变量i从49开始向右找到比基准大的元素，</span></span><br><span class="line"><span class="comment">找到27和65后，交换他们则第一次交换后：49, 38, 27, 97, 76, 13, 65。</span></span><br><span class="line"><span class="comment">继续移动ij找到对应元素并交换多次交换后序列为：49, 38, 27, 13, 76, 97, 65，</span></span><br><span class="line"><span class="comment">并且ij相遇在元素13把基准元素和ij相遇所在位置交换:13,38, 27, 49, 76, 97, 65</span></span><br><span class="line"><span class="comment">此时，49左边小于49，右边大于49，可以把把问题变成两个更小规模的相同的子问题，</span></span><br><span class="line"><span class="comment">继续递归下去，直到区间为1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="4-结合计算机算法设计与分析"><a href="#4-结合计算机算法设计与分析" class="headerlink" title="4. 结合计算机算法设计与分析"></a>4. 结合计算机算法设计与分析</h3><ol><li>什么是动态规划？动态规划和分治法的区别是什么？</li><li>举例说明，动态规划求解最优化问题的过程？</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态规划：当前需要求解的问题可以分解为多个子问题，问题的最优解如果可以由子问题的最优解推导得到，则可以先求解子问题的最优解，再构造原问题的最优解；若子问题有较多的重复出现，为此动态规划仅解决每个子问题一次，从而减少计算量，即一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查询。最后则自底向上从最终子问题向原问题逐步求解。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分治算法是把原问题分解为若干独立的子问题，子问题与子问题间相互独立，不存在重复求解子问题的情况，自顶向下求解子问题，合并子问题的解，从而得到原问题的解。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">举例为0-1背包问题：</span></span><br><span class="line"><span class="comment">在 N 件物品取出若干件放在容量为 W 的背包里，每件物品的体积为 W1，W2……Wn（Wi 为整数），与之相对应的价值为 P1,P2……Pn（Pi 为整数），求背包能够容纳的最大价值。</span></span><br><span class="line"><span class="comment">像这种固定数值的组合问题，比如这个问题的 W 总容量，跟下个实例零钱问题的总钱数，都是适合用动态规划来解决的问题，对于这样的问题，动态规划的解法就是：创建一个二维数组，横坐标是从 1 开始到 W，纵坐标是组成 W 的各种元素，本题中就是指 W1，W2……Wn，数组中每个位置（i，j）的数字就是当组成元素只有 W1，W2……Wi，背包可放容量为 j 时的结果，本题中就是容纳的最大价值。所以很容易分析出，当（i，j）时，如果 Wi 能放的下，空间减小，但是会增加 Pi 的价值，如果 Wi 不能放的下，空间不变，是（i-1，j）的价值，取其中最大值就好了，即状态转化方程为能放的下，dp[i][j] = max(dp[i-1][j],dp[i-1][jw[i]]+p[i])；放不下，dp[i][j] = dp[i-1][j]；对于前面规模更小的dp[i][j]记录最优值，当要解决更大规模的问题时，可以直接O(1)查询结果，而不必自顶向下的多次求解。最后，dp[n][v]即为最终的最优值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-Fibonacci函数表达式为："><a href="#5-Fibonacci函数表达式为：" class="headerlink" title="5. Fibonacci函数表达式为："></a>5. Fibonacci函数表达式为：</h3><p>f(1)=f(2)=1;</p><p>f(n)=f(n-1)+f(n-2),(n&gt;=3，且n为N+)</p><ol><li>用递归思想写出代码，关键部分加上注释</li><li>分析算法的时间复杂度和空间复杂度</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>) <span class="comment">//递归的出口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Fib</span>(n<span class="number">-1</span>)+<span class="built_in">Fib</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设需要求其中的第 n 位，则可以构建二叉树，二叉树的高度是 n - 1，由我们的基础知识可以知道，一个高度为 k 的二叉树最多可以由 2^k - 1 个叶子节点，也就是递归过程函数调用的次数，所以时间复杂度为O(2^n)，而空间复杂度就是树的高度 S(n)。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="6-哈夫曼树编码自底向上实现，若定义叶子结点所在层为第一层，其父为第二层，以此类推，处在第n层的结点扫描n-1次，复杂度为o-n-2"><a href="#6-哈夫曼树编码自底向上实现，若定义叶子结点所在层为第一层，其父为第二层，以此类推，处在第n层的结点扫描n-1次，复杂度为o-n-2" class="headerlink" title="6. 哈夫曼树编码自底向上实现，若定义叶子结点所在层为第一层，其父为第二层，以此类推，处在第n层的结点扫描n-1次，复杂度为o(n^2)"></a>6. 哈夫曼树编码自底向上实现，若定义叶子结点所在层为第一层，其父为第二层，以此类推，处在第n层的结点扫描n-1次，复杂度为o(n^2)</h3><ol><li>设计能表示二叉树的链表数据结构</li><li>基于上述两种数据结构设计一个复杂度为O(n)的哈夫曼树新编码算法，可实现从树根想叶子结点编码，写出思想</li><li>编写代码实现上溢问题的算法</li><li>分析时间复杂度为什么为O(n)</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">htNode</span>//树节点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> symbol;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">htNode</span> *<span class="title">left</span>,*<span class="title">right</span>;</span><span class="comment">//左右孩子</span></span><br><span class="line">&#125;htNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">htNode</span>//树的结构体,树的根</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    htNode *root;</span><br><span class="line">&#125;htTree;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将排序好的结点依次放入队列1中</span></span><br><span class="line"><span class="comment">合并两个最小的元素有三种可能，队列1中的前两个，队列2中的前两个，队列1和队列2的第一个。在三种情况下选择和最小的合并。合并后放入队列2中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">character</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;<span class="comment">//字符</span></span><br><span class="line">    <span class="keyword">int</span> time;<span class="comment">//该字符出现的次数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(character a,character b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//有n种字母，即n个叶子节点</span></span><br><span class="line">character arr[<span class="number">30</span>];<span class="comment">//根据字母出现次数从小到大排列数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial_work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;<span class="comment">//输入有n个叶子节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;arr[i].ch&gt;&gt;arr[i].time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arr,arr+n,cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">htNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">htNode</span> *<span class="title">left</span>,*<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">htNode</span>//树的结构体,树的根</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    htNode *root;</span><br><span class="line">&#125;htTree;</span><br><span class="line"></span><br><span class="line">htNode queone[<span class="number">100</span>];<span class="comment">//htNode 类型的数组，用数组模拟队列</span></span><br><span class="line"><span class="keyword">int</span> q1h,q2h;<span class="comment">//指向两个队列的队首的下标</span></span><br><span class="line">htNode quetwo[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> q1t,q2t;<span class="comment">//指向队尾的后一个</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Compare</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=y&amp;&amp;x&lt;=z)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y&lt;=x&amp;&amp;y&lt;=z)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(z&lt;=x&amp;&amp;z&lt;=y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">htTree <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">    htNode tep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        tep.ch=arr[i].ch;</span><br><span class="line">        tep.value=arr[i].time;</span><br><span class="line">        tep.left=<span class="literal">NULL</span>;</span><br><span class="line">        tep.right=<span class="literal">NULL</span>;</span><br><span class="line">        queone[q1t++]=tep;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q1t-q1h+q2t-q2h&gt;<span class="number">1</span>)<span class="comment">//两个队列的元素的个数和大于1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x1=inf; <span class="keyword">int</span> x2=inf; <span class="keyword">int</span> x3=inf;</span><br><span class="line">        <span class="keyword">if</span>(q1t-q1h&gt;=<span class="number">2</span>)<span class="comment">//队列1中有两个以上元素</span></span><br><span class="line">        x1=queone[q1h].value+queone[q1h+<span class="number">1</span>].value;</span><br><span class="line">        <span class="keyword">if</span>(q2t-q2h&gt;=<span class="number">2</span>)<span class="comment">//队列2中有两个以上元素</span></span><br><span class="line">        x2=quetwo[q2h].value+quetwo[q2h+<span class="number">1</span>].value;</span><br><span class="line">        <span class="keyword">if</span>(q1t-q1h&gt;=<span class="number">1</span>&amp;&amp;q2t-q2h&gt;=<span class="number">1</span>)</span><br><span class="line">        x3=queone[q1h].value+quetwo[q2h].value;</span><br><span class="line">        <span class="keyword">int</span> Result=<span class="built_in">Compare</span>(x1,x2,x3);</span><br><span class="line">        <span class="keyword">if</span>(Result==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tep.value=x1;</span><br><span class="line">            tep.left=&amp;queone[q1h];</span><br><span class="line">            q1h++;</span><br><span class="line">            tep.right=&amp;queone[q1h];</span><br><span class="line">            q1h++; <span class="comment">//弹出队列1前两个</span></span><br><span class="line">            quetwo[q2t++]=tep;<span class="comment">//把合并的结果存到队列2中</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Result==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tep.value=x2;</span><br><span class="line">            tep.left=&amp;quetwo[q2h];</span><br><span class="line">            q2h++;</span><br><span class="line">            tep.right=&amp;quetwo[q2h];</span><br><span class="line">            q2h++; <span class="comment">//弹出队列2前两个</span></span><br><span class="line">            quetwo[q2t++]=tep;<span class="comment">//把合并的结果存到队列2中</span></span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tep.value=x3;</span><br><span class="line">            tep.left=&amp;queone[q1h];</span><br><span class="line">            q1h++;</span><br><span class="line">            tep.right=&amp;quetwo[q2h];</span><br><span class="line">            q2h++; <span class="comment">//队列1 2 各弹出一个</span></span><br><span class="line">            quetwo[q2t++]=tep;<span class="comment">//把合并的结果存到队列2中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    htTree tree;</span><br><span class="line">    tree.root=&amp;quetwo[q2h];</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(htNode *node,<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;left==<span class="literal">NULL</span>&amp;&amp;node-&gt;right==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    ans+=(node-&gt;value)*step;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">dfs</span>(node-&gt;left,step+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">dfs</span>(node-&gt;right,step+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造哈夫曼树时，每次合并一个元素的代价是3，共有n次合并，时间复杂度是3n，也就是O(n)。</span></span><br><span class="line"><span class="comment">计算哈夫曼的代价值时，只需一次dfs，求和叶子节点的花费即可。时间复杂度也是O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="7-一个由n个点构成的图，用n-n的矩阵来表示，矩阵由0或1组成，i行j列为0表示i点和j点之间无边，否则i和j之间右边，请你设计算法判断任意两点是否连通。"><a href="#7-一个由n个点构成的图，用n-n的矩阵来表示，矩阵由0或1组成，i行j列为0表示i点和j点之间无边，否则i和j之间右边，请你设计算法判断任意两点是否连通。" class="headerlink" title="7. 一个由n个点构成的图，用n*n的矩阵来表示，矩阵由0或1组成，i行j列为0表示i点和j点之间无边，否则i和j之间右边，请你设计算法判断任意两点是否连通。"></a>7. 一个由n个点构成的图，用n*n的矩阵来表示，矩阵由0或1组成，i行j列为0表示i点和j点之间无边，否则i和j之间右边，请你设计算法判断任意两点是否连通。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> Graph[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">101</span>];<span class="comment">//标记数组</span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;<span class="comment">//ans=1 表示连同，否则不连通</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> Target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now==Target)&#123;</span><br><span class="line">        ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Graph[now][i]&amp;&amp;!vis[i])<span class="comment">//now 可达 且该店未访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i,Target);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            cin&gt;&gt;Graph[i][j];</span><br><span class="line">    <span class="keyword">int</span> x,y;<span class="comment">//判断x点和y点是否连通</span></span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot;不连通&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;连通&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;851-2021&quot;&gt;&lt;a href=&quot;#851-2021&quot; class=&quot;headerlink&quot; title=&quot;851_2021&quot;&gt;&lt;/a&gt;851_2021&lt;/h2&gt;&lt;h3 id=&quot;1-链表题&quot;&gt;&lt;a href=&quot;#1-链表题&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>20年833</title>
    <link href="http://example.com/posts/a224a7ac.html"/>
    <id>http://example.com/posts/a224a7ac.html</id>
    <published>2022-09-10T06:30:20.000Z</published>
    <updated>2022-10-04T05:57:04.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="20年833"><a href="#20年833" class="headerlink" title="20年833"></a>20年833</h2><h3 id="1-给一个带头结点单链表，删除所有值为k的节点"><a href="#1-给一个带头结点单链表，删除所有值为k的节点" class="headerlink" title="1. 给一个带头结点单链表，删除所有值为k的节点"></a>1. 给一个带头结点单链表，删除所有值为k的节点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ListNode * <span class="title">removeElements</span><span class="params">(ListNode *head,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    ListNode *p=head;</span><br><span class="line">    ListNode *q;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)<span class="comment">//用p来遍历链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next-&gt;val==k)&#123;<span class="comment">//p的后一个节点为要删除的结点</span></span><br><span class="line">            q=p-&gt;next;</span><br><span class="line">            p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(q);<span class="comment">//删除值为k的结点，并释放内存</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-建立二叉排序树"><a href="#2-建立二叉排序树" class="headerlink" title="2. 建立二叉排序树"></a>2. 建立二叉排序树</h3><p>给定一个数组{10，18，9，2，20，5，6，15，19，25}，设计一个程序根据本数组建立一颗二叉排序树，输入数据时以-1作为结束。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉排序树的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode,*BiTree;</span><br><span class="line"><span class="comment">//插入key到二叉排序树中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSTInsert</span><span class="params">(BiTree &amp;bt,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        bt=(BTNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">        bt-&gt;lchild=bt-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">        bt-&gt;key=key;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key&lt;bt-&gt;key)&#123;</span><br><span class="line">        <span class="built_in">BSTInsert</span>(bt-&gt;lchild,key);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&gt;bt-&gt;key)&#123;</span><br><span class="line">            <span class="built_in">BSTInsert</span>(bt-&gt;rchild,key);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key==bt-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    BiTree tree=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;x&amp;&amp;x!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">BSTInsert</span>(tree,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3. 快速排序"></a>3. 快速排序</h3><p>给定数组{46，79，56，52，38，40，80，31，95，24}。要求：</p><ol><li>写出快速排序的思想</li><li>实现快速排序算法，从键盘输入该数组，对其进行排序</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思想：</span></span><br><span class="line"><span class="comment">快速排序使用分治法策略把一个序列分为较小和较大的两个子序列，然后递归排序两个子序列</span></span><br><span class="line"><span class="comment">1. 挑选基准值：从数列中挑出一个数组，称之为“基准”，一般可以挑选当前区间的第一个元素。</span></span><br><span class="line"><span class="comment">2. 分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆放在基准后面（与基准值相等的数可以到任意一边）。在这个分割结束之后，对基准值的排序已经完成。</span></span><br><span class="line"><span class="comment">3. 递归排序子序列：递归将小于基准值元素的子序列和大于基准值元素的子序列排序。</span></span><br><span class="line"><span class="comment">4. 递归到最底部的判断条件是数列的大小是0或1，此时该数列显然已经有序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)<span class="comment">//当left==right时，说明当前区间只有一个值，该干的干完了，不用往下了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num=arr[left];<span class="comment">//标兵的值</span></span><br><span class="line">    <span class="keyword">int</span> i=left;<span class="comment">//左移动指针</span></span><br><span class="line">    <span class="keyword">int</span> j=right;<span class="comment">//右移动指针</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;<span class="comment">//左右指针相碰撞时，划分操作结束，而相遇时的位置就是下一次划分的界限</span></span><br><span class="line">        <span class="comment">//重点！从右边开始扫</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;arr[j]&gt;=num)j--;<span class="comment">//从右边扫找到第一个小于标兵的点</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;arr[i]&lt;=num)i++;<span class="comment">//从左边扫找到第一个大于标兵的点</span></span><br><span class="line">        <span class="built_in">swap</span>(arr,i,j);   <span class="comment">//交换他们</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr,left,j);<span class="comment">//两指针相遇后，就找到了下一次划分的界限，把找到的分界线上的值与标兵换一下</span></span><br><span class="line">    <span class="built_in">qsort</span>(arr,left,j<span class="number">-1</span>);<span class="comment">//分界线左边继续划分</span></span><br><span class="line">    <span class="built_in">qsort</span>(arr,j+<span class="number">1</span>,right);<span class="comment">//分界线右边继续划分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-合法出入栈字符序列"><a href="#4-合法出入栈字符序列" class="headerlink" title="4. 合法出入栈字符序列"></a>4. 合法出入栈字符序列</h3><p>输入一串字符串，如IOIOOOII，长度最长为50，其中I代表入栈操作，O代表出栈操作。试设计一个程序，判断输入的字符串序列是否合法的出入栈操作序列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 栈溢出</span></span><br><span class="line"><span class="comment">2. 空栈弹出</span></span><br><span class="line"><span class="comment">3. 栈不能遗留</span></span><br><span class="line"><span class="comment">本题为2.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLegal</span><span class="params">(<span class="keyword">char</span> str[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">            cnt--;</span><br><span class="line">            <span class="keyword">if</span>(cnt&lt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-统计二叉树叶子结点"><a href="#5-统计二叉树叶子结点" class="headerlink" title="5. 统计二叉树叶子结点"></a>5. 统计二叉树叶子结点</h3><p>给一个二叉树写一个函数统计叶子结点个数，函数声明void counterleaf(bitree *t,int &amp;count)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counterleaf</span><span class="params">(bitree *t,<span class="keyword">int</span> &amp;count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;lchild==<span class="literal">NULL</span> &amp;&amp; t-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span>(t-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">counterleaf</span>(t-&gt;lchild,count);</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">counterleaf</span>(t-&gt;rchild,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-最小乘船数问题"><a href="#6-最小乘船数问题" class="headerlink" title="6. 最小乘船数问题"></a>6. 最小乘船数问题</h3><p>进行一次独木舟的旅行活动，独木舟可以在港口租到，并且之间没有区别。一条独木舟上乘客的总重量不能超过独木舟的最大承载量，并且每条船最多只能坐两个乘客。我们要尽量减少这次活动中的花销，所以要找出可以安置所有旅客的最少的独木舟条数。现在请写一个程序，读入独木舟的最大承载量、旅客数目和每位旅客的重量。根据给出的规则，计算要安置所有旅客必须的最少的独木舟条数，并输出结果。 第一行输入最大船载重量和乘客数 。第二行输入乘客的重量。输出为所需要的最少独木舟的条数 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MinBoat</span><span class="params">(<span class="keyword">int</span> people[],<span class="keyword">int</span> n,<span class="keyword">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="built_in">Sort</span>(people,n);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(people[i]+people[j]&lt;=limit)<span class="comment">//两个人能坐</span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j--;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-最长公共子序列"><a href="#7-最长公共子序列" class="headerlink" title="7. 最长公共子序列"></a>7. 最长公共子序列</h3><p>小王打枪，给定一个目标序列，如 ccca，子弹的序列为 acbc。打枪的规则如下：按照子弹序列的顺序 射击；子弹打中对应的目标得 1 分，否则无分；允许放空枪。假定： </p><p>（1）都是神枪手，只要射击就一定能打中；</p><p>（2）子弹打中目标，目标就销毁；</p><p>（3）共 26 种目标用 26 个小写字母表示。 </p><p>输入第 1 行是子弹列，第 2 行是目标列，输出为 1 个数字，表示最高分 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设数组A长度为n，数组B长度为m</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> a[Maxn];</span><br><span class="line"><span class="keyword">char</span> b[Maxn];</span><br><span class="line"><span class="keyword">int</span> dp[Maxn][Maxn];<span class="comment">//dp[i][j] 表示a串前i个与b串前j个 这两个串的最长公共子序列的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化 i=0表示a串为空串和b串去匹配，则dp=0，j=0 同理</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j])<span class="comment">//如果 i j匹配，取a b串规模更小的最优值+1</span></span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);<span class="comment">//否则，a或b缩小规模，取两者更优值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="公共汽车问题"><a href="#公共汽车问题" class="headerlink" title="公共汽车问题"></a>公共汽车问题</h3><p> 假设某条街上每一公里就有一个公共汽车站，并且乘车费如下表： </p><p>公里数 1  2   3    4    5    6  7    8  9  10 </p><p>费用   12  21 31 40 49 58 69 79 90 101 </p><p>而任意一辆汽车行驶不能超过 10 公里。某人想行驶 n 公里，他可以任意次换车，请找到一种乘车方案，使得总费用最小。输入为某人想要行驶的公里数，输出为最小费用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*思路：动态规划问题</span></span><br><span class="line"><span class="comment">    假设我们最终的目的是走dis公里，那么有可能是从dis-1位置做1公里车过来，或者从dis-2位置坐2公里车...或者从dis-10公里坐10公里车过来。对于这十种情况，维护最小值，就是走到dis位置的最优值。</span></span><br><span class="line"><span class="comment">    那么自底向上解决这个问题即可。到1公里dp[1]最优值就是cost[1],到2公里dp[2]的最优值就是从0位置2公里车来或从1位置坐1公里车来，这两种情况维护更小。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mincost</span><span class="params">(<span class="keyword">int</span> cost[],<span class="keyword">int</span> n,<span class="keyword">int</span> Dis)</span><span class="comment">//给了n个公里数分别的花费，Dis表示要走的距离</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dp[Maxn];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Dis;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> Min=inf;<span class="comment">//inf表示很大的数字，赋值dp[i]是要找最小值，所以初试化为比较大的数字 考虑i是从哪里来，从i-1或i-2或i-n 共有n种可能，维护n中情况的最小值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="built_in">min</span>(i,n);j++)<span class="comment">//min(i,n)是因为 如果i&lt;n,则i不可能从i-n来</span></span><br><span class="line">            Min=<span class="built_in">min</span>(Min,dp[i-j]+cost[j]);<span class="comment">//dp[i-j]表示从七点走到i-j的位置的花费，再加上cost[j]就是从起点到i的总花费</span></span><br><span class="line">        dp[i]=Min;<span class="comment">//赋值最优情况给dp[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[Mis];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> Dis;</span><br><span class="line">    <span class="keyword">int</span> cost[Maxn];</span><br><span class="line">    <span class="comment">//如果cost数组需要输入</span></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;cost[i];</span><br><span class="line">    cin&gt;&gt;Dis;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">Mincost</span>(cost,n,Dis)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;20年833&quot;&gt;&lt;a href=&quot;#20年833&quot; class=&quot;headerlink&quot; title=&quot;20年833&quot;&gt;&lt;/a&gt;20年833&lt;/h2&gt;&lt;h3 id=&quot;1-给一个带头结点单链表，删除所有值为k的节点&quot;&gt;&lt;a href=&quot;#1-给一个带头结点单链表，删</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>18-19年833</title>
    <link href="http://example.com/posts/56e8b8fd.html"/>
    <id>http://example.com/posts/56e8b8fd.html</id>
    <published>2022-09-10T06:30:12.000Z</published>
    <updated>2022-09-16T13:18:59.245Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>16-17年833</title>
    <link href="http://example.com/posts/181ef313.html"/>
    <id>http://example.com/posts/181ef313.html</id>
    <published>2022-09-10T06:30:01.000Z</published>
    <updated>2022-09-15T13:47:49.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="16-17年833"><a href="#16-17年833" class="headerlink" title="16-17年833"></a>16-17年833</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;16-17年833&quot;&gt;&lt;a href=&quot;#16-17年833&quot; class=&quot;headerlink&quot; title=&quot;16-17年833&quot;&gt;&lt;/a&gt;16-17年833&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>22真题</title>
    <link href="http://example.com/posts/a37401f9.html"/>
    <id>http://example.com/posts/a37401f9.html</id>
    <published>2022-09-06T12:14:25.000Z</published>
    <updated>2022-09-15T13:46:44.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="22真题"><a href="#22真题" class="headerlink" title="22真题"></a>22真题</h2><h3 id="5-（1）使用C语言给出双链表的数据结构-2-写出删除结点的C语言实现"><a href="#5-（1）使用C语言给出双链表的数据结构-2-写出删除结点的C语言实现" class="headerlink" title="5. （1）使用C语言给出双链表的数据结构(2)写出删除结点的C语言实现"></a>5. （1）使用C语言给出双链表的数据结构(2)写出删除结点的C语言实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletion_beginning</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;UNDERFLOW\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(head-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ptr=head;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">        head-&gt;prev=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletion_last</span><span class="params">(note *head)</span></span>&#123;</span><br><span class="line">    node *ptr;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;UNDERFLOW\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        head=<span class="literal">NULL</span>:</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletion_specified</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *ptr,*temp;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the data after which the node is to be delete:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;val);</span><br><span class="line">    ptr=head;</span><br><span class="line">    <span class="keyword">while</span>(ptr-&gt;data!=val)</span><br><span class="line">        ptr=ptr-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(ptr==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t delete\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ptr-&gt;next-&gt;prev=ptr-&gt;prev;</span><br><span class="line">        ptr-&gt;prev=ptr-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-对于输入的非负十进制整数，打印输出与其等值的八进制数"><a href="#6-对于输入的非负十进制整数，打印输出与其等值的八进制数" class="headerlink" title="6. 对于输入的非负十进制整数，打印输出与其等值的八进制数"></a>6. 对于输入的非负十进制整数，打印输出与其等值的八进制数</h3><ol><li>用C语言给出栈的存储结构</li><li>基于上述存储结构，给出元素入栈和出栈的C语言实现</li><li>基于前两问，用C语言实现本题目</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Elemtype data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,Elemtype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.data[++S.top]=x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,Elemtype &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SqStack s;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">InitStack</span>(S))<span class="built_in">printf</span>(<span class="string">&quot;\n 初始化栈成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n请输入想要转换的非负十进制整数(以回车键结束):\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line"><span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="built_in">Push</span>(S,N%<span class="number">8</span>);</span><br><span class="line">    N/=<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n 该数对应的八进制数为：\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">StackEmpty</span>(S))&#123;</span><br><span class="line">    <span class="built_in">Pop</span>(S,&amp;e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-树结点数据结构的C语言定义和查找操作的实现"><a href="#B-树结点数据结构的C语言定义和查找操作的实现" class="headerlink" title="B-树结点数据结构的C语言定义和查找操作的实现"></a>B-树结点数据结构的C语言定义和查找操作的实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *keys;<span class="comment">//存储关键字的数组</span></span><br><span class="line">    <span class="keyword">int</span> t;<span class="comment">//最小度</span></span><br><span class="line">    BTreeNode **C;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="comment">//记录当前结点包含的关键字个数</span></span><br><span class="line">    <span class="keyword">bool</span> leaf;<span class="comment">//叶子结点的一个标记，如果是叶子结点则为true，否则false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*<span class="function">BTreeNode <span class="title">search</span><span class="params">(BTreeNode *<span class="keyword">this</span>,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//找到第一个大于等于待查找关键字k的关键字</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="keyword">this</span>.n&amp;&amp;k&gt;<span class="keyword">this</span>.keys[i])</span><br><span class="line">        i++;</span><br><span class="line">    <span class="comment">//如果找到的第一个关键字等于k，返回结点指针</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.keys[i]==k)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//如果没找到关键字k且当前结点为叶子结点则返回NULL</span></span><br><span class="line">    <span class="keyword">if</span>(leaf==<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//递归访问恰当的子代</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">search</span>(<span class="keyword">this</span>.C[i],k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;22真题&quot;&gt;&lt;a href=&quot;#22真题&quot; class=&quot;headerlink&quot; title=&quot;22真题&quot;&gt;&lt;/a&gt;22真题&lt;/h2&gt;&lt;h3 id=&quot;5-（1）使用C语言给出双链表的数据结构-2-写出删除结点的C语言实现&quot;&gt;&lt;a href=&quot;#5-（1）使用C语言</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>19-20真题</title>
    <link href="http://example.com/posts/34f2268f.html"/>
    <id>http://example.com/posts/34f2268f.html</id>
    <published>2022-09-06T12:14:16.000Z</published>
    <updated>2022-10-04T07:16:47.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="19-20真题"><a href="#19-20真题" class="headerlink" title="19-20真题"></a>19-20真题</h2><h3 id="自操作表，指表中元素被find函数访问到，就自动移动到表头，并保持其他元素顺序不变"><a href="#自操作表，指表中元素被find函数访问到，就自动移动到表头，并保持其他元素顺序不变" class="headerlink" title="自操作表，指表中元素被find函数访问到，就自动移动到表头，并保持其他元素顺序不变"></a>自操作表，指表中元素被find函数访问到，就自动移动到表头，并保持其他元素顺序不变</h3><ol><li>用数组存储结构写find功能</li><li>写链表存储结构的find功能</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">char</span> a[],<span class="keyword">int</span> n,<span class="keyword">char</span> e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//n为数组长度，e为要查找的元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==e)&#123;</span><br><span class="line">            <span class="comment">//找到元素之后</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                a[j+<span class="number">1</span>]=a[j];<span class="comment">//i-1位置之前的所有结点后移</span></span><br><span class="line">            &#125;</span><br><span class="line">            a[<span class="number">0</span>]=e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;<span class="comment">//数据域，保存结点的值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(LNode *L,<span class="keyword">char</span> e)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next,*q=L;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=e)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;data==e)&#123;</span><br><span class="line">        q-&gt;next=p-&gt;next;<span class="comment">//删除p</span></span><br><span class="line">        p-&gt;next=L-&gt;next;<span class="comment">//将p移动到头结点</span></span><br><span class="line">        L-&gt;next=p;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;所要查找的结点不存在！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-只用一个二叉树根节点指针T，用高效率方法，计算"><a href="#2-只用一个二叉树根节点指针T，用高效率方法，计算" class="headerlink" title="2. 只用一个二叉树根节点指针T，用高效率方法，计算"></a>2. 只用一个二叉树根节点指针T，用高效率方法，计算</h3><ol><li>所有结点个数</li><li>所有叶子结点个数</li><li>所有满结点个数/所有满状态结点个数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">递归函数实现的二叉树遍历算法是很低效的，我们采用线索二叉树算法。Tnorder算法输出的a,b,c为相应的结点个数、叶子结点个数和满状态结点个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TBTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="keyword">int</span> ltag,rtag;<span class="comment">//线索标记</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TBTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TBTNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tnorder</span><span class="params">(TBTNode *T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(TBTNode *p=<span class="built_in">Frist</span>(T);p!=<span class="literal">NULL</span>;p=<span class="built_in">Next</span>(p))&#123;</span><br><span class="line">        <span class="comment">//遍历中序线索树</span></span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ltag==<span class="number">1</span>&amp;&amp;p-&gt;rtag==<span class="number">1</span>)</span><br><span class="line">            b++;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>&amp;&amp;p-&gt;rtag==<span class="number">0</span>)</span><br><span class="line">            c++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;所有结点个数：&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;叶子结点个数：&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;满状态结点个数：&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TBTNode *<span class="title">Frist</span><span class="params">(TBTNode *p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//求以p为根的中序线索二叉树，中序序列下的第一个结点的算法</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>)&#123;</span><br><span class="line">        p=p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TBTNode *<span class="title">Next</span><span class="params">(TBTNode *p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//求中序线索二叉树中结点p在中序下的后继结点的算法</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Frist</span>(p-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> p-&gt;rchild;<span class="comment">//rtag=1,直接返回后继线索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="简述如何不用递归实现归并排序，并实现过程"><a href="#简述如何不用递归实现归并排序，并实现过程" class="headerlink" title="简述如何不用递归实现归并排序，并实现过程"></a>简述如何不用递归实现归并排序，并实现过程</h3><p><img src="../../images/1.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将数组中的相邻元素两两配对，用Merge()函数将他们排序，构成n/2组长度为2的排序好的子数组段，然后再将他们合并成长度为4的子数组段，如此继续下去，直至整个数组排好序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class Type&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(Type a[],Type b[],<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=left;</span><br><span class="line">    <span class="keyword">int</span> j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k=left;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[j])</span><br><span class="line">            b[k++]=a[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b[k++]=a[j++]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;mid)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> z=j;z&lt;=right;z++)</span><br><span class="line">            b[k++]=a[z];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> z=i;z&lt;=mid;z++)</span><br><span class="line">            b[k++]=a[z];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并大小为s的相邻子数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergePass</span><span class="params">(Type x[],Type y[],<span class="keyword">int</span> s,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i+<span class="number">2</span>*s<span class="number">-1</span>&lt;n)&#123;</span><br><span class="line">        <span class="built_in">Merge</span>(x,y,i,i+s<span class="number">-1</span>,i+<span class="number">2</span>*s<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">//合并大小为s的相邻2段子数组</span></span><br><span class="line">        i+=<span class="number">2</span>*s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i+s&lt;n)</span><br><span class="line"><span class="comment">//剩下的元素个数m满足:s&lt;=m&lt;2*s</span></span><br><span class="line">        <span class="built_in">Merge</span>(x,y,i,i+s<span class="number">-1</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="comment">//剩下的元素个数m满足：m&lt;s</span></span><br><span class="line">        <span class="built_in">Merge</span>(x,y,i,i,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class Type&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(Type c[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    Type *d=<span class="keyword">new</span> Type[n];</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s&lt;n)&#123;</span><br><span class="line">        <span class="built_in">MergePass</span>(c,d,s,n);<span class="comment">//合并到数组d</span></span><br><span class="line">        s+=s;</span><br><span class="line">        <span class="comment">//就像图中有序的两个合并为一个</span></span><br><span class="line">        <span class="built_in">MergePass</span>(d,c,s,n);<span class="comment">//合并到数组c</span></span><br><span class="line">        s+=s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">delete</span>[] b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            cin&gt;&gt;num[i];</span><br><span class="line">        <span class="built_in">MergeSort</span>(num,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            cout&lt;&lt;num[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现输入n个0-1000的整数，n属于0-1000输出这些整数及他们的出现次数。输出到文件”out-txt”。输出顺序按照出现次数由大到小，次数相同时，数值小的在前"><a href="#实现输入n个0-1000的整数，n属于0-1000输出这些整数及他们的出现次数。输出到文件”out-txt”。输出顺序按照出现次数由大到小，次数相同时，数值小的在前" class="headerlink" title="实现输入n个0 ~ 1000的整数，n属于0 ~ 1000输出这些整数及他们的出现次数。输出到文件”out.txt”。输出顺序按照出现次数由大到小，次数相同时，数值小的在前"></a>实现输入n个0 ~ 1000的整数，n属于0 ~ 1000输出这些整数及他们的出现次数。输出到文件”out.txt”。输出顺序按照出现次数由大到小，次数相同时，数值小的在前</h3><p>输入</p><p>12</p><p>5 3 3 4 5 6 8 7 9 6 4 3</p><p>输出</p><p>3 3,4 2,5 2，6 2，7 1，8 1,9 1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;<span class="comment">//数据域，保存结点的值</span></span><br><span class="line">    <span class="keyword">int</span> times;<span class="comment">//统计次数</span></span><br><span class="line">&#125;E;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tongji</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//n代表数组长度 初始化</span></span><br><span class="line">    E arr[<span class="number">1000</span>],m;</span><br><span class="line">    arr[<span class="number">0</span>].data=a[<span class="number">0</span>];</span><br><span class="line">    arr[<span class="number">0</span>].times=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;<span class="comment">//i是原数组下标，j是新数组下标</span></span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>,q=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>;s&lt;<span class="number">1000</span>;s++)&#123;</span><br><span class="line">        arr[s].times=<span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i]!=arr[j].data&amp;&amp;arr[j].times!=<span class="number">-1</span>) j++;</span><br><span class="line">        <span class="keyword">if</span>(arr[j].times==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">//无相同元素</span></span><br><span class="line">            arr[j].data=a[i];</span><br><span class="line">            arr[j].times=<span class="number">1</span>;</span><br><span class="line">            p=j,q=j;</span><br><span class="line">            <span class="comment">//调换，次数大的在前面，次数相同的数字小的在前</span></span><br><span class="line">            <span class="keyword">while</span>(arr[p].times&gt;arr[p<span class="number">-1</span>].times&amp;&amp;p&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                m=arr[p];</span><br><span class="line">                arr[p]=arr[p<span class="number">-1</span>];</span><br><span class="line">                arr[p<span class="number">-1</span>]=m;</span><br><span class="line">                p--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(arr[q].times==arr[q<span class="number">-1</span>].times&amp;&amp;arr[q].data&lt;arr[q<span class="number">-1</span>].data&amp;&amp;q&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                m=arr[q];</span><br><span class="line">                arr[q]=arr[q<span class="number">-1</span>];</span><br><span class="line">                arr[q<span class="number">-1</span>]=m;</span><br><span class="line">                q--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//相同元素</span></span><br><span class="line">            arr[j].times++;</span><br><span class="line">            p=j,q=j;</span><br><span class="line">            <span class="comment">//调换，次数大的在前面，次数相同的数字小的在前</span></span><br><span class="line">            <span class="keyword">while</span>(arr[p].times&gt;arr[p<span class="number">-1</span>].times&amp;&amp;p&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                m=arr[p];</span><br><span class="line">                arr[p]=arr[p<span class="number">-1</span>];</span><br><span class="line">                arr[p<span class="number">-1</span>]=m;</span><br><span class="line">                p--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(arr[q].times==arr[q<span class="number">-1</span>].times&amp;&amp;arr[q].data&lt;arr[q<span class="number">-1</span>].data&amp;&amp;q&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                m=arr[q];</span><br><span class="line">                arr[q]=arr[q<span class="number">-1</span>];</span><br><span class="line">                arr[q<span class="number">-1</span>]=m;</span><br><span class="line">                q--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;j) r=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出到文件</span></span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp=<span class="built_in">fopen</span>(<span class="string">&quot;example.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=r;i++)</span><br><span class="line">        <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d %d&quot;</span>,arr[i].data,arr[i].times);</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>||n&gt;<span class="number">1000</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入错误！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;arr[i];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;<span class="number">0</span>||arr[i]&gt;<span class="number">1000</span>)&#123;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">tongji</span>(arr,n);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入有误！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5. 堆排序"></a>5. 堆排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sift</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;<span class="comment">//在low到high范围内对下标为low的元素进行调整</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    i=low,j=<span class="number">2</span>*i;</span><br><span class="line">    <span class="keyword">int</span> temp=a[low];<span class="comment">//以low为根向下交换temp存储我们要调整的元素值</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high)&#123;<span class="comment">//当孩子结点下标合法</span></span><br><span class="line">        <span class="keyword">if</span>(j&lt;high&amp;&amp;a[j]&lt;a[j+<span class="number">1</span>])j++;<span class="comment">//大顶堆 与较大的孩子进行比较</span></span><br><span class="line">        <span class="keyword">if</span>(temp&lt;a[j])&#123;</span><br><span class="line">            a[i]=a[j];<span class="comment">//把孩子结点上调代替父亲节点的位置</span></span><br><span class="line">            i=j;</span><br><span class="line">            j=<span class="number">2</span>*i;<span class="comment">//依次向下进行比较和调整，把较大值孩子结点的下标赋值给i，j指向较大值孩子结点的孩子结点下标。</span></span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i]=temp;<span class="comment">//插入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)<span class="built_in">sift</span>(a,i,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line">        temp=a[<span class="number">1</span>];<span class="comment">//每次和最大值交换</span></span><br><span class="line">        a[<span class="number">1</span>]=a[i];</span><br><span class="line">        a[i]=temp;</span><br><span class="line">        <span class="built_in">sift</span>(a,<span class="number">1</span>,i<span class="number">-1</span>);<span class="comment">//只需要调整一次就好</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;19-20真题&quot;&gt;&lt;a href=&quot;#19-20真题&quot; class=&quot;headerlink&quot; title=&quot;19-20真题&quot;&gt;&lt;/a&gt;19-20真题&lt;/h2&gt;&lt;h3 id=&quot;自操作表，指表中元素被find函数访问到，就自动移动到表头，并保持其他元素顺序不变&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>16-18真题</title>
    <link href="http://example.com/posts/78993486.html"/>
    <id>http://example.com/posts/78993486.html</id>
    <published>2022-09-06T12:14:06.000Z</published>
    <updated>2022-10-04T03:18:28.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="16-18真题"><a href="#16-18真题" class="headerlink" title="16-18真题"></a>16-18真题</h2><h3 id="1-循环双链表，结点previous-data-next和访问频度域freq-初试为0，每当链表进行一次Locate-L-x-运算时，令x结点freq域的值加1，并使其链表结点频度按递减顺序排序，并实现Locate-L-x-。"><a href="#1-循环双链表，结点previous-data-next和访问频度域freq-初试为0，每当链表进行一次Locate-L-x-运算时，令x结点freq域的值加1，并使其链表结点频度按递减顺序排序，并实现Locate-L-x-。" class="headerlink" title="1. 循环双链表，结点previous,data,next和访问频度域freq,初试为0，每当链表进行一次Locate(L,x)运算时，令x结点freq域的值加1，并使其链表结点频度按递减顺序排序，并实现Locate(L,x)。"></a>1. 循环双链表，结点previous,data,next和访问频度域freq,初试为0，每当链表进行一次Locate(L,x)运算时，令x结点freq域的值加1，并使其链表结点频度按递减顺序排序，并实现Locate(L,x)。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 找到指定结点 2. 访问频度+1 3. 进行排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line">DNode *h;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(DNode *h)</span></span>&#123;<span class="comment">//根据freq降序排列，写成一个函数</span></span><br><span class="line">    DNode *p,*q,*pre;</span><br><span class="line">    p=h-&gt;next-&gt;next;<span class="comment">//指向第二个结点</span></span><br><span class="line">    h-&gt;next-&gt;next=<span class="literal">NULL</span>;<span class="comment">//隔开第一个结点和第二个结点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        pre=h;</span><br><span class="line">        <span class="comment">//根据freq降序</span></span><br><span class="line">        <span class="keyword">while</span>(pre-&gt;next!=<span class="literal">NULL</span>&amp;&amp;(pre-&gt;next-&gt;freq)&gt;(p-&gt;freq))</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        p-&gt;next=pre-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pre-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            pre-&gt;next-&gt;prior=p;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next=p;</span><br><span class="line">        p-&gt;prior=pre;</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LocateNode</span><span class="params">(DNode *h,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    DNode *p;</span><br><span class="line">    p=h-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//查找x所在位置</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=x)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;freq++;<span class="comment">//x元素的freq++</span></span><br><span class="line">    <span class="comment">//sort(h);//下面是sort</span></span><br><span class="line">    DNode *q,*pre;</span><br><span class="line">    p=h-&gt;next-&gt;next;</span><br><span class="line">    h-&gt;next-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        pre=h;</span><br><span class="line">        <span class="comment">//根据freq降序</span></span><br><span class="line">        <span class="keyword">while</span>(pre-&gt;next!=<span class="literal">NULL</span>&amp;&amp;(pre-&gt;next-&gt;freq)&gt;(p-&gt;freq))</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        p-&gt;next=pre-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pre-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            pre-&gt;next-&gt;prior=p;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next=p;</span><br><span class="line">        p-&gt;prior=pre;<span class="comment">//双链表需要链接四个指针</span></span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-X和Y是用结点大小为1的单链表表示的串，请设计算法找出X中第一个不在Y中出现的字符"><a href="#2-X和Y是用结点大小为1的单链表表示的串，请设计算法找出X中第一个不在Y中出现的字符" class="headerlink" title="2. X和Y是用结点大小为1的单链表表示的串，请设计算法找出X中第一个不在Y中出现的字符"></a>2. X和Y是用结点大小为1的单链表表示的串，请设计算法找出X中第一个不在Y中出现的字符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//X(1-n)：Y(对于X中的每一个结点遍历Y中的所有结点)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(LinkList L1,LinkList L2)</span></span>&#123;</span><br><span class="line">    LinkList p,q;</span><br><span class="line">    p=L1-&gt;next;</span><br><span class="line">    q=L2-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data==q-&gt;data)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            q=L2-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;x中的字符全部在y中出现过&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;x中第一个不在Y中出现的字符为：&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-试编写算法以单链表存储结构实现直接选择排序"><a href="#3-试编写算法以单链表存储结构实现直接选择排序" class="headerlink" title="3. 试编写算法以单链表存储结构实现直接选择排序"></a>3. 试编写算法以单链表存储结构实现直接选择排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n个数据，排n-1次,每次选择待排序列中最小值交换到待排序列中的第一位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListChooseSort</span><span class="params">(LNode *head)</span></span>&#123;</span><br><span class="line">    <span class="comment">//用选择法进行排序</span></span><br><span class="line">    LNode *p,*q;</span><br><span class="line">    LNode *temp;</span><br><span class="line">    <span class="keyword">for</span>(p=head-&gt;next;p-&gt;next;p=p-&gt;next)&#123;<span class="comment">//从第一个结点开始，到倒数第二个结点结束</span></span><br><span class="line">        temp=p;</span><br><span class="line">        <span class="keyword">for</span>(q=p-&gt;next;q;q=q-&gt;next)&#123;<span class="comment">//从p的下一个结点开始，到倒数第二个结点结束</span></span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;data&gt;q-&gt;data)</span><br><span class="line">                temp=q;<span class="comment">//选择q</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(p-&gt;data,temp-&gt;data);<span class="comment">//把待排序列中最小值交换到p结点的数据域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Rand为-0-1-均匀随机产生数"><a href="#4-Rand为-0-1-均匀随机产生数" class="headerlink" title="4. Rand为[0,1]均匀随机产生数"></a>4. Rand为[0,1]均匀随机产生数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">        a[i]=<span class="built_in">rand</span>()*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1.</span> <span class="built_in">rand</span>()不需要参数，它会返回一个从<span class="number">0</span>到最大随机数的任意整数，最大随机数的大小通常是固定的一个大整数</span><br><span class="line"><span class="number">2.</span> <span class="number">0</span>~<span class="number">99</span>这<span class="number">100</span>个整数中的一个随机数，可以表达为:<span class="keyword">int</span> num=<span class="built_in">rand</span>()%<span class="number">100</span>;</span><br><span class="line"><span class="number">3.</span> 产生<span class="number">1</span>~<span class="number">100</span>，表达为:<span class="keyword">int</span> num=<span class="built_in">rand</span>()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-二分法实现快速幂"><a href="#5-二分法实现快速幂" class="headerlink" title="5. 二分法实现快速幂"></a>5. 二分法实现快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> half;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;<span class="comment">//递归转移方程</span></span><br><span class="line">        half=<span class="built_in">fun</span>(x,n/<span class="number">2</span>);<span class="comment">//x的n/2次方</span></span><br><span class="line">        <span class="keyword">return</span> x*half*half;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        half=<span class="built_in">fun</span>(x,n/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> half*half;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result=<span class="built_in">fun</span>(x,n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">        result=<span class="number">1</span>/result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            n=n<span class="number">-1</span>;</span><br><span class="line">            t*=x;</span><br><span class="line">        &#125;</span><br><span class="line">        x*=x;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-实现一个栈Stack，要求实现Push-入栈-，Pop（出栈），Min的时间复杂度为O-1"><a href="#6-实现一个栈Stack，要求实现Push-入栈-，Pop（出栈），Min的时间复杂度为O-1" class="headerlink" title="6. 实现一个栈Stack，要求实现Push(入栈)，Pop（出栈），Min的时间复杂度为O(1)"></a>6. 实现一个栈Stack，要求实现Push(入栈)，Pop（出栈），Min的时间复杂度为O(1)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用两个栈_data和_min，_min作为辅助栈。元素value入栈时，将value和_min栈顶元素做比较，如果value小于等于_min.top()，将value分别push到_data和_min，否则value只push到_data中，元素出栈时_data和_min都执行pop操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; _data,_min;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="comment">//把新元素添加到辅助栈</span></span><br><span class="line">    _data.<span class="built_in">push</span>(value);</span><br><span class="line">    <span class="comment">//当新元素比之前的最小元素小时，把新元素插入到辅助栈里</span></span><br><span class="line">    <span class="comment">//否则把之前的最小元素重复插入辅助栈里</span></span><br><span class="line">    <span class="keyword">if</span>(_min.<span class="built_in">size</span>() == <span class="number">0</span> || value &lt; min.<span class="built_in">top</span>())</span><br><span class="line">        _min.<span class="built_in">push</span>(value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        _min.<span class="built_in">push</span>(_min.<span class="built_in">top</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_data.<span class="built_in">size</span>()&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    _data.<span class="built_in">pop</span>();</span><br><span class="line">    _min.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">min_empty</span>())</span><br><span class="line">        <span class="keyword">return</span> _min.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-用二叉树的存储结构将一棵二叉树变成二叉排序树"><a href="#7-用二叉树的存储结构将一棵二叉树变成二叉排序树" class="headerlink" title="7. 用二叉树的存储结构将一棵二叉树变成二叉排序树"></a>7. 用二叉树的存储结构将一棵二叉树变成二叉排序树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先遍历一遍二叉树获得所有结点值，再依次插入二叉排序中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BTSInsert</span><span class="params">(BTNode *p,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p=(BTNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">        p-&gt;lchild=p-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;data=data;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data==p-&gt;data)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(data&lt;p-&gt;data)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BTSInsert</span>(p-&gt;lchild,data);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BTSInsert</span>(p-&gt;rchild,data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-有两个n维向量相乘，求其点乘的最小值"><a href="#8-有两个n维向量相乘，求其点乘的最小值" class="headerlink" title="8. 有两个n维向量相乘，求其点乘的最小值"></a>8. 有两个n维向量相乘，求其点乘的最小值</h3><p>两个n维的向量，向量的点乘是指向量对应维度的乘积相加，但是我们可以将向量维度交换下可以得到更小的向量点乘，例如三维向量【1,3,-5】和【4,-2,-1】，最小向量点乘为27，即将维度变为【3,1,-5】和【-2,-1,4】<br>只要把第一个向量进行全排列，就可以得到所有的乘积<br>程序设计要求：输入一个整数n为向量的维度，然后输入两个n维度的向量，用空格区别向量元素，输出为一行，包含一个整数，为最小的点乘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 进行全排列:三行代码 交换 进入下一层 再交换</span></span><br><span class="line"><span class="comment">2. 当排列好之后进行点乘，当结果小于当前最小值时候进行更新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxnn=<span class="number">1e9</span>+<span class="number">1</span>;<span class="comment">//数值的最大值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn=<span class="number">1e2</span>+<span class="number">1</span>;<span class="comment">//数组的最大值</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans=Maxnn;</span><br><span class="line"><span class="keyword">int</span> a[Maxn],b[Maxn];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;n)&#123;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            sum+=a[i]*b[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;ans)</span><br><span class="line">            ans=sum;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=n;i++)<span class="comment">//从第t个元素交换到第n的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[t],a[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(t+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">swap</span>(a[t],a[i]);<span class="comment">//回溯，使得a[t]的值不变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="built_in">backtrack</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-给出五位任意字母或者数组，输出他们排列组合所得到的的所有的合法序列。合法序列是指字符串包含元音字母，且元音字母前后都必须是辅音字母。元音字母为-aeiou"><a href="#9-给出五位任意字母或者数组，输出他们排列组合所得到的的所有的合法序列。合法序列是指字符串包含元音字母，且元音字母前后都必须是辅音字母。元音字母为-aeiou" class="headerlink" title="9. 给出五位任意字母或者数组，输出他们排列组合所得到的的所有的合法序列。合法序列是指字符串包含元音字母，且元音字母前后都必须是辅音字母。元音字母为:aeiou"></a>9. 给出五位任意字母或者数组，输出他们排列组合所得到的的所有的合法序列。合法序列是指字符串包含元音字母，且元音字母前后都必须是辅音字母。元音字母为:aeiou</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 有元音字母2. 0,4不能为元音 3. 不能有两个元音相邻的情况</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;i)&#123;</span><br><span class="line">        temp=s[i];</span><br><span class="line">        s[i]=s[n];</span><br><span class="line">        s[n]=temp;</span><br><span class="line">        i++;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用来判断是否可以打印，0不能打印，1可以打印</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrint</span><span class="params">(<span class="keyword">char</span> *perm,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> first=perm[<span class="number">0</span>];<span class="comment">//0</span></span><br><span class="line">    <span class="keyword">char</span> end=perm[to];<span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span>(first==<span class="string">&#x27;a&#x27;</span>||first==<span class="string">&#x27;e&#x27;</span>||first==<span class="string">&#x27;i&#x27;</span>||first==<span class="string">&#x27;o&#x27;</span>||first==<span class="string">&#x27;u&#x27;</span>||end==<span class="string">&#x27;a&#x27;</span>||end==<span class="string">&#x27;e&#x27;</span>||end==<span class="string">&#x27;i&#x27;</span>||end==<span class="string">&#x27;o&#x27;</span>||end==<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;<span class="comment">//对一个元素都标记一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=to;i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp=perm[i];</span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="string">&#x27;a&#x27;</span>||tmp==<span class="string">&#x27;e&#x27;</span>||tmp==<span class="string">&#x27;i&#x27;</span>||tmp==<span class="string">&#x27;o&#x27;</span>||tmp==<span class="string">&#x27;u&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;<span class="comment">//前面一个元素是原因</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag=<span class="number">1</span>;<span class="comment">//表明这个元素是元音</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag=<span class="number">0</span>;<span class="comment">//表明这个元素是辅音</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=to;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(perm==<span class="string">&#x27;a&#x27;</span>||perm==<span class="string">&#x27;e&#x27;</span>||perm==<span class="string">&#x27;i&#x27;</span>||perm==<span class="string">&#x27;o&#x27;</span>||perm==<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CalAllPer</span><span class="params">(<span class="keyword">char</span> *perm,<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span><span class="comment">//from:0 to:4</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(to &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(from == to)&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="built_in">IsPrint</span>(perm,to);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;to;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,perm[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=from;j&lt;to;j++)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(perm[j],perm[from]);</span><br><span class="line">            <span class="built_in">CalAllPer</span>(perm,from+<span class="number">1</span>,to);<span class="comment">//递归</span></span><br><span class="line">            <span class="built_in">swap</span>(perm[j],perm[from]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[]=<span class="string">&quot;abelc&quot;</span>;</span><br><span class="line">    <span class="built_in">CalAllPer</span>(a,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;16-18真题&quot;&gt;&lt;a href=&quot;#16-18真题&quot; class=&quot;headerlink&quot; title=&quot;16-18真题&quot;&gt;&lt;/a&gt;16-18真题&lt;/h2&gt;&lt;h3 id=&quot;1-循环双链表，结点previous-data-next和访问频度域freq-初试为0，每</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>12-15真题</title>
    <link href="http://example.com/posts/10a5f53c.html"/>
    <id>http://example.com/posts/10a5f53c.html</id>
    <published>2022-09-06T12:13:49.000Z</published>
    <updated>2022-11-10T11:44:37.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="12-15真题"><a href="#12-15真题" class="headerlink" title="12-15真题"></a>12-15真题</h2><h3 id="求数列1-1-2-1-3-1-4-…1-n"><a href="#求数列1-1-2-1-3-1-4-…1-n" class="headerlink" title="求数列1-1/2+1/3-1/4+…1/n"></a>求数列1-1/2+1/3-1/4+…1/n</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 输入n，即为终止数列的数字</span></span><br><span class="line"><span class="comment">2. 循环判定数字，分母为奇数时，系数为正，分母为偶数时，系数为负</span></span><br><span class="line"><span class="comment">3. 最后在循环的过程中执行数字的累加，最后输出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> total;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            flag=<span class="number">1.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag=<span class="number">-1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        total+=(flag)/(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;total is&quot;</span>&lt;&lt;total&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输入字符串以！结束，小写转大写，存到text-txt文件中"><a href="#输入字符串以！结束，小写转大写，存到text-txt文件中" class="headerlink" title="输入字符串以！结束，小写转大写，存到text.txt文件中"></a>输入字符串以！结束，小写转大写，存到text.txt文件中</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 利用while循环输入字符串，以！结束，利用len记录字符长度</span></span><br><span class="line"><span class="comment">2. 循环将小写字符转化成大写字符</span></span><br><span class="line"><span class="comment">3. 将字符串写入文件，然后关闭文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    FILE *p;</span><br><span class="line">    <span class="keyword">int</span> i,len=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入一串英文字符&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span>((str[len]=<span class="built_in">getchar</span>())!=<span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="keyword">if</span>(str[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;str[i]&lt;<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            str[i]-=<span class="number">32</span>;</span><br><span class="line">    p=<span class="built_in">fopen</span>(<span class="string">&quot;text.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(str,p);</span><br><span class="line">    <span class="built_in">fclose</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输入某年某月某日，判断这一天是这一年的第几天"><a href="#输入某年某月某日，判断这一天是这一年的第几天" class="headerlink" title="输入某年某月某日，判断这一天是这一年的第几天"></a>输入某年某月某日，判断这一天是这一年的第几天</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 输入年月日</span></span><br><span class="line"><span class="comment">2. 判断月份，用switch来判定添加的月份包含的日期</span></span><br><span class="line"><span class="comment">3. 如果月份超过2月，2月按28天来算，再加上当月的天数</span></span><br><span class="line"><span class="comment">4. 最后判定是否为闰年，如果是闰年且月份超过2月再加一天，输出总天数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,month,day,sum,leap;</span><br><span class="line">    cin&gt;&gt;year&gt;&gt;month&gt;&gt;day;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:sum=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:sum=<span class="number">31</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:sum=<span class="number">59</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:sum=<span class="number">90</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:sum=<span class="number">120</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:sum=<span class="number">151</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:sum=<span class="number">181</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:sum=<span class="number">212</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:sum=<span class="number">243</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:sum=<span class="number">273</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:sum=<span class="number">304</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:sum=<span class="number">334</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:cout&lt;&lt;<span class="string">&quot;data error&quot;</span>&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=day;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>||year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)</span><br><span class="line">        leap=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        leap=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(leap&amp;&amp;month&gt;<span class="number">2</span>)sum++;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="将文件a和b中的两个字符串交叉合并成为一个字符串，并写入c"><a href="#将文件a和b中的两个字符串交叉合并成为一个字符串，并写入c" class="headerlink" title="将文件a和b中的两个字符串交叉合并成为一个字符串，并写入c"></a>将文件a和b中的两个字符串交叉合并成为一个字符串，并写入c</h3><p>列：”aaaaa”和”bbb”合并结果为”abababaa”，”bbb”和”aaaaa”合并结果为”bababaaaa”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 将文件a和文件b的内容分别用两个不同的文件指针fp和fq来打开</span></span><br><span class="line"><span class="comment">2. 将文件c用fr来打开</span></span><br><span class="line"><span class="comment">3. 循环读取fp和fq的字符交叉存放到fr中</span></span><br><span class="line"><span class="comment">4. 最后将fr的内容从头到尾写道fp中，然后将关闭文件程序结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *fp,*fq,*fc;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span>((fp=<span class="built_in">fopen</span>(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can&#x27;t open file a.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((fp=<span class="built_in">fopen</span>(<span class="string">&quot;b.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can&#x27;t open file b.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fr=<span class="built_in">fopen</span>(<span class="string">&quot;c.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">feof</span>(fp))<span class="comment">//先输入a文件内容，再输入b文件内容</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch=<span class="built_in">fgetc</span>(fp);</span><br><span class="line">        <span class="built_in">fputc</span>(ch,fr);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">feof</span>(fq))&#123;</span><br><span class="line">            ch=<span class="built_in">fgetc</span>(fq);</span><br><span class="line">            <span class="built_in">fputc</span>(ch,fr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">feof</span>(fq))&#123;</span><br><span class="line">        ch=<span class="built_in">fgetc</span>(fq);</span><br><span class="line">        <span class="built_in">fputc</span>(ch,fr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">    <span class="built_in">fclose</span>(fq);</span><br><span class="line">    <span class="built_in">fclose</span>(fr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现student类对学号姓名三门课的成绩进行管理"><a href="#实现student类对学号姓名三门课的成绩进行管理" class="headerlink" title="实现student类对学号姓名三门课的成绩进行管理"></a>实现student类对学号姓名三门课的成绩进行管理</h3><ol><li>单独设置获取三门课的成绩</li><li>可以计算平均成绩</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 写input函数，输入学生的信息，循环读取三个学生的姓名成绩</span></span><br><span class="line"><span class="comment">2. 写avg函数，根据每名学生的三门课的成绩信息，来计算这位学生的平均成绩</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> num[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">float</span> score[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> aver;</span><br><span class="line">&#125;stu[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(student stu[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;please enter the information of student&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%f%f%f&quot;</span>,&amp;stu[i].num,&amp;stu[i].name,&amp;stu[i].score[<span class="number">0</span>],&amp;stu[i].score[<span class="number">1</span>],&amp;stu[i].score[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">avg</span><span class="params">(struct student stu[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">float</span> sum,aver;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">            sum+=(stu[j].score[i]);</span><br><span class="line">       aver=sum/<span class="number">3.0</span>;</span><br><span class="line">        stu[i].aver=aver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">input</span>(student stu[]);</span><br><span class="line">    <span class="built_in">avg</span>(student stu[]);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;%s%s%f%f%f%f&quot;</span>,stu[i].num,stu[i].name,stu[i].score[<span class="number">0</span>],stu[i].score[<span class="number">1</span>],stu[i].score[<span class="number">2</span>],stu[i].aver);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入n组等长字符串，用指针的方法进行冒泡排序，在函数中实现"><a href="#输入n组等长字符串，用指针的方法进行冒泡排序，在函数中实现" class="headerlink" title="输入n组等长字符串，用指针的方法进行冒泡排序，在函数中实现"></a>输入n组等长字符串，用指针的方法进行冒泡排序，在函数中实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 写冒泡排序，用字符串比较来交换的方法来进行排序</span></span><br><span class="line"><span class="comment">2. 利用指针数组p来存放输入的数组</span></span><br><span class="line"><span class="comment">3. p和字符的组数n传参排序，最后输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *str[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">char</span> *temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;size-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str[j],str[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                temp=str[j];</span><br><span class="line">                str[j]=str[j+<span class="number">1</span>];</span><br><span class="line">                str[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p[<span class="number">200</span>],str[<span class="number">200</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i,n;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入字符串的个数：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;str[i];</span><br><span class="line">        p[i]=str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p,n);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后的结果:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;p[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输入一组字符倒序输出，输出结果保存到out-txt"><a href="#输入一组字符倒序输出，输出结果保存到out-txt" class="headerlink" title="输入一组字符倒序输出，输出结果保存到out.txt"></a>输入一组字符倒序输出，输出结果保存到out.txt</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">string</span><span class="params">(<span class="keyword">char</span> *str,FILE *fp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(*str==<span class="string">&#x27;\0&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">string</span>(str+<span class="number">1</span>,fp);</span><br><span class="line">        <span class="built_in">fputc</span>(*str,fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> *ch;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">if</span>(fp=<span class="built_in">fopen</span>(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;cannot open file&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;input a string:\n&quot;</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    ch=str;</span><br><span class="line">    <span class="built_in">string</span>(ch,fp);</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="黑色星期五，每个月中十三号是星期五称为黑色星期五"><a href="#黑色星期五，每个月中十三号是星期五称为黑色星期五" class="headerlink" title="黑色星期五，每个月中十三号是星期五称为黑色星期五"></a>黑色星期五，每个月中十三号是星期五称为黑色星期五</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1900年1月1日星期一</span></span><br><span class="line"><span class="comment">总天数=该年之前的年份总天数+该年1月1日到该月1日为止的天数+该月1日到该日的天数</span></span><br><span class="line"><span class="comment">1. 完成三个函数，第一个返回平年每月的天数，第二个返回闰年每月的天数，第三个判断闰年还是平年</span></span><br><span class="line"><span class="comment">2. 从1900年1月1日开始往后加，求总天数，先加到前一年通过是否是闰年判断总天数</span></span><br><span class="line"><span class="comment">3. 根据返回的月份来累加天数，在根据日加到最后的天数13即为总天数</span></span><br><span class="line"><span class="comment">4. 总天数取余数结果为5即为黑色星期五</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>||year%<span class="number">100</span>!=<span class="number">0</span>&amp;&amp;year%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1900</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">run</span>(i)==<span class="number">1</span>)</span><br><span class="line">            sum+=<span class="number">366</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum+=<span class="number">365</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">run</span>(n)==<span class="number">1</span>)&#123;</span><br><span class="line">        arr[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">run</span>(n)==<span class="number">1</span>)&#123;</span><br><span class="line">            sum=<span class="number">13</span>+sum;</span><br><span class="line">            <span class="keyword">if</span>(sum%<span class="number">7</span>==<span class="number">5</span>)&#123;</span><br><span class="line">                cout&lt;&lt;n&lt;&lt;<span class="string">&quot;年&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;月&quot;</span>&lt;&lt;<span class="string">&quot;13号&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            sum=sum<span class="number">-13</span>+arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树以二叉链表存储，证明二叉树是满二叉树"><a href="#二叉树以二叉链表存储，证明二叉树是满二叉树" class="headerlink" title="二叉树以二叉链表存储，证明二叉树是满二叉树"></a>二叉树以二叉链表存储，证明二叉树是满二叉树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个n层满二叉树总数为2的n次幂-1，利用先序遍历递归</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumtree</span><span class="params">(Bitree *T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">sumtree</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">sumtree</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="built_in">height</span>(T-&gt;lchild);<span class="comment">//统计左子树高度</span></span><br><span class="line">    <span class="keyword">int</span> v=<span class="built_in">height</span>(T-&gt;rchild);<span class="comment">//统计右子树高度</span></span><br><span class="line">    <span class="keyword">if</span>(u&gt;v) <span class="keyword">return</span> u+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> v+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiTree *T;</span><br><span class="line">    <span class="built_in">sumtree</span>(T);</span><br><span class="line">    <span class="keyword">int</span> h=<span class="built_in">height</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(i==(<span class="built_in">pow</span>(<span class="number">2</span>,h)<span class="number">-1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;此二叉树为满二叉树&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;此二叉树不是满二叉树&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉排序树以x为根节点的子树。要求用非递归算法并释放掉该结点。-删除某个结点"><a href="#二叉排序树以x为根节点的子树。要求用非递归算法并释放掉该结点。-删除某个结点" class="headerlink" title="二叉排序树以x为根节点的子树。要求用非递归算法并释放掉该结点。(删除某个结点)"></a>二叉排序树以x为根节点的子树。要求用非递归算法并释放掉该结点。(删除某个结点)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete</span><span class="params">(BiTree *p)</span></span>&#123;</span><br><span class="line">    BiTree *q,*s;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rchild==<span class="literal">NULL</span>)<span class="comment">//右子树空则只需重接它的左子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;lchild;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild==<span class="literal">NULL</span>)<span class="comment">//只需要重接它的右子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;rchild;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//左右子树均不空</span></span><br><span class="line">        q=p;</span><br><span class="line">        s=p-&gt;lchild;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;rchild)&#123;<span class="comment">//转左，然后向右走到尽头</span></span><br><span class="line">            q=s;</span><br><span class="line">            s=s-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data=s-&gt;data;<span class="comment">//s指向被删节点的直接前驱</span></span><br><span class="line">        <span class="keyword">if</span>(q!=p)<span class="comment">//s有右子树</span></span><br><span class="line">            q-&gt;rchild=s-&gt;lchild;<span class="comment">//重新连接q的右子树</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            q-&gt;lchild=s-&gt;lchild;<span class="comment">//重新连接q的左子树</span></span><br><span class="line">        <span class="built_in">free</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ABCDEF六个变量分别是1-6的整数，且各不相同，组成一个等边三角形，找出三边相等有多少种可能性。即A-B-D-A-C-F-D-E-F"><a href="#ABCDEF六个变量分别是1-6的整数，且各不相同，组成一个等边三角形，找出三边相等有多少种可能性。即A-B-D-A-C-F-D-E-F" class="headerlink" title="ABCDEF六个变量分别是1-6的整数，且各不相同，组成一个等边三角形，找出三边相等有多少种可能性。即A+B+D=A+C+F=D+E+F"></a>ABCDEF六个变量分别是1-6的整数，且各不相同，组成一个等边三角形，找出三边相等有多少种可能性。即A+B+D=A+C+F=D+E+F</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,d,e,f;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">6</span>;a&gt;=<span class="number">1</span>;a--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(b=<span class="number">6</span>;b&gt;=<span class="number">1</span>;b--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b!=a)&#123;</span><br><span class="line">                <span class="keyword">for</span>(c=<span class="number">6</span>;c&gt;=<span class="number">1</span>;c--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(b!=c&amp;&amp;a!=c)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(d=<span class="number">6</span>;d&gt;=<span class="number">1</span>;d--)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(d!=c&amp;&amp;d!=b&amp;&amp;d!=a)&#123;</span><br><span class="line">                                <span class="keyword">for</span>(e=<span class="number">6</span>;e&gt;=<span class="number">1</span>;e--)&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(e!=a&amp;&amp;e!=b&amp;&amp;e!=c&amp;&amp;e!=d)&#123;</span><br><span class="line">                                        <span class="keyword">for</span>(f=<span class="number">6</span>;f&gt;=<span class="number">1</span>;f--)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(f!=a&amp;&amp;f!=b&amp;&amp;f!=c&amp;&amp;f!=e)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(a+b+d==a+c+f=d+e+f)</span><br><span class="line">                                                    cnt++;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;12-15真题&quot;&gt;&lt;a href=&quot;#12-15真题&quot; class=&quot;headerlink&quot; title=&quot;12-15真题&quot;&gt;&lt;/a&gt;12-15真题&lt;/h2&gt;&lt;h3 id=&quot;求数列1-1-2-1-3-1-4-…1-n&quot;&gt;&lt;a href=&quot;#求数列1-1-2-1-3</summary>
      
    
    
    
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>专业课数据结构部分合集</title>
    <link href="http://example.com/posts/a8b46908.html"/>
    <id>http://example.com/posts/a8b46908.html</id>
    <published>2022-08-10T12:08:59.000Z</published>
    <updated>2022-08-10T12:41:40.804Z</updated>
    
    
    
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
  </entry>
  
  <entry>
    <title>数据结构测试卷</title>
    <link href="http://example.com/posts/5c16dd3e.html"/>
    <id>http://example.com/posts/5c16dd3e.html</id>
    <published>2022-08-10T12:08:40.000Z</published>
    <updated>2022-08-10T12:41:31.625Z</updated>
    
    
    
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第二次习题课</title>
    <link href="http://example.com/posts/17be3fca.html"/>
    <id>http://example.com/posts/17be3fca.html</id>
    <published>2022-08-10T12:08:01.000Z</published>
    <updated>2022-11-10T10:02:29.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构第二次习题课"><a href="#数据结构第二次习题课" class="headerlink" title="数据结构第二次习题课"></a>数据结构第二次习题课</h2><h3 id="二叉树按二叉链表形式存储"><a href="#二叉树按二叉链表形式存储" class="headerlink" title="二叉树按二叉链表形式存储"></a>二叉树按二叉链表形式存储</h3><ol><li>建立完全二叉树的算法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode,*BiTree;</span><br><span class="line"><span class="comment">//采用先序遍历构建二叉树</span></span><br><span class="line"><span class="function">BiTree <span class="title">CreateTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    BiTree *bt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) bt=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        bt=(BiTree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">        bt-&gt;data=x;</span><br><span class="line">        bt-&gt;lchild=<span class="built_in">CreateTree</span>();</span><br><span class="line">        bt-&gt;rchild=<span class="built_in">CreateTree</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>写一个判断给定的二叉树是否是完全二叉树的算法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">完全二叉树的结点编号于满二叉树的结点编号一一对应。</span></span><br><span class="line"><span class="comment">采用层序遍历算法，将所有结点加入序列，遇到空结点时，</span></span><br><span class="line"><span class="comment">查看队列中是否还有非空结点，若有则不少二叉树。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CheckTree</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T=<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    BiTree q[Max_Size];</span><br><span class="line">    <span class="keyword">int</span> front=<span class="number">0</span>,rear=<span class="number">0</span>;</span><br><span class="line">    BiTree p=T;</span><br><span class="line">    q[++rear]=p;</span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123;</span><br><span class="line">        p=q[++front];</span><br><span class="line">        <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)&#123;<span class="comment">//左右孩子入队</span></span><br><span class="line">            q[++rear]=p-&gt;lchild;</span><br><span class="line">            q[++rear]=p-&gt;rchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//空指针则出队，若知道队空都是空指针，就为完全二叉树。</span></span><br><span class="line">            <span class="keyword">while</span>(front&lt;rear)&#123;</span><br><span class="line">                p=q[++front];</span><br><span class="line">                <span class="keyword">if</span>(p)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//空指针后又有结点指针，不是完全二叉树。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="已知先序和中序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表"><a href="#已知先序和中序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表" class="headerlink" title="已知先序和中序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表"></a>已知先序和中序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定二叉树结点的先序和中序序列，可以唯一确定该二叉树，</span></span><br><span class="line"><span class="comment">因为前序序列的第一个元素是根节点，该元素将二叉树的中序序列分成两部分，</span></span><br><span class="line"><span class="comment">左边（设l个元素）表示左子树，若左边无元素，则说明左子树为空；</span></span><br><span class="line"><span class="comment">右边（设r个元素）表示右子树，若右边无元素，则右子树为空。</span></span><br><span class="line"><span class="comment">根据前序遍历：“根左右”的顺序，则由第二元素开始的l个结点序列构造左子树，</span></span><br><span class="line"><span class="comment">由前序序列最好r个元素序列与中序序列根右边的r个元素序列构造右子树。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode,*BiTree;</span><br><span class="line"><span class="function">BiTree <span class="title">CreateTree</span><span class="params">(<span class="keyword">int</span> pre[],<span class="keyword">int</span> l1,<span class="keyword">int</span> r1,<span class="keyword">int</span> in[],<span class="keyword">int</span> l2,<span class="keyword">int</span> r2)</span></span>&#123;</span><br><span class="line">    BiTree root=(BiTree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">    root-&gt;data=pre[l1];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=l2;i&lt;=r2;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i]==pre[l1])<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> llen=i-l2;<span class="comment">//左子树长度;</span></span><br><span class="line">    <span class="keyword">int</span> rlen=r2-i;<span class="comment">//右子树长度;</span></span><br><span class="line">    <span class="comment">//递归建立左子树</span></span><br><span class="line">    <span class="keyword">if</span>(llen==<span class="number">0</span>)&#123;</span><br><span class="line">        root-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root-&gt;lchild=<span class="built_in">CreateTree</span>(pre,l1+<span class="number">1</span>,l1+llen,in,l2,l2+llen<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归建立右子树</span></span><br><span class="line">    <span class="keyword">if</span>(rlen==<span class="number">0</span>)&#123;</span><br><span class="line">        root-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root-&gt;rchild=<span class="built_in">CreateTree</span>(pre,r1-rlen+<span class="number">1</span>,r1,in,r2-rlen+<span class="number">1</span>,r2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;<span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="已知中序和后序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表"><a href="#已知中序和后序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表" class="headerlink" title="已知中序和后序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表"></a>已知中序和后序遍历序列存于两个一维数组，编写算法建立该二叉树的二叉链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定二叉树结点的后序序列和中序序列,可以唯一确定该二叉树。</span></span><br><span class="line"><span class="comment">因为后序序列的第最后一个元素是根结点，该元素将二叉树的中序序列分成两部分，</span></span><br><span class="line"><span class="comment">左边(设l个元素)表示左子树，若左边无元素,则说明左子树为空;右边(设r个元素)是右子树，</span></span><br><span class="line"><span class="comment">若右边无元素,则右子树为空。根据后序遍历中“左子树-右子树-根”的顺序，</span></span><br><span class="line"><span class="comment">则由从第1个元素开始的l个结点序列和中序序列根左边的1个结点序列构造左子树,</span></span><br><span class="line"><span class="comment">由后序序列倒数第二个元素开始的r个结点序列与中序序列根右边的r个元素序列构造右子树。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BTNode, *BiTree;</span><br><span class="line"><span class="function">BiTree <span class="title">CreateTree</span><span class="params">(<span class="keyword">int</span> post[],<span class="keyword">int</span> l1,<span class="keyword">int</span> r1,<span class="keyword">int</span> in[],<span class="keyword">int</span> l2,intr2)</span></span>&#123;</span><br><span class="line">    BiTree root=(BiTree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">root-&gt;data=post[r1];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=l2;i&lt;=r2;i++)&#123;<span class="comment">//在中序序列中查找根节点并将其分成左右子树</span></span><br><span class="line">        <span class="keyword">if</span>(in[i]==post[r1]) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">int</span> llen=i-l2;<span class="comment">//左子树长度</span></span><br><span class="line">    <span class="keyword">int</span> rlen=r2-i;<span class="comment">//右子树长度</span></span><br><span class="line">    <span class="comment">//递归建立左子树</span></span><br><span class="line">    <span class="keyword">if</span>(llen==<span class="number">0</span>)&#123;</span><br><span class="line">root-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">root-&gt;lchild=<span class="built_in">CreateTree</span>(post,l1,l1+llen<span class="number">-1</span>,in,l2,l2+llen<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//递归建立右子树</span></span><br><span class="line"><span class="keyword">if</span>(rlen==<span class="number">0</span>)&#123;</span><br><span class="line">root-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">root-&gt;rchild=<span class="built_in">CreateTree</span>(post,l1+llen,r1<span class="number">-1</span>,in,r2-rlen+<span class="number">1</span>,r2);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> root;<span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以二叉链表形式存储，求该树第k层的结点数"><a href="#以二叉链表形式存储，求该树第k层的结点数" class="headerlink" title="以二叉链表形式存储，求该树第k层的结点数"></a>以二叉链表形式存储，求该树第k层的结点数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 105</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode,*BiTree;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">T指当前为根的树</span></span><br><span class="line"><span class="comment">depth指当前结点的深度</span></span><br><span class="line"><span class="comment">count计数处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Count_k_Leaf</span><span class="params">(BiTree T,<span class="keyword">int</span> depth,<span class="keyword">int</span> k,<span class="keyword">int</span> &amp;count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(depth==k) count++;<span class="comment">//当前结点在第k层</span></span><br><span class="line">    <span class="built_in">Count_k_Leaf</span>(T-&gt;lchild,depth+<span class="number">1</span>,k,count);</span><br><span class="line">    <span class="built_in">Count_k_Leaf</span>(T-&gt;rchild,depth+<span class="number">1</span>,k,count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归(层序遍历)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_k_Leaf</span><span class="params">(BiTree T,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    BiTree q[MAX_SIZE];</span><br><span class="line">    <span class="keyword">int</span> front=<span class="number">0</span>,rear=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> level=<span class="number">0</span>,count;<span class="comment">//分别表示层次值，第k层结点数</span></span><br><span class="line">    BiTree p=T;</span><br><span class="line">    q[++rear]=p;</span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123;</span><br><span class="line">        level++;<span class="comment">//深度+1</span></span><br><span class="line">        <span class="keyword">if</span>(level==k) cout=rear-front;</span><br><span class="line">        <span class="keyword">int</span> l=front+<span class="number">1</span>,r=rear;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;<span class="comment">//对level层结点进行遍历</span></span><br><span class="line">            <span class="keyword">if</span>(q[i]-&gt;lchild!=<span class="literal">NULL</span>) q[++rear]=q[i]-&gt;lchild;</span><br><span class="line">            <span class="keyword">if</span>(q[i]-&gt;rchild!=<span class="literal">NULL</span>) q[++rear]=q[i]-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        front=r;<span class="comment">//更新队列的指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="假定一棵树以二叉链表进行存储，T指向该二叉树的根节点指针，p和q分别指向该二叉树中任意两个节点的指针，试编写算法找到p和q节点的最近公共祖先。"><a href="#假定一棵树以二叉链表进行存储，T指向该二叉树的根节点指针，p和q分别指向该二叉树中任意两个节点的指针，试编写算法找到p和q节点的最近公共祖先。" class="headerlink" title="假定一棵树以二叉链表进行存储，T指向该二叉树的根节点指针，p和q分别指向该二叉树中任意两个节点的指针，试编写算法找到p和q节点的最近公共祖先。"></a>假定一棵树以二叉链表进行存储，T指向该二叉树的根节点指针，p和q分别指向该二叉树中任意两个节点的指针，试编写算法找到p和q节点的最近公共祖先。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">后续遍历的非递归算法的特性：当访问一个结点p时，栈中结点恰好是p结点的所有祖先</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 105</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode,*BiTree;</span><br><span class="line"><span class="function">BiTree <span class="title">SearchAncestor</span><span class="params">(BiTree T,BiTree p,BiTree q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//s辅助栈s1存储p结点的祖先s2存储q结点的祖先</span></span><br><span class="line">    BiTree s[MAX_SIZE],s1[MAX_SIZE],s2[MAX_SIZE];</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>,top1=<span class="number">0</span>,top2=<span class="number">0</span>;</span><br><span class="line">    BiTree t=T,r=<span class="literal">NULL</span>;<span class="comment">//遍历指针 最近访问过的结点 </span></span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="literal">NULL</span> || top &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            s[++top]=t;</span><br><span class="line">            t=t-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向右走</span></span><br><span class="line">        t=s[top];<span class="comment">//获取栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rchild &amp;&amp; t-&gt;rchild != r)&#123;<span class="comment">//若右子树存在且未被访问过</span></span><br><span class="line">            t=t-&gt;rchild;<span class="comment">//转向右子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//否则，弹出结点并访问</span></span><br><span class="line">            <span class="keyword">if</span>(t==p)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=top;i&gt;<span class="number">0</span>;i--) s1[++top1]=s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(t==q)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=top;i&gt;<span class="number">0</span>;i--) s2[++top2]=s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            top--;<span class="comment">//栈顶元素出栈</span></span><br><span class="line">            r=t;<span class="comment">//记录最近访问过的结点</span></span><br><span class="line">            t=<span class="literal">NULL</span>;<span class="comment">//结点访问完，重置t指针</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自顶向下查找最后一个相同结点</span></span><br><span class="line">    <span class="keyword">while</span>(top1&gt;<span class="number">0</span>&amp;&amp;top2&gt;<span class="number">0</span>&amp;&amp;s1[top1]==s2[top2])&#123;</span><br><span class="line">        top1--;top2--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s1[top1<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据结构第二次习题课&quot;&gt;&lt;a href=&quot;#数据结构第二次习题课&quot; class=&quot;headerlink&quot; title=&quot;数据结构第二次习题课&quot;&gt;&lt;/a&gt;数据结构第二次习题课&lt;/h2&gt;&lt;h3 id=&quot;二叉树按二叉链表形式存储&quot;&gt;&lt;a href=&quot;#二叉树按二叉链表形</summary>
      
    
    
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第一次习题课</title>
    <link href="http://example.com/posts/6c6a429c.html"/>
    <id>http://example.com/posts/6c6a429c.html</id>
    <published>2022-08-10T12:07:54.000Z</published>
    <updated>2022-09-02T03:17:02.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一次习题课"><a href="#第一次习题课" class="headerlink" title="第一次习题课"></a>第一次习题课</h2><h3 id="阶乘和"><a href="#阶乘和" class="headerlink" title="阶乘和"></a>阶乘和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cal=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=x;i++)&#123;</span><br><span class="line">        cal*=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode p=L-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        ans+=<span class="built_in">cal</span>(p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>在长度为N的数组arr中，将小于等于arr[0]的数放在数组的左半部分，大于arr[0]的放在右半部分， arr[0]介于中间，输出处理后的数组 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num=arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="comment">//重点！先从右边开始扫</span></span><br><span class="line">        <span class="keyword">while</span>(arr[j]&gt;=num&amp;&amp;i&lt;j)j--;<span class="comment">//从右边扫找到第一个小于标兵的点</span></span><br><span class="line">        <span class="keyword">while</span>(arr[i]&lt;=num&amp;&amp;i&lt;j)i++;<span class="comment">//从左边扫找到第一个大于标兵的点</span></span><br><span class="line">        <span class="built_in">swap</span>(arr[i],arr[j]);<span class="comment">//交换他们</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr[j],arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表重排"><a href="#链表重排" class="headerlink" title="链表重排"></a>链表重排</h3><p> 有一个长度为n有序的带头结点单链表L={a1,a2…an}，设计一个空间复杂度O(1)，时间上尽可能高效的 算法，重新排列L中的结点，得到线性表L’={a1,an,a2,an-2….}，给出算法设计思想并实现，说明时间复杂度 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p=head-&gt;next;</span><br><span class="line">    LNode *q;</span><br><span class="line">    LNode *r;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i++&lt;n/<span class="number">2</span>)</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    r=p-&gt;next;</span><br><span class="line">    q=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(r)&#123;</span><br><span class="line">        p=r-&gt;next;</span><br><span class="line">        r-&gt;next=q;</span><br><span class="line">        q=r;</span><br><span class="line">        r=p;</span><br><span class="line">    &#125;</span><br><span class="line">    p=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next&amp;&amp;q-&gt;next)&#123;</span><br><span class="line">        r=p-&gt;next;</span><br><span class="line">        s=q-&gt;next;</span><br><span class="line">        p-&gt;next=q;</span><br><span class="line">        q-&gt;next=r;</span><br><span class="line">        p=r;</span><br><span class="line">        q=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;next==null)</span><br><span class="line">        p-&gt;next=q;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        q-&gt;next=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表合并"><a href="#链表合并" class="headerlink" title="链表合并"></a>链表合并</h3><p>求两个递增有序带头结点链表LA和LB的并集，形成的新的链表，假设这两个链表都不含有重复的数字， 求并集指的是LA和LB共有的元素只保留一个 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">fun</span><span class="params">(LinkList &amp;LA,LinkList &amp;LB)</span></span>&#123;</span><br><span class="line">    LNode *p=LA-&gt;next;</span><br><span class="line">    LNode *q=LB-&gt;next;</span><br><span class="line">    LA-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    LNode *r=LA;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&lt;=q-&gt;data)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data!=num)&#123;</span><br><span class="line">                r-&gt;next=p;</span><br><span class="line">                r=r-&gt;next;</span><br><span class="line">                num=p-&gt;data;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;data!=num)&#123;</span><br><span class="line">                r-&gt;next=q;</span><br><span class="line">                r=r-&gt;next;</span><br><span class="line">                num=q-&gt;data;</span><br><span class="line">            &#125;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)r-&gt;next=p;</span><br><span class="line">    <span class="keyword">if</span>(q!=<span class="literal">NULL</span>) r-&gt;next=q;</span><br><span class="line">    <span class="keyword">return</span> LA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="火车站"><a href="#火车站" class="headerlink" title="火车站"></a>火车站</h3><p>有一列火车车厢进站，可以通过中转站改变出站顺序，现在的问题是，给定入站顺序和出栈顺序后，请问该站 的容纳量至少为多少节车厢？例如，进站顺序为ABCD，出站顺序为DCBA，则该站台的容纳量至少为4.保证出 站顺序合法 第一行输入n，表示总共有n节车厢 第二行输入n个字母表示进站的车厢序列 第三行输入n个字母表示出站的车厢序列 输出x表示站台的容纳量 输入： 5 ABCDE CBEDA 输出： 3 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> In[N];</span><br><span class="line"><span class="keyword">char</span> Out[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="keyword">char</span>&gt; t;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,In);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Out);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t.<span class="built_in">empty</span>()||t.<span class="built_in">top</span>()!=Out[i])&#123;</span><br><span class="line">            t.<span class="built_in">push</span>(In[j]);</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t.<span class="built_in">size</span>())</span><br><span class="line">                ans=t.<span class="built_in">size</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t.<span class="built_in">pop</span>();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="画圈"><a href="#画圈" class="headerlink" title="画圈"></a>画圈</h3><p>输入n 表示有一个nxn的地图，地图由星组成，输入两个坐标（x1,y1），（x2,y2），由该两点形成一个 矩形，矩形由“1”组成。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">107</span>][<span class="number">107</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(((i==x1||i==x2)&amp;&amp;j&gt;=y1&amp;&amp;j&lt;=y2)||((j==y1||j==y2)&amp;&amp;i&gt;=x1&amp;&amp;i&lt;=x2))</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;1&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;*&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QAQ"><a href="#QAQ" class="headerlink" title="QAQ"></a>QAQ</h3><p>输入一行行由大写字母组成的字符串，数一数有多少个QAQ？QAQ三个字母任意一个位置不同，则总数+1，例如 QAQQ 位置123，算一个QAQ，而位置124也算一个QAQ，因此共有两个QAQ，答案为2 输入： QAQAQBCDEF 输出： 4 解释：123，125，145，345 (数字代表字母的位置)，以上共有4个QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(arr);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;len;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[k]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">                            cnt++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(arr);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pre[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i<span class="number">-1</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            pre[i]=pre[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pre[i]=pre[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            cnt+=pre[i]*(pre[len]-pre[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,arr);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">fun</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h3><p>编写函数，求后缀表达式的值，后缀表达式存在一个字符数组exp中，假设后缀式的数字都只有一位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">char</span> op,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>) <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> a-b;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> a*b;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (a*<span class="number">1.0</span>)/(b*<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> exp[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(exp);</span><br><span class="line">    <span class="keyword">double</span> stack[N];</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(exp[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;exp[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            stack[++top]=exp[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">double</span> a,b,c;</span><br><span class="line">            b=stack[top--];</span><br><span class="line">            a=stack[top--];</span><br><span class="line">            c=<span class="built_in">op</span>(a,exp[i],b);</span><br><span class="line">            stack[++top]=c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack[top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">fun</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序无头结点单链表"><a href="#逆序无头结点单链表" class="headerlink" title="逆序无头结点单链表"></a>逆序无头结点单链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">(Linklist &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>&amp;&amp;L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    LNode *p=L;</span><br><span class="line">    L=<span class="literal">NULL</span>;</span><br><span class="line">    LNode *q=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        p-&gt;next=L;</span><br><span class="line">        L=p;</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="区间反转"><a href="#区间反转" class="headerlink" title="区间反转"></a>区间反转</h3><p>将一个节点数为 size 链表 m 位置到 n 位置之间的区间反转，要求时间复杂度 O(n)，空间复杂度 O(1)。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n-m==<span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    ListNode *p=head;</span><br><span class="line">    ListNode *last=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;m)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        last=p;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *left=p;</span><br><span class="line">    ListNode *nxt;</span><br><span class="line">    ListNode *pre=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;cnt&lt;=n)&#123;</span><br><span class="line">        nxt=p-&gt;next;</span><br><span class="line">        p-&gt;next=pre;</span><br><span class="line">        pre=p;</span><br><span class="line">        p=nxt;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(last!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        last-&gt;next=pre;</span><br><span class="line">        Left-&gt;next=p;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        head-&gt;next=p;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="判断是否有环"><a href="#判断是否有环" class="headerlink" title="判断是否有环"></a>判断是否有环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(Linklist head)</span></span>&#123;</span><br><span class="line">    ListNode *p=head;</span><br><span class="line">    ListNode *q=head;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>||p-&gt;next==<span class="literal">NULL</span>||p-&gt;next-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        p=p-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p==q)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一次习题课&quot;&gt;&lt;a href=&quot;#第一次习题课&quot; class=&quot;headerlink&quot; title=&quot;第一次习题课&quot;&gt;&lt;/a&gt;第一次习题课&lt;/h2&gt;&lt;h3 id=&quot;阶乘和&quot;&gt;&lt;a href=&quot;#阶乘和&quot; class=&quot;headerlink&quot; title=&quot;阶乘和</summary>
      
    
    
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="datastruct" scheme="http://example.com/tags/datastruct/"/>
    
  </entry>
  
</feed>
